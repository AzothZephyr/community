// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#include "market_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace md {
constexpr MdMessage::MdMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MdMessageDefaultTypeInternal {
  constexpr MdMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MdMessageDefaultTypeInternal() {}
  union {
    MdMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MdMessageDefaultTypeInternal _MdMessage_default_instance_;
constexpr MarketByPrice_Level::MarketByPrice_Level(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)
{}
struct MarketByPrice_LevelDefaultTypeInternal {
  constexpr MarketByPrice_LevelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPrice_LevelDefaultTypeInternal() {}
  union {
    MarketByPrice_Level _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPrice_LevelDefaultTypeInternal _MarketByPrice_Level_default_instance_;
constexpr MarketByPrice::MarketByPrice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : levels_()
  , chunk_(0u)
  , numchunks_(0u){}
struct MarketByPriceDefaultTypeInternal {
  constexpr MarketByPriceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPriceDefaultTypeInternal() {}
  union {
    MarketByPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPriceDefaultTypeInternal _MarketByPrice_default_instance_;
constexpr MarketByPriceDiff_Diff::MarketByPriceDiff_Diff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , op_(0)
{}
struct MarketByPriceDiff_DiffDefaultTypeInternal {
  constexpr MarketByPriceDiff_DiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPriceDiff_DiffDefaultTypeInternal() {}
  union {
    MarketByPriceDiff_Diff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPriceDiff_DiffDefaultTypeInternal _MarketByPriceDiff_Diff_default_instance_;
constexpr MarketByPriceDiff::MarketByPriceDiff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diffs_()
  , totalbidlevels_(0u)
  , totalasklevels_(0u){}
struct MarketByPriceDiffDefaultTypeInternal {
  constexpr MarketByPriceDiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPriceDiffDefaultTypeInternal() {}
  union {
    MarketByPriceDiff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPriceDiffDefaultTypeInternal _MarketByPriceDiff_default_instance_;
constexpr MarketByOrder_Order::MarketByOrder_Order(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , exchangeorderid_(PROTOBUF_ULONGLONG(0))
  , side_(0)
{}
struct MarketByOrder_OrderDefaultTypeInternal {
  constexpr MarketByOrder_OrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrder_OrderDefaultTypeInternal() {}
  union {
    MarketByOrder_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrder_OrderDefaultTypeInternal _MarketByOrder_Order_default_instance_;
constexpr MarketByOrder::MarketByOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_()
  , chunk_(0u)
  , numchunks_(0u){}
struct MarketByOrderDefaultTypeInternal {
  constexpr MarketByOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrderDefaultTypeInternal() {}
  union {
    MarketByOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrderDefaultTypeInternal _MarketByOrder_default_instance_;
constexpr MarketByOrderDiff_Diff::MarketByOrderDiff_Diff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , exchangeorderid_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , op_(0)
{}
struct MarketByOrderDiff_DiffDefaultTypeInternal {
  constexpr MarketByOrderDiff_DiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrderDiff_DiffDefaultTypeInternal() {}
  union {
    MarketByOrderDiff_Diff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrderDiff_DiffDefaultTypeInternal _MarketByOrderDiff_Diff_default_instance_;
constexpr MarketByOrderDiff::MarketByOrderDiff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diffs_()
  , totalbidlevels_(0u)
  , totalasklevels_(0u)
  , totalbidorders_(0u)
  , totalaskorders_(0u){}
struct MarketByOrderDiffDefaultTypeInternal {
  constexpr MarketByOrderDiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrderDiffDefaultTypeInternal() {}
  union {
    MarketByOrderDiff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrderDiffDefaultTypeInternal _MarketByOrderDiff_default_instance_;
constexpr Trades_Trade::Trades_Trade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tradeid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0))
  , restingexchangeorderid_(PROTOBUF_ULONGLONG(0))
  , fillquantity_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , aggressingexchangeorderid_(PROTOBUF_ULONGLONG(0))
  , aggressingside_(0)
{}
struct Trades_TradeDefaultTypeInternal {
  constexpr Trades_TradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Trades_TradeDefaultTypeInternal() {}
  union {
    Trades_Trade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Trades_TradeDefaultTypeInternal _Trades_Trade_default_instance_;
constexpr Trades::Trades(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trades_(){}
struct TradesDefaultTypeInternal {
  constexpr TradesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TradesDefaultTypeInternal() {}
  union {
    Trades _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TradesDefaultTypeInternal _Trades_default_instance_;
constexpr Summary::Summary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : low_(PROTOBUF_ULONGLONG(0))
  , high_(PROTOBUF_ULONGLONG(0))
  , basevolumelo_(PROTOBUF_ULONGLONG(0))
  , basevolumehi_(PROTOBUF_ULONGLONG(0))
  , quotevolumelo_(PROTOBUF_ULONGLONG(0))
  , quotevolumehi_(PROTOBUF_ULONGLONG(0)){}
struct SummaryDefaultTypeInternal {
  constexpr SummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryDefaultTypeInternal() {}
  union {
    Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryDefaultTypeInternal _Summary_default_instance_;
constexpr Kline::Kline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : starttime_(PROTOBUF_ULONGLONG(0))
  , open_(PROTOBUF_ULONGLONG(0))
  , close_(PROTOBUF_ULONGLONG(0))
  , high_(PROTOBUF_ULONGLONG(0))
  , low_(PROTOBUF_ULONGLONG(0))
  , volumelo_(PROTOBUF_ULONGLONG(0))
  , volumehi_(PROTOBUF_ULONGLONG(0))
  , interval_(0)
{}
struct KlineDefaultTypeInternal {
  constexpr KlineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KlineDefaultTypeInternal() {}
  union {
    Kline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KlineDefaultTypeInternal _Kline_default_instance_;
constexpr Heartbeat::Heartbeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0))
  , timestamp_(PROTOBUF_ULONGLONG(0)){}
struct HeartbeatDefaultTypeInternal {
  constexpr HeartbeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
constexpr MdMessages::MdMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct MdMessagesDefaultTypeInternal {
  constexpr MdMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MdMessagesDefaultTypeInternal() {}
  union {
    MdMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MdMessagesDefaultTypeInternal _MdMessages_default_instance_;
constexpr AggMessage::AggMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AggMessageDefaultTypeInternal {
  constexpr AggMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggMessageDefaultTypeInternal() {}
  union {
    AggMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggMessageDefaultTypeInternal _AggMessage_default_instance_;
constexpr TopOfBook::TopOfBook(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marketid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , bidprice_(PROTOBUF_ULONGLONG(0))
  , bidquantity_(PROTOBUF_ULONGLONG(0))
  , askprice_(PROTOBUF_ULONGLONG(0))
  , askquantity_(PROTOBUF_ULONGLONG(0))
  , lastprice_(PROTOBUF_ULONGLONG(0)){}
struct TopOfBookDefaultTypeInternal {
  constexpr TopOfBookDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopOfBookDefaultTypeInternal() {}
  union {
    TopOfBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopOfBookDefaultTypeInternal _TopOfBook_default_instance_;
constexpr TopOfBooks::TopOfBooks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tops_(){}
struct TopOfBooksDefaultTypeInternal {
  constexpr TopOfBooksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopOfBooksDefaultTypeInternal() {}
  union {
    TopOfBooks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopOfBooksDefaultTypeInternal _TopOfBooks_default_instance_;
constexpr ClientMessage::ClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ClientMessageDefaultTypeInternal {
  constexpr ClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientMessageDefaultTypeInternal() {}
  union {
    ClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : klines_()
  , _klines_cached_byte_size_()
  , mbp_(false)
  , mbo_(false)
  , trades_(false)
  , summary_(false){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace md
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_market_5fdata_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_market_5fdata_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_market_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_market_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MdMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::md::MdMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::md::MdMessage, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice_Level, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice_Level, price_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice_Level, quantity_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice_Level, side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice, levels_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice, chunk_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPrice, numchunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff_Diff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff_Diff, price_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff_Diff, quantity_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff_Diff, side_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff_Diff, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff, diffs_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff, totalbidlevels_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByPriceDiff, totalasklevels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder_Order, price_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder_Order, quantity_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder_Order, exchangeorderid_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder_Order, side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder, orders_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder, chunk_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrder, numchunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff_Diff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff_Diff, price_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff_Diff, quantity_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff_Diff, exchangeorderid_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff_Diff, side_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff_Diff, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff, diffs_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff, totalbidlevels_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff, totalasklevels_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff, totalbidorders_),
  PROTOBUF_FIELD_OFFSET(::md::MarketByOrderDiff, totalaskorders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, tradeid_),
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, price_),
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, aggressingside_),
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, restingexchangeorderid_),
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, fillquantity_),
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, transacttime_),
  PROTOBUF_FIELD_OFFSET(::md::Trades_Trade, aggressingexchangeorderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::Trades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::Trades, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::Summary, low_),
  PROTOBUF_FIELD_OFFSET(::md::Summary, high_),
  PROTOBUF_FIELD_OFFSET(::md::Summary, basevolumelo_),
  PROTOBUF_FIELD_OFFSET(::md::Summary, basevolumehi_),
  PROTOBUF_FIELD_OFFSET(::md::Summary, quotevolumelo_),
  PROTOBUF_FIELD_OFFSET(::md::Summary, quotevolumehi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::Kline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::Kline, interval_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, starttime_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, open_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, close_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, high_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, low_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, volumelo_),
  PROTOBUF_FIELD_OFFSET(::md::Kline, volumehi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::Heartbeat, requestid_),
  PROTOBUF_FIELD_OFFSET(::md::Heartbeat, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::MdMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::MdMessages, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::AggMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::md::AggMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::md::AggMessage, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, marketid_),
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, transacttime_),
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, bidprice_),
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, bidquantity_),
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, askprice_),
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, askquantity_),
  PROTOBUF_FIELD_OFFSET(::md::TopOfBook, lastprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::TopOfBooks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::TopOfBooks, tops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::md::ClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::md::ClientMessage, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::md::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::md::Config, mbp_),
  PROTOBUF_FIELD_OFFSET(::md::Config, mbo_),
  PROTOBUF_FIELD_OFFSET(::md::Config, trades_),
  PROTOBUF_FIELD_OFFSET(::md::Config, summary_),
  PROTOBUF_FIELD_OFFSET(::md::Config, klines_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::md::MdMessage)},
  { 14, -1, sizeof(::md::MarketByPrice_Level)},
  { 22, -1, sizeof(::md::MarketByPrice)},
  { 30, -1, sizeof(::md::MarketByPriceDiff_Diff)},
  { 39, -1, sizeof(::md::MarketByPriceDiff)},
  { 47, -1, sizeof(::md::MarketByOrder_Order)},
  { 56, -1, sizeof(::md::MarketByOrder)},
  { 64, -1, sizeof(::md::MarketByOrderDiff_Diff)},
  { 74, -1, sizeof(::md::MarketByOrderDiff)},
  { 84, -1, sizeof(::md::Trades_Trade)},
  { 96, -1, sizeof(::md::Trades)},
  { 102, -1, sizeof(::md::Summary)},
  { 113, -1, sizeof(::md::Kline)},
  { 126, -1, sizeof(::md::Heartbeat)},
  { 133, -1, sizeof(::md::MdMessages)},
  { 139, -1, sizeof(::md::AggMessage)},
  { 147, -1, sizeof(::md::TopOfBook)},
  { 159, -1, sizeof(::md::TopOfBooks)},
  { 165, -1, sizeof(::md::ClientMessage)},
  { 173, -1, sizeof(::md::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MdMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByPrice_Level_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByPrice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByPriceDiff_Diff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByPriceDiff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByOrder_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByOrderDiff_Diff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MarketByOrderDiff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_Trades_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_Trades_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_Summary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_Kline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_MdMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_AggMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_TopOfBook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_TopOfBooks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::md::_Config_default_instance_),
};

const char descriptor_table_protodef_market_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021market_data.proto\022\002md\"\272\002\n\tMdMessage\022\"\n"
  "\theartbeat\030\001 \001(\0132\r.md.HeartbeatH\000\022\036\n\007sum"
  "mary\030\002 \001(\0132\013.md.SummaryH\000\022\034\n\006trades\030\003 \001("
  "\0132\n.md.TradesH\000\022(\n\013mboSnapshot\030\004 \001(\0132\021.m"
  "d.MarketByOrderH\000\022(\n\007mboDiff\030\005 \001(\0132\025.md."
  "MarketByOrderDiffH\000\022(\n\013mbpSnapshot\030\006 \001(\013"
  "2\021.md.MarketByPriceH\000\022(\n\007mbpDiff\030\007 \001(\0132\025"
  ".md.MarketByPriceDiffH\000\022\032\n\005kline\030\010 \001(\0132\t"
  ".md.KlineH\000B\007\n\005inner\"\234\001\n\rMarketByPrice\022\'"
  "\n\006levels\030\001 \003(\0132\027.md.MarketByPrice.Level\022"
  "\r\n\005chunk\030\002 \001(\r\022\021\n\tnumChunks\030\003 \001(\r\032@\n\005Lev"
  "el\022\r\n\005price\030\001 \001(\004\022\020\n\010quantity\030\002 \001(\004\022\026\n\004s"
  "ide\030\003 \001(\0162\010.md.Side\"\205\002\n\021MarketByPriceDif"
  "f\022)\n\005diffs\030\001 \003(\0132\032.md.MarketByPriceDiff."
  "Diff\022\026\n\016totalBidLevels\030\002 \001(\r\022\026\n\016totalAsk"
  "Levels\030\003 \001(\r\032i\n\004Diff\022\r\n\005price\030\001 \001(\004\022\020\n\010q"
  "uantity\030\002 \001(\004\022\026\n\004side\030\003 \001(\0162\010.md.Side\022(\n"
  "\002op\030\004 \001(\0162\034.md.MarketByPriceDiff.DiffOp\""
  "*\n\006DiffOp\022\007\n\003ADD\020\000\022\n\n\006REMOVE\020\001\022\013\n\007REPLAC"
  "E\020\002\"\265\001\n\rMarketByOrder\022\'\n\006orders\030\001 \003(\0132\027."
  "md.MarketByOrder.Order\022\r\n\005chunk\030\002 \001(\r\022\021\n"
  "\tnumChunks\030\003 \001(\r\032Y\n\005Order\022\r\n\005price\030\001 \001(\004"
  "\022\020\n\010quantity\030\002 \001(\004\022\027\n\017exchangeOrderId\030\003 "
  "\001(\004\022\026\n\004side\030\004 \001(\0162\010.md.Side\"\321\002\n\021MarketBy"
  "OrderDiff\022)\n\005diffs\030\001 \003(\0132\032.md.MarketByOr"
  "derDiff.Diff\022\026\n\016totalBidLevels\030\002 \001(\r\022\026\n\016"
  "totalAskLevels\030\003 \001(\r\022\026\n\016totalBidOrders\030\004"
  " \001(\r\022\026\n\016totalAskOrders\030\005 \001(\r\032\203\001\n\004Diff\022\r\n"
  "\005price\030\001 \001(\004\022\020\n\010quantity\030\002 \001(\004\022\027\n\017exchan"
  "geOrderId\030\003 \001(\004\022\026\n\004side\030\004 \001(\0162\010.md.Side\022"
  ")\n\002op\030\005 \001(\0162\035.md.MarketByOrderDiff.Order"
  "Op\"+\n\007OrderOp\022\007\n\003ADD\020\000\022\n\n\006REMOVE\020\001\022\013\n\007RE"
  "PLACE\020\002\"\345\001\n\006Trades\022 \n\006trades\030\001 \003(\0132\020.md."
  "Trades.Trade\032\270\001\n\005Trade\022\017\n\007tradeId\030\001 \001(\004\022"
  "\r\n\005price\030\002 \001(\004\022 \n\016aggressingSide\030\003 \001(\0162\010"
  ".md.Side\022\036\n\026restingExchangeOrderId\030\004 \001(\004"
  "\022\024\n\014fillQuantity\030\005 \001(\004\022\024\n\014transactTime\030\006"
  " \001(\004\022!\n\031aggressingExchangeOrderId\030\007 \001(\004\""
  "~\n\007Summary\022\013\n\003low\030\001 \001(\004\022\014\n\004high\030\002 \001(\004\022\024\n"
  "\014baseVolumeLo\030\003 \001(\004\022\024\n\014baseVolumeHi\030\004 \001("
  "\004\022\025\n\rquoteVolumeLo\030\005 \001(\004\022\025\n\rquoteVolumeH"
  "i\030\006 \001(\004\"\233\001\n\005Kline\022#\n\010interval\030\001 \001(\0162\021.md"
  ".KlineInterval\022\021\n\tstartTime\030\002 \001(\004\022\014\n\004ope"
  "n\030\003 \001(\004\022\r\n\005close\030\004 \001(\004\022\014\n\004high\030\005 \001(\004\022\013\n\003"
  "low\030\006 \001(\004\022\020\n\010volumeLo\030\007 \001(\004\022\020\n\010volumeHi\030"
  "\010 \001(\004\"1\n\tHeartbeat\022\021\n\trequestId\030\001 \001(\004\022\021\n"
  "\ttimestamp\030\002 \001(\004\"-\n\nMdMessages\022\037\n\010messag"
  "es\030\001 \003(\0132\r.md.MdMessage\"_\n\nAggMessage\022\"\n"
  "\theartbeat\030\001 \001(\0132\r.md.HeartbeatH\000\022$\n\ntop"
  "OfBooks\030\002 \001(\0132\016.md.TopOfBooksH\000B\007\n\005inner"
  "\"\224\001\n\tTopOfBook\022\020\n\010marketId\030\001 \001(\004\022\024\n\014tran"
  "sactTime\030\002 \001(\004\022\020\n\010bidPrice\030\003 \001(\004\022\023\n\013bidQ"
  "uantity\030\004 \001(\004\022\020\n\010askPrice\030\005 \001(\004\022\023\n\013askQu"
  "antity\030\006 \001(\004\022\021\n\tlastPrice\030\007 \001(\004\")\n\nTopOf"
  "Books\022\033\n\004tops\030\001 \003(\0132\r.md.TopOfBook\"Z\n\rCl"
  "ientMessage\022\"\n\theartbeat\030\001 \001(\0132\r.md.Hear"
  "tbeatH\000\022\034\n\006config\030\002 \001(\0132\n.md.ConfigH\000B\007\n"
  "\005inner\"f\n\006Config\022\013\n\003mbp\030\001 \001(\010\022\013\n\003mbo\030\002 \001"
  "(\010\022\016\n\006trades\030\003 \001(\010\022\017\n\007summary\030\004 \001(\010\022!\n\006k"
  "lines\030\005 \003(\0162\021.md.KlineInterval*\030\n\004Side\022\007"
  "\n\003BID\020\000\022\007\n\003ASK\020\001*@\n\rKlineInterval\022\006\n\002S1\020"
  "\000\022\006\n\002M1\020\001\022\007\n\003M15\020\002\022\006\n\002H1\020\003\022\006\n\002H4\020\004\022\006\n\002D1"
  "\020\005B\027Z\003go/\252\002\017Cube.MarketDatab\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_market_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto = {
  false, false, 2515, descriptor_table_protodef_market_5fdata_2eproto, "market_data.proto", 
  &descriptor_table_market_5fdata_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_market_5fdata_2eproto::offsets,
  file_level_metadata_market_5fdata_2eproto, file_level_enum_descriptors_market_5fdata_2eproto, file_level_service_descriptors_market_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_market_5fdata_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return descriptor_table_market_5fdata_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_market_5fdata_2eproto(&descriptor_table_market_5fdata_2eproto);
namespace md {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByPriceDiff_DiffOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[0];
}
bool MarketByPriceDiff_DiffOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::ADD;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::REMOVE;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::REPLACE;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::DiffOp_MIN;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::DiffOp_MAX;
constexpr int MarketByPriceDiff::DiffOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByOrderDiff_OrderOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[1];
}
bool MarketByOrderDiff_OrderOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff::ADD;
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff::REMOVE;
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff::REPLACE;
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff::OrderOp_MIN;
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff::OrderOp_MAX;
constexpr int MarketByOrderDiff::OrderOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[2];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KlineInterval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[3];
}
bool KlineInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MdMessage::_Internal {
 public:
  static const ::md::Heartbeat& heartbeat(const MdMessage* msg);
  static const ::md::Summary& summary(const MdMessage* msg);
  static const ::md::Trades& trades(const MdMessage* msg);
  static const ::md::MarketByOrder& mbosnapshot(const MdMessage* msg);
  static const ::md::MarketByOrderDiff& mbodiff(const MdMessage* msg);
  static const ::md::MarketByPrice& mbpsnapshot(const MdMessage* msg);
  static const ::md::MarketByPriceDiff& mbpdiff(const MdMessage* msg);
  static const ::md::Kline& kline(const MdMessage* msg);
};

const ::md::Heartbeat&
MdMessage::_Internal::heartbeat(const MdMessage* msg) {
  return *msg->inner_.heartbeat_;
}
const ::md::Summary&
MdMessage::_Internal::summary(const MdMessage* msg) {
  return *msg->inner_.summary_;
}
const ::md::Trades&
MdMessage::_Internal::trades(const MdMessage* msg) {
  return *msg->inner_.trades_;
}
const ::md::MarketByOrder&
MdMessage::_Internal::mbosnapshot(const MdMessage* msg) {
  return *msg->inner_.mbosnapshot_;
}
const ::md::MarketByOrderDiff&
MdMessage::_Internal::mbodiff(const MdMessage* msg) {
  return *msg->inner_.mbodiff_;
}
const ::md::MarketByPrice&
MdMessage::_Internal::mbpsnapshot(const MdMessage* msg) {
  return *msg->inner_.mbpsnapshot_;
}
const ::md::MarketByPriceDiff&
MdMessage::_Internal::mbpdiff(const MdMessage* msg) {
  return *msg->inner_.mbpdiff_;
}
const ::md::Kline&
MdMessage::_Internal::kline(const MdMessage* msg) {
  return *msg->inner_.kline_;
}
void MdMessage::set_allocated_heartbeat(::md::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.heartbeat)
}
void MdMessage::set_allocated_summary(::md::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    inner_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.summary)
}
void MdMessage::set_allocated_trades(::md::Trades* trades) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (trades) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trades);
    if (message_arena != submessage_arena) {
      trades = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trades, submessage_arena);
    }
    set_has_trades();
    inner_.trades_ = trades;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.trades)
}
void MdMessage::set_allocated_mbosnapshot(::md::MarketByOrder* mbosnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbosnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbosnapshot);
    if (message_arena != submessage_arena) {
      mbosnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbosnapshot, submessage_arena);
    }
    set_has_mbosnapshot();
    inner_.mbosnapshot_ = mbosnapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.mboSnapshot)
}
void MdMessage::set_allocated_mbodiff(::md::MarketByOrderDiff* mbodiff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbodiff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbodiff);
    if (message_arena != submessage_arena) {
      mbodiff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbodiff, submessage_arena);
    }
    set_has_mbodiff();
    inner_.mbodiff_ = mbodiff;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.mboDiff)
}
void MdMessage::set_allocated_mbpsnapshot(::md::MarketByPrice* mbpsnapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbpsnapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbpsnapshot);
    if (message_arena != submessage_arena) {
      mbpsnapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbpsnapshot, submessage_arena);
    }
    set_has_mbpsnapshot();
    inner_.mbpsnapshot_ = mbpsnapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.mbpSnapshot)
}
void MdMessage::set_allocated_mbpdiff(::md::MarketByPriceDiff* mbpdiff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbpdiff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbpdiff);
    if (message_arena != submessage_arena) {
      mbpdiff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbpdiff, submessage_arena);
    }
    set_has_mbpdiff();
    inner_.mbpdiff_ = mbpdiff;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.mbpDiff)
}
void MdMessage::set_allocated_kline(::md::Kline* kline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (kline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kline);
    if (message_arena != submessage_arena) {
      kline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kline, submessage_arena);
    }
    set_has_kline();
    inner_.kline_ = kline;
  }
  // @@protoc_insertion_point(field_set_allocated:md.MdMessage.kline)
}
MdMessage::MdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MdMessage)
}
MdMessage::MdMessage(const MdMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::md::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::md::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kTrades: {
      _internal_mutable_trades()->::md::Trades::MergeFrom(from._internal_trades());
      break;
    }
    case kMboSnapshot: {
      _internal_mutable_mbosnapshot()->::md::MarketByOrder::MergeFrom(from._internal_mbosnapshot());
      break;
    }
    case kMboDiff: {
      _internal_mutable_mbodiff()->::md::MarketByOrderDiff::MergeFrom(from._internal_mbodiff());
      break;
    }
    case kMbpSnapshot: {
      _internal_mutable_mbpsnapshot()->::md::MarketByPrice::MergeFrom(from._internal_mbpsnapshot());
      break;
    }
    case kMbpDiff: {
      _internal_mutable_mbpdiff()->::md::MarketByPriceDiff::MergeFrom(from._internal_mbpdiff());
      break;
    }
    case kKline: {
      _internal_mutable_kline()->::md::Kline::MergeFrom(from._internal_kline());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:md.MdMessage)
}

void MdMessage::SharedCtor() {
clear_has_inner();
}

MdMessage::~MdMessage() {
  // @@protoc_insertion_point(destructor:md.MdMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MdMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void MdMessage::ArenaDtor(void* object) {
  MdMessage* _this = reinterpret_cast< MdMessage* >(object);
  (void)_this;
}
void MdMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MdMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MdMessage::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:md.MdMessage)
  switch (inner_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete inner_.summary_;
      }
      break;
    }
    case kTrades: {
      if (GetArena() == nullptr) {
        delete inner_.trades_;
      }
      break;
    }
    case kMboSnapshot: {
      if (GetArena() == nullptr) {
        delete inner_.mbosnapshot_;
      }
      break;
    }
    case kMboDiff: {
      if (GetArena() == nullptr) {
        delete inner_.mbodiff_;
      }
      break;
    }
    case kMbpSnapshot: {
      if (GetArena() == nullptr) {
        delete inner_.mbpsnapshot_;
      }
      break;
    }
    case kMbpDiff: {
      if (GetArena() == nullptr) {
        delete inner_.mbpdiff_;
      }
      break;
    }
    case kKline: {
      if (GetArena() == nullptr) {
        delete inner_.kline_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void MdMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MdMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .md.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Summary summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Trades trades = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trades(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.MarketByOrder mboSnapshot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbosnapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.MarketByOrderDiff mboDiff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbodiff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.MarketByPrice mbpSnapshot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbpsnapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.MarketByPriceDiff mbpDiff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbpdiff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Kline kline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MdMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .md.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .md.Summary summary = 2;
  if (_internal_has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::summary(this), target, stream);
  }

  // .md.Trades trades = 3;
  if (_internal_has_trades()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trades(this), target, stream);
  }

  // .md.MarketByOrder mboSnapshot = 4;
  if (_internal_has_mbosnapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mbosnapshot(this), target, stream);
  }

  // .md.MarketByOrderDiff mboDiff = 5;
  if (_internal_has_mbodiff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mbodiff(this), target, stream);
  }

  // .md.MarketByPrice mbpSnapshot = 6;
  if (_internal_has_mbpsnapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mbpsnapshot(this), target, stream);
  }

  // .md.MarketByPriceDiff mbpDiff = 7;
  if (_internal_has_mbpdiff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mbpdiff(this), target, stream);
  }

  // .md.Kline kline = 8;
  if (_internal_has_kline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::kline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MdMessage)
  return target;
}

size_t MdMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MdMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .md.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .md.Summary summary = 2;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.summary_);
      break;
    }
    // .md.Trades trades = 3;
    case kTrades: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.trades_);
      break;
    }
    // .md.MarketByOrder mboSnapshot = 4;
    case kMboSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbosnapshot_);
      break;
    }
    // .md.MarketByOrderDiff mboDiff = 5;
    case kMboDiff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbodiff_);
      break;
    }
    // .md.MarketByPrice mbpSnapshot = 6;
    case kMbpSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbpsnapshot_);
      break;
    }
    // .md.MarketByPriceDiff mbpDiff = 7;
    case kMbpDiff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbpdiff_);
      break;
    }
    // .md.Kline kline = 8;
    case kKline: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.kline_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MdMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MdMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MdMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MdMessage)
    MergeFrom(*source);
  }
}

void MdMessage::MergeFrom(const MdMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::md::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::md::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kTrades: {
      _internal_mutable_trades()->::md::Trades::MergeFrom(from._internal_trades());
      break;
    }
    case kMboSnapshot: {
      _internal_mutable_mbosnapshot()->::md::MarketByOrder::MergeFrom(from._internal_mbosnapshot());
      break;
    }
    case kMboDiff: {
      _internal_mutable_mbodiff()->::md::MarketByOrderDiff::MergeFrom(from._internal_mbodiff());
      break;
    }
    case kMbpSnapshot: {
      _internal_mutable_mbpsnapshot()->::md::MarketByPrice::MergeFrom(from._internal_mbpsnapshot());
      break;
    }
    case kMbpDiff: {
      _internal_mutable_mbpdiff()->::md::MarketByPriceDiff::MergeFrom(from._internal_mbpdiff());
      break;
    }
    case kKline: {
      _internal_mutable_kline()->::md::Kline::MergeFrom(from._internal_kline());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void MdMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MdMessage::CopyFrom(const MdMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdMessage::IsInitialized() const {
  return true;
}

void MdMessage::InternalSwap(MdMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MdMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPrice_Level::_Internal {
 public:
};

MarketByPrice_Level::MarketByPrice_Level(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByPrice.Level)
}
MarketByPrice_Level::MarketByPrice_Level(const MarketByPrice_Level& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByPrice.Level)
}

void MarketByPrice_Level::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
}

MarketByPrice_Level::~MarketByPrice_Level() {
  // @@protoc_insertion_point(destructor:md.MarketByPrice.Level)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPrice_Level::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPrice_Level::ArenaDtor(void* object) {
  MarketByPrice_Level* _this = reinterpret_cast< MarketByPrice_Level* >(object);
  (void)_this;
}
void MarketByPrice_Level::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPrice_Level::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPrice_Level::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByPrice.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&price_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPrice_Level::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Side side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::md::Side>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPrice_Level::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByPrice.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // .md.Side side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByPrice.Level)
  return target;
}

size_t MarketByPrice_Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByPrice.Level)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .md.Side side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPrice_Level::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByPrice.Level)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPrice_Level* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPrice_Level>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByPrice.Level)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByPrice.Level)
    MergeFrom(*source);
  }
}

void MarketByPrice_Level::MergeFrom(const MarketByPrice_Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByPrice.Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void MarketByPrice_Level::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByPrice.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPrice_Level::CopyFrom(const MarketByPrice_Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByPrice.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPrice_Level::IsInitialized() const {
  return true;
}

void MarketByPrice_Level::InternalSwap(MarketByPrice_Level* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPrice_Level, side_)
      + sizeof(MarketByPrice_Level::side_)
      - PROTOBUF_FIELD_OFFSET(MarketByPrice_Level, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPrice_Level::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPrice::_Internal {
 public:
};

MarketByPrice::MarketByPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  levels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByPrice)
}
MarketByPrice::MarketByPrice(const MarketByPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunk_, &from.chunk_,
    static_cast<size_t>(reinterpret_cast<char*>(&numchunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(numchunks_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByPrice)
}

void MarketByPrice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numchunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(numchunks_));
}

MarketByPrice::~MarketByPrice() {
  // @@protoc_insertion_point(destructor:md.MarketByPrice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPrice::ArenaDtor(void* object) {
  MarketByPrice* _this = reinterpret_cast< MarketByPrice* >(object);
  (void)_this;
}
void MarketByPrice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  ::memset(&chunk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numchunks_) -
      reinterpret_cast<char*>(&chunk_)) + sizeof(numchunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPrice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.MarketByPrice.Level levels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_levels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 numChunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          numchunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPrice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.MarketByPrice.Level levels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_levels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_levels(i), target, stream);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk(), target);
  }

  // uint32 numChunks = 3;
  if (this->numchunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numchunks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByPrice)
  return target;
}

size_t MarketByPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByPrice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.MarketByPrice.Level levels = 1;
  total_size += 1UL * this->_internal_levels_size();
  for (const auto& msg : this->levels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk());
  }

  // uint32 numChunks = 3;
  if (this->numchunks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numchunks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPrice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPrice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPrice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByPrice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByPrice)
    MergeFrom(*source);
  }
}

void MarketByPrice::MergeFrom(const MarketByPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  if (from.chunk() != 0) {
    _internal_set_chunk(from._internal_chunk());
  }
  if (from.numchunks() != 0) {
    _internal_set_numchunks(from._internal_numchunks());
  }
}

void MarketByPrice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPrice::CopyFrom(const MarketByPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPrice::IsInitialized() const {
  return true;
}

void MarketByPrice::InternalSwap(MarketByPrice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  levels_.InternalSwap(&other->levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPrice, numchunks_)
      + sizeof(MarketByPrice::numchunks_)
      - PROTOBUF_FIELD_OFFSET(MarketByPrice, chunk_)>(
          reinterpret_cast<char*>(&chunk_),
          reinterpret_cast<char*>(&other->chunk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPrice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPriceDiff_Diff::_Internal {
 public:
};

MarketByPriceDiff_Diff::MarketByPriceDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByPriceDiff.Diff)
}
MarketByPriceDiff_Diff::MarketByPriceDiff_Diff(const MarketByPriceDiff_Diff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&price_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByPriceDiff.Diff)
}

void MarketByPriceDiff_Diff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&price_)) + sizeof(op_));
}

MarketByPriceDiff_Diff::~MarketByPriceDiff_Diff() {
  // @@protoc_insertion_point(destructor:md.MarketByPriceDiff.Diff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPriceDiff_Diff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPriceDiff_Diff::ArenaDtor(void* object) {
  MarketByPriceDiff_Diff* _this = reinterpret_cast< MarketByPriceDiff_Diff* >(object);
  (void)_this;
}
void MarketByPriceDiff_Diff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPriceDiff_Diff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPriceDiff_Diff::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByPriceDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&price_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPriceDiff_Diff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Side side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::md::Side>(val));
        } else goto handle_unusual;
        continue;
      // .md.MarketByPriceDiff.DiffOp op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::md::MarketByPriceDiff_DiffOp>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPriceDiff_Diff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByPriceDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // .md.Side side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  // .md.MarketByPriceDiff.DiffOp op = 4;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByPriceDiff.Diff)
  return target;
}

size_t MarketByPriceDiff_Diff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByPriceDiff.Diff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .md.Side side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .md.MarketByPriceDiff.DiffOp op = 4;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPriceDiff_Diff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByPriceDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPriceDiff_Diff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPriceDiff_Diff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByPriceDiff.Diff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByPriceDiff.Diff)
    MergeFrom(*source);
  }
}

void MarketByPriceDiff_Diff::MergeFrom(const MarketByPriceDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByPriceDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void MarketByPriceDiff_Diff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByPriceDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPriceDiff_Diff::CopyFrom(const MarketByPriceDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByPriceDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPriceDiff_Diff::IsInitialized() const {
  return true;
}

void MarketByPriceDiff_Diff::InternalSwap(MarketByPriceDiff_Diff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPriceDiff_Diff, op_)
      + sizeof(MarketByPriceDiff_Diff::op_)
      - PROTOBUF_FIELD_OFFSET(MarketByPriceDiff_Diff, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPriceDiff_Diff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPriceDiff::_Internal {
 public:
};

MarketByPriceDiff::MarketByPriceDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByPriceDiff)
}
MarketByPriceDiff::MarketByPriceDiff(const MarketByPriceDiff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diffs_(from.diffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&totalbidlevels_, &from.totalbidlevels_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalasklevels_) -
    reinterpret_cast<char*>(&totalbidlevels_)) + sizeof(totalasklevels_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByPriceDiff)
}

void MarketByPriceDiff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&totalbidlevels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalasklevels_) -
    reinterpret_cast<char*>(&totalbidlevels_)) + sizeof(totalasklevels_));
}

MarketByPriceDiff::~MarketByPriceDiff() {
  // @@protoc_insertion_point(destructor:md.MarketByPriceDiff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPriceDiff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPriceDiff::ArenaDtor(void* object) {
  MarketByPriceDiff* _this = reinterpret_cast< MarketByPriceDiff* >(object);
  (void)_this;
}
void MarketByPriceDiff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPriceDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPriceDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByPriceDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diffs_.Clear();
  ::memset(&totalbidlevels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalasklevels_) -
      reinterpret_cast<char*>(&totalbidlevels_)) + sizeof(totalasklevels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPriceDiff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.MarketByPriceDiff.Diff diffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 totalBidLevels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalbidlevels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalAskLevels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalasklevels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPriceDiff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByPriceDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.MarketByPriceDiff.Diff diffs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_diffs(i), target, stream);
  }

  // uint32 totalBidLevels = 2;
  if (this->totalbidlevels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_totalbidlevels(), target);
  }

  // uint32 totalAskLevels = 3;
  if (this->totalasklevels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_totalasklevels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByPriceDiff)
  return target;
}

size_t MarketByPriceDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByPriceDiff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.MarketByPriceDiff.Diff diffs = 1;
  total_size += 1UL * this->_internal_diffs_size();
  for (const auto& msg : this->diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 totalBidLevels = 2;
  if (this->totalbidlevels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalbidlevels());
  }

  // uint32 totalAskLevels = 3;
  if (this->totalasklevels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalasklevels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPriceDiff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByPriceDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPriceDiff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPriceDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByPriceDiff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByPriceDiff)
    MergeFrom(*source);
  }
}

void MarketByPriceDiff::MergeFrom(const MarketByPriceDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByPriceDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diffs_.MergeFrom(from.diffs_);
  if (from.totalbidlevels() != 0) {
    _internal_set_totalbidlevels(from._internal_totalbidlevels());
  }
  if (from.totalasklevels() != 0) {
    _internal_set_totalasklevels(from._internal_totalasklevels());
  }
}

void MarketByPriceDiff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByPriceDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPriceDiff::CopyFrom(const MarketByPriceDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByPriceDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPriceDiff::IsInitialized() const {
  return true;
}

void MarketByPriceDiff::InternalSwap(MarketByPriceDiff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  diffs_.InternalSwap(&other->diffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPriceDiff, totalasklevels_)
      + sizeof(MarketByPriceDiff::totalasklevels_)
      - PROTOBUF_FIELD_OFFSET(MarketByPriceDiff, totalbidlevels_)>(
          reinterpret_cast<char*>(&totalbidlevels_),
          reinterpret_cast<char*>(&other->totalbidlevels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPriceDiff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrder_Order::_Internal {
 public:
};

MarketByOrder_Order::MarketByOrder_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByOrder.Order)
}
MarketByOrder_Order::MarketByOrder_Order(const MarketByOrder_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByOrder.Order)
}

void MarketByOrder_Order::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
}

MarketByOrder_Order::~MarketByOrder_Order() {
  // @@protoc_insertion_point(destructor:md.MarketByOrder.Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrder_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrder_Order::ArenaDtor(void* object) {
  MarketByOrder_Order* _this = reinterpret_cast< MarketByOrder_Order* >(object);
  (void)_this;
}
void MarketByOrder_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrder_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrder_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByOrder.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&price_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrder_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchangeOrderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Side side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::md::Side>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrder_Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByOrder.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // uint64 exchangeOrderId = 3;
  if (this->exchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchangeorderid(), target);
  }

  // .md.Side side = 4;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByOrder.Order)
  return target;
}

size_t MarketByOrder_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByOrder.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint64 exchangeOrderId = 3;
  if (this->exchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchangeorderid());
  }

  // .md.Side side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrder_Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByOrder.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrder_Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrder_Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByOrder.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByOrder.Order)
    MergeFrom(*source);
  }
}

void MarketByOrder_Order::MergeFrom(const MarketByOrder_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByOrder.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.exchangeorderid() != 0) {
    _internal_set_exchangeorderid(from._internal_exchangeorderid());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void MarketByOrder_Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByOrder.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrder_Order::CopyFrom(const MarketByOrder_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByOrder.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrder_Order::IsInitialized() const {
  return true;
}

void MarketByOrder_Order::InternalSwap(MarketByOrder_Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrder_Order, side_)
      + sizeof(MarketByOrder_Order::side_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrder_Order, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrder_Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrder::_Internal {
 public:
};

MarketByOrder::MarketByOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByOrder)
}
MarketByOrder::MarketByOrder(const MarketByOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunk_, &from.chunk_,
    static_cast<size_t>(reinterpret_cast<char*>(&numchunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(numchunks_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByOrder)
}

void MarketByOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numchunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(numchunks_));
}

MarketByOrder::~MarketByOrder() {
  // @@protoc_insertion_point(destructor:md.MarketByOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrder::ArenaDtor(void* object) {
  MarketByOrder* _this = reinterpret_cast< MarketByOrder* >(object);
  (void)_this;
}
void MarketByOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  ::memset(&chunk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numchunks_) -
      reinterpret_cast<char*>(&chunk_)) + sizeof(numchunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.MarketByOrder.Order orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 numChunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          numchunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.MarketByOrder.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk(), target);
  }

  // uint32 numChunks = 3;
  if (this->numchunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numchunks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByOrder)
  return target;
}

size_t MarketByOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.MarketByOrder.Order orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk());
  }

  // uint32 numChunks = 3;
  if (this->numchunks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numchunks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByOrder)
    MergeFrom(*source);
  }
}

void MarketByOrder::MergeFrom(const MarketByOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  if (from.chunk() != 0) {
    _internal_set_chunk(from._internal_chunk());
  }
  if (from.numchunks() != 0) {
    _internal_set_numchunks(from._internal_numchunks());
  }
}

void MarketByOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrder::CopyFrom(const MarketByOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrder::IsInitialized() const {
  return true;
}

void MarketByOrder::InternalSwap(MarketByOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrder, numchunks_)
      + sizeof(MarketByOrder::numchunks_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrder, chunk_)>(
          reinterpret_cast<char*>(&chunk_),
          reinterpret_cast<char*>(&other->chunk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrderDiff_Diff::_Internal {
 public:
};

MarketByOrderDiff_Diff::MarketByOrderDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByOrderDiff.Diff)
}
MarketByOrderDiff_Diff::MarketByOrderDiff_Diff(const MarketByOrderDiff_Diff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&price_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByOrderDiff.Diff)
}

void MarketByOrderDiff_Diff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&price_)) + sizeof(op_));
}

MarketByOrderDiff_Diff::~MarketByOrderDiff_Diff() {
  // @@protoc_insertion_point(destructor:md.MarketByOrderDiff.Diff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrderDiff_Diff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrderDiff_Diff::ArenaDtor(void* object) {
  MarketByOrderDiff_Diff* _this = reinterpret_cast< MarketByOrderDiff_Diff* >(object);
  (void)_this;
}
void MarketByOrderDiff_Diff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrderDiff_Diff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrderDiff_Diff::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByOrderDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&price_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderDiff_Diff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchangeOrderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Side side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::md::Side>(val));
        } else goto handle_unusual;
        continue;
      // .md.MarketByOrderDiff.OrderOp op = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::md::MarketByOrderDiff_OrderOp>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrderDiff_Diff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByOrderDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // uint64 exchangeOrderId = 3;
  if (this->exchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchangeorderid(), target);
  }

  // .md.Side side = 4;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // .md.MarketByOrderDiff.OrderOp op = 5;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByOrderDiff.Diff)
  return target;
}

size_t MarketByOrderDiff_Diff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByOrderDiff.Diff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint64 exchangeOrderId = 3;
  if (this->exchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchangeorderid());
  }

  // .md.Side side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .md.MarketByOrderDiff.OrderOp op = 5;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrderDiff_Diff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByOrderDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrderDiff_Diff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrderDiff_Diff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByOrderDiff.Diff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByOrderDiff.Diff)
    MergeFrom(*source);
  }
}

void MarketByOrderDiff_Diff::MergeFrom(const MarketByOrderDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByOrderDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.exchangeorderid() != 0) {
    _internal_set_exchangeorderid(from._internal_exchangeorderid());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void MarketByOrderDiff_Diff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByOrderDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrderDiff_Diff::CopyFrom(const MarketByOrderDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByOrderDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderDiff_Diff::IsInitialized() const {
  return true;
}

void MarketByOrderDiff_Diff::InternalSwap(MarketByOrderDiff_Diff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderDiff_Diff, op_)
      + sizeof(MarketByOrderDiff_Diff::op_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderDiff_Diff, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderDiff_Diff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrderDiff::_Internal {
 public:
};

MarketByOrderDiff::MarketByOrderDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MarketByOrderDiff)
}
MarketByOrderDiff::MarketByOrderDiff(const MarketByOrderDiff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diffs_(from.diffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&totalbidlevels_, &from.totalbidlevels_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalaskorders_) -
    reinterpret_cast<char*>(&totalbidlevels_)) + sizeof(totalaskorders_));
  // @@protoc_insertion_point(copy_constructor:md.MarketByOrderDiff)
}

void MarketByOrderDiff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&totalbidlevels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalaskorders_) -
    reinterpret_cast<char*>(&totalbidlevels_)) + sizeof(totalaskorders_));
}

MarketByOrderDiff::~MarketByOrderDiff() {
  // @@protoc_insertion_point(destructor:md.MarketByOrderDiff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrderDiff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrderDiff::ArenaDtor(void* object) {
  MarketByOrderDiff* _this = reinterpret_cast< MarketByOrderDiff* >(object);
  (void)_this;
}
void MarketByOrderDiff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrderDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrderDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MarketByOrderDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diffs_.Clear();
  ::memset(&totalbidlevels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalaskorders_) -
      reinterpret_cast<char*>(&totalbidlevels_)) + sizeof(totalaskorders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderDiff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.MarketByOrderDiff.Diff diffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 totalBidLevels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalbidlevels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalAskLevels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalasklevels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalBidOrders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalbidorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalAskOrders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalaskorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrderDiff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MarketByOrderDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.MarketByOrderDiff.Diff diffs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_diffs(i), target, stream);
  }

  // uint32 totalBidLevels = 2;
  if (this->totalbidlevels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_totalbidlevels(), target);
  }

  // uint32 totalAskLevels = 3;
  if (this->totalasklevels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_totalasklevels(), target);
  }

  // uint32 totalBidOrders = 4;
  if (this->totalbidorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_totalbidorders(), target);
  }

  // uint32 totalAskOrders = 5;
  if (this->totalaskorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_totalaskorders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MarketByOrderDiff)
  return target;
}

size_t MarketByOrderDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MarketByOrderDiff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.MarketByOrderDiff.Diff diffs = 1;
  total_size += 1UL * this->_internal_diffs_size();
  for (const auto& msg : this->diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 totalBidLevels = 2;
  if (this->totalbidlevels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalbidlevels());
  }

  // uint32 totalAskLevels = 3;
  if (this->totalasklevels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalasklevels());
  }

  // uint32 totalBidOrders = 4;
  if (this->totalbidorders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalbidorders());
  }

  // uint32 totalAskOrders = 5;
  if (this->totalaskorders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalaskorders());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrderDiff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MarketByOrderDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrderDiff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrderDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MarketByOrderDiff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MarketByOrderDiff)
    MergeFrom(*source);
  }
}

void MarketByOrderDiff::MergeFrom(const MarketByOrderDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MarketByOrderDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diffs_.MergeFrom(from.diffs_);
  if (from.totalbidlevels() != 0) {
    _internal_set_totalbidlevels(from._internal_totalbidlevels());
  }
  if (from.totalasklevels() != 0) {
    _internal_set_totalasklevels(from._internal_totalasklevels());
  }
  if (from.totalbidorders() != 0) {
    _internal_set_totalbidorders(from._internal_totalbidorders());
  }
  if (from.totalaskorders() != 0) {
    _internal_set_totalaskorders(from._internal_totalaskorders());
  }
}

void MarketByOrderDiff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MarketByOrderDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrderDiff::CopyFrom(const MarketByOrderDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MarketByOrderDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderDiff::IsInitialized() const {
  return true;
}

void MarketByOrderDiff::InternalSwap(MarketByOrderDiff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  diffs_.InternalSwap(&other->diffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderDiff, totalaskorders_)
      + sizeof(MarketByOrderDiff::totalaskorders_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderDiff, totalbidlevels_)>(
          reinterpret_cast<char*>(&totalbidlevels_),
          reinterpret_cast<char*>(&other->totalbidlevels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderDiff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trades_Trade::_Internal {
 public:
};

Trades_Trade::Trades_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.Trades.Trade)
}
Trades_Trade::Trades_Trade(const Trades_Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tradeid_, &from.tradeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggressingside_) -
    reinterpret_cast<char*>(&tradeid_)) + sizeof(aggressingside_));
  // @@protoc_insertion_point(copy_constructor:md.Trades.Trade)
}

void Trades_Trade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tradeid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggressingside_) -
    reinterpret_cast<char*>(&tradeid_)) + sizeof(aggressingside_));
}

Trades_Trade::~Trades_Trade() {
  // @@protoc_insertion_point(destructor:md.Trades.Trade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trades_Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trades_Trade::ArenaDtor(void* object) {
  Trades_Trade* _this = reinterpret_cast< Trades_Trade* >(object);
  (void)_this;
}
void Trades_Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trades_Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trades_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:md.Trades.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tradeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggressingside_) -
      reinterpret_cast<char*>(&tradeid_)) + sizeof(aggressingside_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trades_Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tradeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tradeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Side aggressingSide = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggressingside(static_cast<::md::Side>(val));
        } else goto handle_unusual;
        continue;
      // uint64 restingExchangeOrderId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          restingexchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fillQuantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fillquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 aggressingExchangeOrderId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          aggressingexchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trades_Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.Trades.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tradeId = 1;
  if (this->tradeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tradeid(), target);
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  // .md.Side aggressingSide = 3;
  if (this->aggressingside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggressingside(), target);
  }

  // uint64 restingExchangeOrderId = 4;
  if (this->restingexchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_restingexchangeorderid(), target);
  }

  // uint64 fillQuantity = 5;
  if (this->fillquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fillquantity(), target);
  }

  // uint64 transactTime = 6;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_transacttime(), target);
  }

  // uint64 aggressingExchangeOrderId = 7;
  if (this->aggressingexchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_aggressingexchangeorderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.Trades.Trade)
  return target;
}

size_t Trades_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.Trades.Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tradeId = 1;
  if (this->tradeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tradeid());
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 restingExchangeOrderId = 4;
  if (this->restingexchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_restingexchangeorderid());
  }

  // uint64 fillQuantity = 5;
  if (this->fillquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fillquantity());
  }

  // uint64 transactTime = 6;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 aggressingExchangeOrderId = 7;
  if (this->aggressingexchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_aggressingexchangeorderid());
  }

  // .md.Side aggressingSide = 3;
  if (this->aggressingside() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggressingside());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trades_Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.Trades.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trades_Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trades_Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.Trades.Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.Trades.Trade)
    MergeFrom(*source);
  }
}

void Trades_Trade::MergeFrom(const Trades_Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.Trades.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradeid() != 0) {
    _internal_set_tradeid(from._internal_tradeid());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.restingexchangeorderid() != 0) {
    _internal_set_restingexchangeorderid(from._internal_restingexchangeorderid());
  }
  if (from.fillquantity() != 0) {
    _internal_set_fillquantity(from._internal_fillquantity());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.aggressingexchangeorderid() != 0) {
    _internal_set_aggressingexchangeorderid(from._internal_aggressingexchangeorderid());
  }
  if (from.aggressingside() != 0) {
    _internal_set_aggressingside(from._internal_aggressingside());
  }
}

void Trades_Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.Trades.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trades_Trade::CopyFrom(const Trades_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.Trades.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trades_Trade::IsInitialized() const {
  return true;
}

void Trades_Trade::InternalSwap(Trades_Trade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trades_Trade, aggressingside_)
      + sizeof(Trades_Trade::aggressingside_)
      - PROTOBUF_FIELD_OFFSET(Trades_Trade, tradeid_)>(
          reinterpret_cast<char*>(&tradeid_),
          reinterpret_cast<char*>(&other->tradeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trades_Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trades::_Internal {
 public:
};

Trades::Trades(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.Trades)
}
Trades::Trades(const Trades& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:md.Trades)
}

void Trades::SharedCtor() {
}

Trades::~Trades() {
  // @@protoc_insertion_point(destructor:md.Trades)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trades::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trades::ArenaDtor(void* object) {
  Trades* _this = reinterpret_cast< Trades* >(object);
  (void)_this;
}
void Trades::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trades::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trades::Clear() {
// @@protoc_insertion_point(message_clear_start:md.Trades)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trades::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.Trades.Trade trades = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trades::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.Trades)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.Trades.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.Trades)
  return target;
}

size_t Trades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.Trades)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.Trades.Trade trades = 1;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trades::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.Trades)
  GOOGLE_DCHECK_NE(&from, this);
  const Trades* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trades>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.Trades)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.Trades)
    MergeFrom(*source);
  }
}

void Trades::MergeFrom(const Trades& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.Trades)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void Trades::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trades::CopyFrom(const Trades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trades::IsInitialized() const {
  return true;
}

void Trades::InternalSwap(Trades* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trades::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&quotevolumehi_) -
    reinterpret_cast<char*>(&low_)) + sizeof(quotevolumehi_));
  // @@protoc_insertion_point(copy_constructor:md.Summary)
}

void Summary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quotevolumehi_) -
    reinterpret_cast<char*>(&low_)) + sizeof(quotevolumehi_));
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:md.Summary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:md.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quotevolumehi_) -
      reinterpret_cast<char*>(&low_)) + sizeof(quotevolumehi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 baseVolumeLo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          basevolumelo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 baseVolumeHi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          basevolumehi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quoteVolumeLo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          quotevolumelo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quoteVolumeHi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          quotevolumehi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 low = 1;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_low(), target);
  }

  // uint64 high = 2;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_high(), target);
  }

  // uint64 baseVolumeLo = 3;
  if (this->basevolumelo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_basevolumelo(), target);
  }

  // uint64 baseVolumeHi = 4;
  if (this->basevolumehi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_basevolumehi(), target);
  }

  // uint64 quoteVolumeLo = 5;
  if (this->quotevolumelo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_quotevolumelo(), target);
  }

  // uint64 quoteVolumeHi = 6;
  if (this->quotevolumehi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_quotevolumehi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 low = 1;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  // uint64 high = 2;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 baseVolumeLo = 3;
  if (this->basevolumelo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_basevolumelo());
  }

  // uint64 baseVolumeHi = 4;
  if (this->basevolumehi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_basevolumehi());
  }

  // uint64 quoteVolumeLo = 5;
  if (this->quotevolumelo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quotevolumelo());
  }

  // uint64 quoteVolumeHi = 6;
  if (this->quotevolumehi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quotevolumehi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.Summary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.basevolumelo() != 0) {
    _internal_set_basevolumelo(from._internal_basevolumelo());
  }
  if (from.basevolumehi() != 0) {
    _internal_set_basevolumehi(from._internal_basevolumehi());
  }
  if (from.quotevolumelo() != 0) {
    _internal_set_quotevolumelo(from._internal_quotevolumelo());
  }
  if (from.quotevolumehi() != 0) {
    _internal_set_quotevolumehi(from._internal_quotevolumehi());
  }
}

void Summary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary, quotevolumehi_)
      + sizeof(Summary::quotevolumehi_)
      - PROTOBUF_FIELD_OFFSET(Summary, low_)>(
          reinterpret_cast<char*>(&low_),
          reinterpret_cast<char*>(&other->low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Kline::_Internal {
 public:
};

Kline::Kline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.Kline)
}
Kline::Kline(const Kline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:md.Kline)
}

void Kline::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&starttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(interval_));
}

Kline::~Kline() {
  // @@protoc_insertion_point(destructor:md.Kline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Kline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Kline::ArenaDtor(void* object) {
  Kline* _this = reinterpret_cast< Kline* >(object);
  (void)_this;
}
void Kline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Kline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Kline::Clear() {
// @@protoc_insertion_point(message_clear_start:md.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Kline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .md.KlineInterval interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::md::KlineInterval>(val));
        } else goto handle_unusual;
        continue;
      // uint64 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 close = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volumeLo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volumelo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volumeHi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volumehi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Kline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .md.KlineInterval interval = 1;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interval(), target);
  }

  // uint64 startTime = 2;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_starttime(), target);
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_open(), target);
  }

  // uint64 close = 4;
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_close(), target);
  }

  // uint64 high = 5;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_high(), target);
  }

  // uint64 low = 6;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_low(), target);
  }

  // uint64 volumeLo = 7;
  if (this->volumelo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volumelo(), target);
  }

  // uint64 volumeHi = 8;
  if (this->volumehi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_volumehi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.Kline)
  return target;
}

size_t Kline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.Kline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 startTime = 2;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_starttime());
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 close = 4;
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_close());
  }

  // uint64 high = 5;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 6;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  // uint64 volumeLo = 7;
  if (this->volumelo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volumelo());
  }

  // uint64 volumeHi = 8;
  if (this->volumehi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volumehi());
  }

  // .md.KlineInterval interval = 1;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.Kline)
  GOOGLE_DCHECK_NE(&from, this);
  const Kline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Kline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.Kline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.Kline)
    MergeFrom(*source);
  }
}

void Kline::MergeFrom(const Kline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.Kline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.volumelo() != 0) {
    _internal_set_volumelo(from._internal_volumelo());
  }
  if (from.volumehi() != 0) {
    _internal_set_volumehi(from._internal_volumehi());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void Kline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.Kline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kline::CopyFrom(const Kline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.Kline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kline::IsInitialized() const {
  return true;
}

void Kline::InternalSwap(Kline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Kline, interval_)
      + sizeof(Kline::interval_)
      - PROTOBUF_FIELD_OFFSET(Kline, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Kline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:md.Heartbeat)
}

void Heartbeat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(timestamp_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:md.Heartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heartbeat::ArenaDtor(void* object) {
  Heartbeat* _this = reinterpret_cast< Heartbeat* >(object);
  (void)_this;
}
void Heartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:md.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 requestId = 1;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 requestId = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, timestamp_)
      + sizeof(Heartbeat::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MdMessages::_Internal {
 public:
};

MdMessages::MdMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.MdMessages)
}
MdMessages::MdMessages(const MdMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:md.MdMessages)
}

void MdMessages::SharedCtor() {
}

MdMessages::~MdMessages() {
  // @@protoc_insertion_point(destructor:md.MdMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MdMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MdMessages::ArenaDtor(void* object) {
  MdMessages* _this = reinterpret_cast< MdMessages* >(object);
  (void)_this;
}
void MdMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MdMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MdMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:md.MdMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MdMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.MdMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MdMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.MdMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.MdMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.MdMessages)
  return target;
}

size_t MdMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.MdMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.MdMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.MdMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const MdMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MdMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.MdMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.MdMessages)
    MergeFrom(*source);
  }
}

void MdMessages::MergeFrom(const MdMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.MdMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MdMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.MdMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MdMessages::CopyFrom(const MdMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.MdMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdMessages::IsInitialized() const {
  return true;
}

void MdMessages::InternalSwap(MdMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MdMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AggMessage::_Internal {
 public:
  static const ::md::Heartbeat& heartbeat(const AggMessage* msg);
  static const ::md::TopOfBooks& topofbooks(const AggMessage* msg);
};

const ::md::Heartbeat&
AggMessage::_Internal::heartbeat(const AggMessage* msg) {
  return *msg->inner_.heartbeat_;
}
const ::md::TopOfBooks&
AggMessage::_Internal::topofbooks(const AggMessage* msg) {
  return *msg->inner_.topofbooks_;
}
void AggMessage::set_allocated_heartbeat(::md::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:md.AggMessage.heartbeat)
}
void AggMessage::set_allocated_topofbooks(::md::TopOfBooks* topofbooks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (topofbooks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topofbooks);
    if (message_arena != submessage_arena) {
      topofbooks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topofbooks, submessage_arena);
    }
    set_has_topofbooks();
    inner_.topofbooks_ = topofbooks;
  }
  // @@protoc_insertion_point(field_set_allocated:md.AggMessage.topOfBooks)
}
AggMessage::AggMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.AggMessage)
}
AggMessage::AggMessage(const AggMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::md::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kTopOfBooks: {
      _internal_mutable_topofbooks()->::md::TopOfBooks::MergeFrom(from._internal_topofbooks());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:md.AggMessage)
}

void AggMessage::SharedCtor() {
clear_has_inner();
}

AggMessage::~AggMessage() {
  // @@protoc_insertion_point(destructor:md.AggMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void AggMessage::ArenaDtor(void* object) {
  AggMessage* _this = reinterpret_cast< AggMessage* >(object);
  (void)_this;
}
void AggMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggMessage::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:md.AggMessage)
  switch (inner_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kTopOfBooks: {
      if (GetArena() == nullptr) {
        delete inner_.topofbooks_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void AggMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:md.AggMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .md.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.TopOfBooks topOfBooks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topofbooks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.AggMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .md.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .md.TopOfBooks topOfBooks = 2;
  if (_internal_has_topofbooks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::topofbooks(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.AggMessage)
  return target;
}

size_t AggMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.AggMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .md.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .md.TopOfBooks topOfBooks = 2;
    case kTopOfBooks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.topofbooks_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.AggMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AggMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.AggMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.AggMessage)
    MergeFrom(*source);
  }
}

void AggMessage::MergeFrom(const AggMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.AggMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::md::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kTopOfBooks: {
      _internal_mutable_topofbooks()->::md::TopOfBooks::MergeFrom(from._internal_topofbooks());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void AggMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.AggMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggMessage::CopyFrom(const AggMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.AggMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggMessage::IsInitialized() const {
  return true;
}

void AggMessage::InternalSwap(AggMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TopOfBook::_Internal {
 public:
};

TopOfBook::TopOfBook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.TopOfBook)
}
TopOfBook::TopOfBook(const TopOfBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&marketid_, &from.marketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastprice_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(lastprice_));
  // @@protoc_insertion_point(copy_constructor:md.TopOfBook)
}

void TopOfBook::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&marketid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastprice_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(lastprice_));
}

TopOfBook::~TopOfBook() {
  // @@protoc_insertion_point(destructor:md.TopOfBook)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopOfBook::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopOfBook::ArenaDtor(void* object) {
  TopOfBook* _this = reinterpret_cast< TopOfBook* >(object);
  (void)_this;
}
void TopOfBook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopOfBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopOfBook::Clear() {
// @@protoc_insertion_point(message_clear_start:md.TopOfBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&marketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastprice_) -
      reinterpret_cast<char*>(&marketid_)) + sizeof(lastprice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopOfBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 marketId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bidPrice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bidQuantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bidquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 askPrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          askprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 askQuantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          askquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lastPrice = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lastprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopOfBook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.TopOfBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 marketId = 1;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_marketid(), target);
  }

  // uint64 transactTime = 2;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_transacttime(), target);
  }

  // uint64 bidPrice = 3;
  if (this->bidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bidprice(), target);
  }

  // uint64 bidQuantity = 4;
  if (this->bidquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bidquantity(), target);
  }

  // uint64 askPrice = 5;
  if (this->askprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_askprice(), target);
  }

  // uint64 askQuantity = 6;
  if (this->askquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_askquantity(), target);
  }

  // uint64 lastPrice = 7;
  if (this->lastprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_lastprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.TopOfBook)
  return target;
}

size_t TopOfBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.TopOfBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 marketId = 1;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 transactTime = 2;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 bidPrice = 3;
  if (this->bidprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bidprice());
  }

  // uint64 bidQuantity = 4;
  if (this->bidquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bidquantity());
  }

  // uint64 askPrice = 5;
  if (this->askprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_askprice());
  }

  // uint64 askQuantity = 6;
  if (this->askquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_askquantity());
  }

  // uint64 lastPrice = 7;
  if (this->lastprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lastprice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopOfBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.TopOfBook)
  GOOGLE_DCHECK_NE(&from, this);
  const TopOfBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopOfBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.TopOfBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.TopOfBook)
    MergeFrom(*source);
  }
}

void TopOfBook::MergeFrom(const TopOfBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.TopOfBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.bidprice() != 0) {
    _internal_set_bidprice(from._internal_bidprice());
  }
  if (from.bidquantity() != 0) {
    _internal_set_bidquantity(from._internal_bidquantity());
  }
  if (from.askprice() != 0) {
    _internal_set_askprice(from._internal_askprice());
  }
  if (from.askquantity() != 0) {
    _internal_set_askquantity(from._internal_askquantity());
  }
  if (from.lastprice() != 0) {
    _internal_set_lastprice(from._internal_lastprice());
  }
}

void TopOfBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.TopOfBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopOfBook::CopyFrom(const TopOfBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.TopOfBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopOfBook::IsInitialized() const {
  return true;
}

void TopOfBook::InternalSwap(TopOfBook* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopOfBook, lastprice_)
      + sizeof(TopOfBook::lastprice_)
      - PROTOBUF_FIELD_OFFSET(TopOfBook, marketid_)>(
          reinterpret_cast<char*>(&marketid_),
          reinterpret_cast<char*>(&other->marketid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopOfBook::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TopOfBooks::_Internal {
 public:
};

TopOfBooks::TopOfBooks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.TopOfBooks)
}
TopOfBooks::TopOfBooks(const TopOfBooks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tops_(from.tops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:md.TopOfBooks)
}

void TopOfBooks::SharedCtor() {
}

TopOfBooks::~TopOfBooks() {
  // @@protoc_insertion_point(destructor:md.TopOfBooks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopOfBooks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopOfBooks::ArenaDtor(void* object) {
  TopOfBooks* _this = reinterpret_cast< TopOfBooks* >(object);
  (void)_this;
}
void TopOfBooks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopOfBooks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopOfBooks::Clear() {
// @@protoc_insertion_point(message_clear_start:md.TopOfBooks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopOfBooks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .md.TopOfBook tops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopOfBooks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.TopOfBooks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .md.TopOfBook tops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.TopOfBooks)
  return target;
}

size_t TopOfBooks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.TopOfBooks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.TopOfBook tops = 1;
  total_size += 1UL * this->_internal_tops_size();
  for (const auto& msg : this->tops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopOfBooks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.TopOfBooks)
  GOOGLE_DCHECK_NE(&from, this);
  const TopOfBooks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopOfBooks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.TopOfBooks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.TopOfBooks)
    MergeFrom(*source);
  }
}

void TopOfBooks::MergeFrom(const TopOfBooks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.TopOfBooks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tops_.MergeFrom(from.tops_);
}

void TopOfBooks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.TopOfBooks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopOfBooks::CopyFrom(const TopOfBooks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.TopOfBooks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopOfBooks::IsInitialized() const {
  return true;
}

void TopOfBooks::InternalSwap(TopOfBooks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tops_.InternalSwap(&other->tops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopOfBooks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientMessage::_Internal {
 public:
  static const ::md::Heartbeat& heartbeat(const ClientMessage* msg);
  static const ::md::Config& config(const ClientMessage* msg);
};

const ::md::Heartbeat&
ClientMessage::_Internal::heartbeat(const ClientMessage* msg) {
  return *msg->inner_.heartbeat_;
}
const ::md::Config&
ClientMessage::_Internal::config(const ClientMessage* msg) {
  return *msg->inner_.config_;
}
void ClientMessage::set_allocated_heartbeat(::md::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:md.ClientMessage.heartbeat)
}
void ClientMessage::set_allocated_config(::md::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    inner_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:md.ClientMessage.config)
}
ClientMessage::ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::md::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kConfig: {
      _internal_mutable_config()->::md::Config::MergeFrom(from._internal_config());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:md.ClientMessage)
}

void ClientMessage::SharedCtor() {
clear_has_inner();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:md.ClientMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void ClientMessage::ArenaDtor(void* object) {
  ClientMessage* _this = reinterpret_cast< ClientMessage* >(object);
  (void)_this;
}
void ClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientMessage::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:md.ClientMessage)
  switch (inner_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kConfig: {
      if (GetArena() == nullptr) {
        delete inner_.config_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:md.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .md.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .md.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .md.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .md.Config config = 2;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .md.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .md.Config config = 2;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.config_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::md::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kConfig: {
      _internal_mutable_config()->::md::Config::MergeFrom(from._internal_config());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  klines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:md.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      klines_(from.klines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mbp_, &from.mbp_,
    static_cast<size_t>(reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&mbp_)) + sizeof(summary_));
  // @@protoc_insertion_point(copy_constructor:md.Config)
}

void Config::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mbp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&mbp_)) + sizeof(summary_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:md.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:md.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  klines_.Clear();
  ::memset(&mbp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_) -
      reinterpret_cast<char*>(&mbp_)) + sizeof(summary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool mbp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mbp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mbo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mbo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trades = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool summary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          summary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .md.KlineInterval klines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_klines(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_klines(static_cast<::md::KlineInterval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:md.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool mbp = 1;
  if (this->mbp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mbp(), target);
  }

  // bool mbo = 2;
  if (this->mbo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mbo(), target);
  }

  // bool trades = 3;
  if (this->trades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_trades(), target);
  }

  // bool summary = 4;
  if (this->summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_summary(), target);
  }

  // repeated .md.KlineInterval klines = 5;
  {
    int byte_size = _klines_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, klines_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:md.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:md.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .md.KlineInterval klines = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_klines_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_klines(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _klines_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool mbp = 1;
  if (this->mbp() != 0) {
    total_size += 1 + 1;
  }

  // bool mbo = 2;
  if (this->mbo() != 0) {
    total_size += 1 + 1;
  }

  // bool trades = 3;
  if (this->trades() != 0) {
    total_size += 1 + 1;
  }

  // bool summary = 4;
  if (this->summary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:md.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:md.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:md.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:md.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  klines_.MergeFrom(from.klines_);
  if (from.mbp() != 0) {
    _internal_set_mbp(from._internal_mbp());
  }
  if (from.mbo() != 0) {
    _internal_set_mbo(from._internal_mbo());
  }
  if (from.trades() != 0) {
    _internal_set_trades(from._internal_trades());
  }
  if (from.summary() != 0) {
    _internal_set_summary(from._internal_summary());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:md.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:md.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  klines_.InternalSwap(&other->klines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, summary_)
      + sizeof(Config::summary_)
      - PROTOBUF_FIELD_OFFSET(Config, mbp_)>(
          reinterpret_cast<char*>(&mbp_),
          reinterpret_cast<char*>(&other->mbp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace md
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::md::MdMessage* Arena::CreateMaybeMessage< ::md::MdMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MdMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByPrice_Level* Arena::CreateMaybeMessage< ::md::MarketByPrice_Level >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByPrice_Level >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByPrice* Arena::CreateMaybeMessage< ::md::MarketByPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByPriceDiff_Diff* Arena::CreateMaybeMessage< ::md::MarketByPriceDiff_Diff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByPriceDiff_Diff >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByPriceDiff* Arena::CreateMaybeMessage< ::md::MarketByPriceDiff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByPriceDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByOrder_Order* Arena::CreateMaybeMessage< ::md::MarketByOrder_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByOrder_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByOrder* Arena::CreateMaybeMessage< ::md::MarketByOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByOrderDiff_Diff* Arena::CreateMaybeMessage< ::md::MarketByOrderDiff_Diff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByOrderDiff_Diff >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MarketByOrderDiff* Arena::CreateMaybeMessage< ::md::MarketByOrderDiff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MarketByOrderDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::md::Trades_Trade* Arena::CreateMaybeMessage< ::md::Trades_Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::Trades_Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::md::Trades* Arena::CreateMaybeMessage< ::md::Trades >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::Trades >(arena);
}
template<> PROTOBUF_NOINLINE ::md::Summary* Arena::CreateMaybeMessage< ::md::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::md::Kline* Arena::CreateMaybeMessage< ::md::Kline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::Kline >(arena);
}
template<> PROTOBUF_NOINLINE ::md::Heartbeat* Arena::CreateMaybeMessage< ::md::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::md::MdMessages* Arena::CreateMaybeMessage< ::md::MdMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::MdMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::md::AggMessage* Arena::CreateMaybeMessage< ::md::AggMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::AggMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::md::TopOfBook* Arena::CreateMaybeMessage< ::md::TopOfBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::TopOfBook >(arena);
}
template<> PROTOBUF_NOINLINE ::md::TopOfBooks* Arena::CreateMaybeMessage< ::md::TopOfBooks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::TopOfBooks >(arena);
}
template<> PROTOBUF_NOINLINE ::md::ClientMessage* Arena::CreateMaybeMessage< ::md::ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::md::Config* Arena::CreateMaybeMessage< ::md::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::md::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
