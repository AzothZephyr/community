// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_market_5fdata_2eproto_metadata_getter(int index);
namespace md {
class AggMessage;
struct AggMessageDefaultTypeInternal;
extern AggMessageDefaultTypeInternal _AggMessage_default_instance_;
class ClientMessage;
struct ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Kline;
struct KlineDefaultTypeInternal;
extern KlineDefaultTypeInternal _Kline_default_instance_;
class MarketByOrder;
struct MarketByOrderDefaultTypeInternal;
extern MarketByOrderDefaultTypeInternal _MarketByOrder_default_instance_;
class MarketByOrderDiff;
struct MarketByOrderDiffDefaultTypeInternal;
extern MarketByOrderDiffDefaultTypeInternal _MarketByOrderDiff_default_instance_;
class MarketByOrderDiff_Diff;
struct MarketByOrderDiff_DiffDefaultTypeInternal;
extern MarketByOrderDiff_DiffDefaultTypeInternal _MarketByOrderDiff_Diff_default_instance_;
class MarketByOrder_Order;
struct MarketByOrder_OrderDefaultTypeInternal;
extern MarketByOrder_OrderDefaultTypeInternal _MarketByOrder_Order_default_instance_;
class MarketByPrice;
struct MarketByPriceDefaultTypeInternal;
extern MarketByPriceDefaultTypeInternal _MarketByPrice_default_instance_;
class MarketByPriceDiff;
struct MarketByPriceDiffDefaultTypeInternal;
extern MarketByPriceDiffDefaultTypeInternal _MarketByPriceDiff_default_instance_;
class MarketByPriceDiff_Diff;
struct MarketByPriceDiff_DiffDefaultTypeInternal;
extern MarketByPriceDiff_DiffDefaultTypeInternal _MarketByPriceDiff_Diff_default_instance_;
class MarketByPrice_Level;
struct MarketByPrice_LevelDefaultTypeInternal;
extern MarketByPrice_LevelDefaultTypeInternal _MarketByPrice_Level_default_instance_;
class MdMessage;
struct MdMessageDefaultTypeInternal;
extern MdMessageDefaultTypeInternal _MdMessage_default_instance_;
class MdMessages;
struct MdMessagesDefaultTypeInternal;
extern MdMessagesDefaultTypeInternal _MdMessages_default_instance_;
class Summary;
struct SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class TopOfBook;
struct TopOfBookDefaultTypeInternal;
extern TopOfBookDefaultTypeInternal _TopOfBook_default_instance_;
class TopOfBooks;
struct TopOfBooksDefaultTypeInternal;
extern TopOfBooksDefaultTypeInternal _TopOfBooks_default_instance_;
class Trades;
struct TradesDefaultTypeInternal;
extern TradesDefaultTypeInternal _Trades_default_instance_;
class Trades_Trade;
struct Trades_TradeDefaultTypeInternal;
extern Trades_TradeDefaultTypeInternal _Trades_Trade_default_instance_;
}  // namespace md
PROTOBUF_NAMESPACE_OPEN
template<> ::md::AggMessage* Arena::CreateMaybeMessage<::md::AggMessage>(Arena*);
template<> ::md::ClientMessage* Arena::CreateMaybeMessage<::md::ClientMessage>(Arena*);
template<> ::md::Config* Arena::CreateMaybeMessage<::md::Config>(Arena*);
template<> ::md::Heartbeat* Arena::CreateMaybeMessage<::md::Heartbeat>(Arena*);
template<> ::md::Kline* Arena::CreateMaybeMessage<::md::Kline>(Arena*);
template<> ::md::MarketByOrder* Arena::CreateMaybeMessage<::md::MarketByOrder>(Arena*);
template<> ::md::MarketByOrderDiff* Arena::CreateMaybeMessage<::md::MarketByOrderDiff>(Arena*);
template<> ::md::MarketByOrderDiff_Diff* Arena::CreateMaybeMessage<::md::MarketByOrderDiff_Diff>(Arena*);
template<> ::md::MarketByOrder_Order* Arena::CreateMaybeMessage<::md::MarketByOrder_Order>(Arena*);
template<> ::md::MarketByPrice* Arena::CreateMaybeMessage<::md::MarketByPrice>(Arena*);
template<> ::md::MarketByPriceDiff* Arena::CreateMaybeMessage<::md::MarketByPriceDiff>(Arena*);
template<> ::md::MarketByPriceDiff_Diff* Arena::CreateMaybeMessage<::md::MarketByPriceDiff_Diff>(Arena*);
template<> ::md::MarketByPrice_Level* Arena::CreateMaybeMessage<::md::MarketByPrice_Level>(Arena*);
template<> ::md::MdMessage* Arena::CreateMaybeMessage<::md::MdMessage>(Arena*);
template<> ::md::MdMessages* Arena::CreateMaybeMessage<::md::MdMessages>(Arena*);
template<> ::md::Summary* Arena::CreateMaybeMessage<::md::Summary>(Arena*);
template<> ::md::TopOfBook* Arena::CreateMaybeMessage<::md::TopOfBook>(Arena*);
template<> ::md::TopOfBooks* Arena::CreateMaybeMessage<::md::TopOfBooks>(Arena*);
template<> ::md::Trades* Arena::CreateMaybeMessage<::md::Trades>(Arena*);
template<> ::md::Trades_Trade* Arena::CreateMaybeMessage<::md::Trades_Trade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace md {

enum MarketByPriceDiff_DiffOp : int {
  MarketByPriceDiff_DiffOp_ADD = 0,
  MarketByPriceDiff_DiffOp_REMOVE = 1,
  MarketByPriceDiff_DiffOp_REPLACE = 2,
  MarketByPriceDiff_DiffOp_MarketByPriceDiff_DiffOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarketByPriceDiff_DiffOp_MarketByPriceDiff_DiffOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarketByPriceDiff_DiffOp_IsValid(int value);
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff_DiffOp_DiffOp_MIN = MarketByPriceDiff_DiffOp_ADD;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff_DiffOp_DiffOp_MAX = MarketByPriceDiff_DiffOp_REPLACE;
constexpr int MarketByPriceDiff_DiffOp_DiffOp_ARRAYSIZE = MarketByPriceDiff_DiffOp_DiffOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByPriceDiff_DiffOp_descriptor();
template<typename T>
inline const std::string& MarketByPriceDiff_DiffOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketByPriceDiff_DiffOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketByPriceDiff_DiffOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketByPriceDiff_DiffOp_descriptor(), enum_t_value);
}
inline bool MarketByPriceDiff_DiffOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarketByPriceDiff_DiffOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketByPriceDiff_DiffOp>(
    MarketByPriceDiff_DiffOp_descriptor(), name, value);
}
enum MarketByOrderDiff_OrderOp : int {
  MarketByOrderDiff_OrderOp_ADD = 0,
  MarketByOrderDiff_OrderOp_REMOVE = 1,
  MarketByOrderDiff_OrderOp_REPLACE = 2,
  MarketByOrderDiff_OrderOp_MarketByOrderDiff_OrderOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarketByOrderDiff_OrderOp_MarketByOrderDiff_OrderOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarketByOrderDiff_OrderOp_IsValid(int value);
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff_OrderOp_OrderOp_MIN = MarketByOrderDiff_OrderOp_ADD;
constexpr MarketByOrderDiff_OrderOp MarketByOrderDiff_OrderOp_OrderOp_MAX = MarketByOrderDiff_OrderOp_REPLACE;
constexpr int MarketByOrderDiff_OrderOp_OrderOp_ARRAYSIZE = MarketByOrderDiff_OrderOp_OrderOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByOrderDiff_OrderOp_descriptor();
template<typename T>
inline const std::string& MarketByOrderDiff_OrderOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketByOrderDiff_OrderOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketByOrderDiff_OrderOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketByOrderDiff_OrderOp_descriptor(), enum_t_value);
}
inline bool MarketByOrderDiff_OrderOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarketByOrderDiff_OrderOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketByOrderDiff_OrderOp>(
    MarketByOrderDiff_OrderOp_descriptor(), name, value);
}
enum Side : int {
  BID = 0,
  ASK = 1,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Side_IsValid(int value);
constexpr Side Side_MIN = BID;
constexpr Side Side_MAX = ASK;
constexpr int Side_ARRAYSIZE = Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor();
template<typename T>
inline const std::string& Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Side_descriptor(), enum_t_value);
}
inline bool Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum KlineInterval : int {
  S1 = 0,
  M1 = 1,
  M15 = 2,
  H1 = 3,
  H4 = 4,
  D1 = 5,
  KlineInterval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KlineInterval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KlineInterval_IsValid(int value);
constexpr KlineInterval KlineInterval_MIN = S1;
constexpr KlineInterval KlineInterval_MAX = D1;
constexpr int KlineInterval_ARRAYSIZE = KlineInterval_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KlineInterval_descriptor();
template<typename T>
inline const std::string& KlineInterval_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KlineInterval>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KlineInterval_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KlineInterval_descriptor(), enum_t_value);
}
inline bool KlineInterval_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KlineInterval* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KlineInterval>(
    KlineInterval_descriptor(), name, value);
}
// ===================================================================

class MdMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MdMessage) */ {
 public:
  inline MdMessage() : MdMessage(nullptr) {}
  virtual ~MdMessage();
  explicit constexpr MdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdMessage(const MdMessage& from);
  MdMessage(MdMessage&& from) noexcept
    : MdMessage() {
    *this = ::std::move(from);
  }

  inline MdMessage& operator=(const MdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdMessage& operator=(MdMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MdMessage& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kHeartbeat = 1,
    kSummary = 2,
    kTrades = 3,
    kMboSnapshot = 4,
    kMboDiff = 5,
    kMbpSnapshot = 6,
    kMbpDiff = 7,
    kKline = 8,
    INNER_NOT_SET = 0,
  };

  static inline const MdMessage* internal_default_instance() {
    return reinterpret_cast<const MdMessage*>(
               &_MdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MdMessage& a, MdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MdMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdMessage* New() const final {
    return CreateMaybeMessage<MdMessage>(nullptr);
  }

  MdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MdMessage& from);
  void MergeFrom(const MdMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MdMessage";
  }
  protected:
  explicit MdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kSummaryFieldNumber = 2,
    kTradesFieldNumber = 3,
    kMboSnapshotFieldNumber = 4,
    kMboDiffFieldNumber = 5,
    kMbpSnapshotFieldNumber = 6,
    kMbpDiffFieldNumber = 7,
    kKlineFieldNumber = 8,
  };
  // .md.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::md::Heartbeat& heartbeat() const;
  ::md::Heartbeat* release_heartbeat();
  ::md::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::md::Heartbeat* heartbeat);
  private:
  const ::md::Heartbeat& _internal_heartbeat() const;
  ::md::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::md::Heartbeat* heartbeat);
  ::md::Heartbeat* unsafe_arena_release_heartbeat();

  // .md.Summary summary = 2;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::md::Summary& summary() const;
  ::md::Summary* release_summary();
  ::md::Summary* mutable_summary();
  void set_allocated_summary(::md::Summary* summary);
  private:
  const ::md::Summary& _internal_summary() const;
  ::md::Summary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::md::Summary* summary);
  ::md::Summary* unsafe_arena_release_summary();

  // .md.Trades trades = 3;
  bool has_trades() const;
  private:
  bool _internal_has_trades() const;
  public:
  void clear_trades();
  const ::md::Trades& trades() const;
  ::md::Trades* release_trades();
  ::md::Trades* mutable_trades();
  void set_allocated_trades(::md::Trades* trades);
  private:
  const ::md::Trades& _internal_trades() const;
  ::md::Trades* _internal_mutable_trades();
  public:
  void unsafe_arena_set_allocated_trades(
      ::md::Trades* trades);
  ::md::Trades* unsafe_arena_release_trades();

  // .md.MarketByOrder mboSnapshot = 4;
  bool has_mbosnapshot() const;
  private:
  bool _internal_has_mbosnapshot() const;
  public:
  void clear_mbosnapshot();
  const ::md::MarketByOrder& mbosnapshot() const;
  ::md::MarketByOrder* release_mbosnapshot();
  ::md::MarketByOrder* mutable_mbosnapshot();
  void set_allocated_mbosnapshot(::md::MarketByOrder* mbosnapshot);
  private:
  const ::md::MarketByOrder& _internal_mbosnapshot() const;
  ::md::MarketByOrder* _internal_mutable_mbosnapshot();
  public:
  void unsafe_arena_set_allocated_mbosnapshot(
      ::md::MarketByOrder* mbosnapshot);
  ::md::MarketByOrder* unsafe_arena_release_mbosnapshot();

  // .md.MarketByOrderDiff mboDiff = 5;
  bool has_mbodiff() const;
  private:
  bool _internal_has_mbodiff() const;
  public:
  void clear_mbodiff();
  const ::md::MarketByOrderDiff& mbodiff() const;
  ::md::MarketByOrderDiff* release_mbodiff();
  ::md::MarketByOrderDiff* mutable_mbodiff();
  void set_allocated_mbodiff(::md::MarketByOrderDiff* mbodiff);
  private:
  const ::md::MarketByOrderDiff& _internal_mbodiff() const;
  ::md::MarketByOrderDiff* _internal_mutable_mbodiff();
  public:
  void unsafe_arena_set_allocated_mbodiff(
      ::md::MarketByOrderDiff* mbodiff);
  ::md::MarketByOrderDiff* unsafe_arena_release_mbodiff();

  // .md.MarketByPrice mbpSnapshot = 6;
  bool has_mbpsnapshot() const;
  private:
  bool _internal_has_mbpsnapshot() const;
  public:
  void clear_mbpsnapshot();
  const ::md::MarketByPrice& mbpsnapshot() const;
  ::md::MarketByPrice* release_mbpsnapshot();
  ::md::MarketByPrice* mutable_mbpsnapshot();
  void set_allocated_mbpsnapshot(::md::MarketByPrice* mbpsnapshot);
  private:
  const ::md::MarketByPrice& _internal_mbpsnapshot() const;
  ::md::MarketByPrice* _internal_mutable_mbpsnapshot();
  public:
  void unsafe_arena_set_allocated_mbpsnapshot(
      ::md::MarketByPrice* mbpsnapshot);
  ::md::MarketByPrice* unsafe_arena_release_mbpsnapshot();

  // .md.MarketByPriceDiff mbpDiff = 7;
  bool has_mbpdiff() const;
  private:
  bool _internal_has_mbpdiff() const;
  public:
  void clear_mbpdiff();
  const ::md::MarketByPriceDiff& mbpdiff() const;
  ::md::MarketByPriceDiff* release_mbpdiff();
  ::md::MarketByPriceDiff* mutable_mbpdiff();
  void set_allocated_mbpdiff(::md::MarketByPriceDiff* mbpdiff);
  private:
  const ::md::MarketByPriceDiff& _internal_mbpdiff() const;
  ::md::MarketByPriceDiff* _internal_mutable_mbpdiff();
  public:
  void unsafe_arena_set_allocated_mbpdiff(
      ::md::MarketByPriceDiff* mbpdiff);
  ::md::MarketByPriceDiff* unsafe_arena_release_mbpdiff();

  // .md.Kline kline = 8;
  bool has_kline() const;
  private:
  bool _internal_has_kline() const;
  public:
  void clear_kline();
  const ::md::Kline& kline() const;
  ::md::Kline* release_kline();
  ::md::Kline* mutable_kline();
  void set_allocated_kline(::md::Kline* kline);
  private:
  const ::md::Kline& _internal_kline() const;
  ::md::Kline* _internal_mutable_kline();
  public:
  void unsafe_arena_set_allocated_kline(
      ::md::Kline* kline);
  ::md::Kline* unsafe_arena_release_kline();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:md.MdMessage)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_summary();
  void set_has_trades();
  void set_has_mbosnapshot();
  void set_has_mbodiff();
  void set_has_mbpsnapshot();
  void set_has_mbpdiff();
  void set_has_kline();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::md::Heartbeat* heartbeat_;
    ::md::Summary* summary_;
    ::md::Trades* trades_;
    ::md::MarketByOrder* mbosnapshot_;
    ::md::MarketByOrderDiff* mbodiff_;
    ::md::MarketByPrice* mbpsnapshot_;
    ::md::MarketByPriceDiff* mbpdiff_;
    ::md::Kline* kline_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPrice_Level PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByPrice.Level) */ {
 public:
  inline MarketByPrice_Level() : MarketByPrice_Level(nullptr) {}
  virtual ~MarketByPrice_Level();
  explicit constexpr MarketByPrice_Level(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPrice_Level(const MarketByPrice_Level& from);
  MarketByPrice_Level(MarketByPrice_Level&& from) noexcept
    : MarketByPrice_Level() {
    *this = ::std::move(from);
  }

  inline MarketByPrice_Level& operator=(const MarketByPrice_Level& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPrice_Level& operator=(MarketByPrice_Level&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPrice_Level& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPrice_Level* internal_default_instance() {
    return reinterpret_cast<const MarketByPrice_Level*>(
               &_MarketByPrice_Level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketByPrice_Level& a, MarketByPrice_Level& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPrice_Level* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPrice_Level* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPrice_Level* New() const final {
    return CreateMaybeMessage<MarketByPrice_Level>(nullptr);
  }

  MarketByPrice_Level* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPrice_Level>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPrice_Level& from);
  void MergeFrom(const MarketByPrice_Level& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPrice_Level* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByPrice.Level";
  }
  protected:
  explicit MarketByPrice_Level(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .md.Side side = 3;
  void clear_side();
  ::md::Side side() const;
  void set_side(::md::Side value);
  private:
  ::md::Side _internal_side() const;
  void _internal_set_side(::md::Side value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByPrice.Level)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPrice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByPrice) */ {
 public:
  inline MarketByPrice() : MarketByPrice(nullptr) {}
  virtual ~MarketByPrice();
  explicit constexpr MarketByPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPrice(const MarketByPrice& from);
  MarketByPrice(MarketByPrice&& from) noexcept
    : MarketByPrice() {
    *this = ::std::move(from);
  }

  inline MarketByPrice& operator=(const MarketByPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPrice& operator=(MarketByPrice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPrice* internal_default_instance() {
    return reinterpret_cast<const MarketByPrice*>(
               &_MarketByPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MarketByPrice& a, MarketByPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPrice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPrice* New() const final {
    return CreateMaybeMessage<MarketByPrice>(nullptr);
  }

  MarketByPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPrice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPrice& from);
  void MergeFrom(const MarketByPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPrice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByPrice";
  }
  protected:
  explicit MarketByPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByPrice_Level Level;

  // accessors -------------------------------------------------------

  enum : int {
    kLevelsFieldNumber = 1,
    kChunkFieldNumber = 2,
    kNumChunksFieldNumber = 3,
  };
  // repeated .md.MarketByPrice.Level levels = 1;
  int levels_size() const;
  private:
  int _internal_levels_size() const;
  public:
  void clear_levels();
  ::md::MarketByPrice_Level* mutable_levels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPrice_Level >*
      mutable_levels();
  private:
  const ::md::MarketByPrice_Level& _internal_levels(int index) const;
  ::md::MarketByPrice_Level* _internal_add_levels();
  public:
  const ::md::MarketByPrice_Level& levels(int index) const;
  ::md::MarketByPrice_Level* add_levels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPrice_Level >&
      levels() const;

  // uint32 chunk = 2;
  void clear_chunk();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk() const;
  void set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk() const;
  void _internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 numChunks = 3;
  void clear_numchunks();
  ::PROTOBUF_NAMESPACE_ID::uint32 numchunks() const;
  void set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numchunks() const;
  void _internal_set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPrice_Level > levels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numchunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPriceDiff_Diff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByPriceDiff.Diff) */ {
 public:
  inline MarketByPriceDiff_Diff() : MarketByPriceDiff_Diff(nullptr) {}
  virtual ~MarketByPriceDiff_Diff();
  explicit constexpr MarketByPriceDiff_Diff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPriceDiff_Diff(const MarketByPriceDiff_Diff& from);
  MarketByPriceDiff_Diff(MarketByPriceDiff_Diff&& from) noexcept
    : MarketByPriceDiff_Diff() {
    *this = ::std::move(from);
  }

  inline MarketByPriceDiff_Diff& operator=(const MarketByPriceDiff_Diff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPriceDiff_Diff& operator=(MarketByPriceDiff_Diff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPriceDiff_Diff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPriceDiff_Diff* internal_default_instance() {
    return reinterpret_cast<const MarketByPriceDiff_Diff*>(
               &_MarketByPriceDiff_Diff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MarketByPriceDiff_Diff& a, MarketByPriceDiff_Diff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPriceDiff_Diff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPriceDiff_Diff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPriceDiff_Diff* New() const final {
    return CreateMaybeMessage<MarketByPriceDiff_Diff>(nullptr);
  }

  MarketByPriceDiff_Diff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPriceDiff_Diff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPriceDiff_Diff& from);
  void MergeFrom(const MarketByPriceDiff_Diff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPriceDiff_Diff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByPriceDiff.Diff";
  }
  protected:
  explicit MarketByPriceDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kSideFieldNumber = 3,
    kOpFieldNumber = 4,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .md.Side side = 3;
  void clear_side();
  ::md::Side side() const;
  void set_side(::md::Side value);
  private:
  ::md::Side _internal_side() const;
  void _internal_set_side(::md::Side value);
  public:

  // .md.MarketByPriceDiff.DiffOp op = 4;
  void clear_op();
  ::md::MarketByPriceDiff_DiffOp op() const;
  void set_op(::md::MarketByPriceDiff_DiffOp value);
  private:
  ::md::MarketByPriceDiff_DiffOp _internal_op() const;
  void _internal_set_op(::md::MarketByPriceDiff_DiffOp value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByPriceDiff.Diff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int side_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPriceDiff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByPriceDiff) */ {
 public:
  inline MarketByPriceDiff() : MarketByPriceDiff(nullptr) {}
  virtual ~MarketByPriceDiff();
  explicit constexpr MarketByPriceDiff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPriceDiff(const MarketByPriceDiff& from);
  MarketByPriceDiff(MarketByPriceDiff&& from) noexcept
    : MarketByPriceDiff() {
    *this = ::std::move(from);
  }

  inline MarketByPriceDiff& operator=(const MarketByPriceDiff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPriceDiff& operator=(MarketByPriceDiff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPriceDiff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPriceDiff* internal_default_instance() {
    return reinterpret_cast<const MarketByPriceDiff*>(
               &_MarketByPriceDiff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MarketByPriceDiff& a, MarketByPriceDiff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPriceDiff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPriceDiff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPriceDiff* New() const final {
    return CreateMaybeMessage<MarketByPriceDiff>(nullptr);
  }

  MarketByPriceDiff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPriceDiff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPriceDiff& from);
  void MergeFrom(const MarketByPriceDiff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPriceDiff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByPriceDiff";
  }
  protected:
  explicit MarketByPriceDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByPriceDiff_Diff Diff;

  typedef MarketByPriceDiff_DiffOp DiffOp;
  static constexpr DiffOp ADD =
    MarketByPriceDiff_DiffOp_ADD;
  static constexpr DiffOp REMOVE =
    MarketByPriceDiff_DiffOp_REMOVE;
  static constexpr DiffOp REPLACE =
    MarketByPriceDiff_DiffOp_REPLACE;
  static inline bool DiffOp_IsValid(int value) {
    return MarketByPriceDiff_DiffOp_IsValid(value);
  }
  static constexpr DiffOp DiffOp_MIN =
    MarketByPriceDiff_DiffOp_DiffOp_MIN;
  static constexpr DiffOp DiffOp_MAX =
    MarketByPriceDiff_DiffOp_DiffOp_MAX;
  static constexpr int DiffOp_ARRAYSIZE =
    MarketByPriceDiff_DiffOp_DiffOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DiffOp_descriptor() {
    return MarketByPriceDiff_DiffOp_descriptor();
  }
  template<typename T>
  static inline const std::string& DiffOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DiffOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DiffOp_Name.");
    return MarketByPriceDiff_DiffOp_Name(enum_t_value);
  }
  static inline bool DiffOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DiffOp* value) {
    return MarketByPriceDiff_DiffOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDiffsFieldNumber = 1,
    kTotalBidLevelsFieldNumber = 2,
    kTotalAskLevelsFieldNumber = 3,
  };
  // repeated .md.MarketByPriceDiff.Diff diffs = 1;
  int diffs_size() const;
  private:
  int _internal_diffs_size() const;
  public:
  void clear_diffs();
  ::md::MarketByPriceDiff_Diff* mutable_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPriceDiff_Diff >*
      mutable_diffs();
  private:
  const ::md::MarketByPriceDiff_Diff& _internal_diffs(int index) const;
  ::md::MarketByPriceDiff_Diff* _internal_add_diffs();
  public:
  const ::md::MarketByPriceDiff_Diff& diffs(int index) const;
  ::md::MarketByPriceDiff_Diff* add_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPriceDiff_Diff >&
      diffs() const;

  // uint32 totalBidLevels = 2;
  void clear_totalbidlevels();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbidlevels() const;
  void set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalbidlevels() const;
  void _internal_set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 totalAskLevels = 3;
  void clear_totalasklevels();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalasklevels() const;
  void set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalasklevels() const;
  void _internal_set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByPriceDiff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPriceDiff_Diff > diffs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbidlevels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalasklevels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrder_Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByOrder.Order) */ {
 public:
  inline MarketByOrder_Order() : MarketByOrder_Order(nullptr) {}
  virtual ~MarketByOrder_Order();
  explicit constexpr MarketByOrder_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrder_Order(const MarketByOrder_Order& from);
  MarketByOrder_Order(MarketByOrder_Order&& from) noexcept
    : MarketByOrder_Order() {
    *this = ::std::move(from);
  }

  inline MarketByOrder_Order& operator=(const MarketByOrder_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrder_Order& operator=(MarketByOrder_Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrder_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrder_Order* internal_default_instance() {
    return reinterpret_cast<const MarketByOrder_Order*>(
               &_MarketByOrder_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarketByOrder_Order& a, MarketByOrder_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrder_Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrder_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrder_Order* New() const final {
    return CreateMaybeMessage<MarketByOrder_Order>(nullptr);
  }

  MarketByOrder_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrder_Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrder_Order& from);
  void MergeFrom(const MarketByOrder_Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrder_Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByOrder.Order";
  }
  protected:
  explicit MarketByOrder_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kExchangeOrderIdFieldNumber = 3,
    kSideFieldNumber = 4,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchangeOrderId = 3;
  void clear_exchangeorderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchangeorderid() const;
  void set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchangeorderid() const;
  void _internal_set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .md.Side side = 4;
  void clear_side();
  ::md::Side side() const;
  void set_side(::md::Side value);
  private:
  ::md::Side _internal_side() const;
  void _internal_set_side(::md::Side value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByOrder.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchangeorderid_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByOrder) */ {
 public:
  inline MarketByOrder() : MarketByOrder(nullptr) {}
  virtual ~MarketByOrder();
  explicit constexpr MarketByOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrder(const MarketByOrder& from);
  MarketByOrder(MarketByOrder&& from) noexcept
    : MarketByOrder() {
    *this = ::std::move(from);
  }

  inline MarketByOrder& operator=(const MarketByOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrder& operator=(MarketByOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrder* internal_default_instance() {
    return reinterpret_cast<const MarketByOrder*>(
               &_MarketByOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MarketByOrder& a, MarketByOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrder* New() const final {
    return CreateMaybeMessage<MarketByOrder>(nullptr);
  }

  MarketByOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrder& from);
  void MergeFrom(const MarketByOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByOrder";
  }
  protected:
  explicit MarketByOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByOrder_Order Order;

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kChunkFieldNumber = 2,
    kNumChunksFieldNumber = 3,
  };
  // repeated .md.MarketByOrder.Order orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::md::MarketByOrder_Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrder_Order >*
      mutable_orders();
  private:
  const ::md::MarketByOrder_Order& _internal_orders(int index) const;
  ::md::MarketByOrder_Order* _internal_add_orders();
  public:
  const ::md::MarketByOrder_Order& orders(int index) const;
  ::md::MarketByOrder_Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrder_Order >&
      orders() const;

  // uint32 chunk = 2;
  void clear_chunk();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk() const;
  void set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk() const;
  void _internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 numChunks = 3;
  void clear_numchunks();
  ::PROTOBUF_NAMESPACE_ID::uint32 numchunks() const;
  void set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numchunks() const;
  void _internal_set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrder_Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numchunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrderDiff_Diff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByOrderDiff.Diff) */ {
 public:
  inline MarketByOrderDiff_Diff() : MarketByOrderDiff_Diff(nullptr) {}
  virtual ~MarketByOrderDiff_Diff();
  explicit constexpr MarketByOrderDiff_Diff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderDiff_Diff(const MarketByOrderDiff_Diff& from);
  MarketByOrderDiff_Diff(MarketByOrderDiff_Diff&& from) noexcept
    : MarketByOrderDiff_Diff() {
    *this = ::std::move(from);
  }

  inline MarketByOrderDiff_Diff& operator=(const MarketByOrderDiff_Diff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderDiff_Diff& operator=(MarketByOrderDiff_Diff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrderDiff_Diff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderDiff_Diff* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderDiff_Diff*>(
               &_MarketByOrderDiff_Diff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MarketByOrderDiff_Diff& a, MarketByOrderDiff_Diff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderDiff_Diff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderDiff_Diff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrderDiff_Diff* New() const final {
    return CreateMaybeMessage<MarketByOrderDiff_Diff>(nullptr);
  }

  MarketByOrderDiff_Diff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrderDiff_Diff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrderDiff_Diff& from);
  void MergeFrom(const MarketByOrderDiff_Diff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderDiff_Diff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByOrderDiff.Diff";
  }
  protected:
  explicit MarketByOrderDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kExchangeOrderIdFieldNumber = 3,
    kSideFieldNumber = 4,
    kOpFieldNumber = 5,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchangeOrderId = 3;
  void clear_exchangeorderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchangeorderid() const;
  void set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchangeorderid() const;
  void _internal_set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .md.Side side = 4;
  void clear_side();
  ::md::Side side() const;
  void set_side(::md::Side value);
  private:
  ::md::Side _internal_side() const;
  void _internal_set_side(::md::Side value);
  public:

  // .md.MarketByOrderDiff.OrderOp op = 5;
  void clear_op();
  ::md::MarketByOrderDiff_OrderOp op() const;
  void set_op(::md::MarketByOrderDiff_OrderOp value);
  private:
  ::md::MarketByOrderDiff_OrderOp _internal_op() const;
  void _internal_set_op(::md::MarketByOrderDiff_OrderOp value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByOrderDiff.Diff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchangeorderid_;
  int side_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrderDiff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MarketByOrderDiff) */ {
 public:
  inline MarketByOrderDiff() : MarketByOrderDiff(nullptr) {}
  virtual ~MarketByOrderDiff();
  explicit constexpr MarketByOrderDiff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderDiff(const MarketByOrderDiff& from);
  MarketByOrderDiff(MarketByOrderDiff&& from) noexcept
    : MarketByOrderDiff() {
    *this = ::std::move(from);
  }

  inline MarketByOrderDiff& operator=(const MarketByOrderDiff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderDiff& operator=(MarketByOrderDiff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrderDiff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderDiff* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderDiff*>(
               &_MarketByOrderDiff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MarketByOrderDiff& a, MarketByOrderDiff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderDiff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderDiff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrderDiff* New() const final {
    return CreateMaybeMessage<MarketByOrderDiff>(nullptr);
  }

  MarketByOrderDiff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrderDiff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrderDiff& from);
  void MergeFrom(const MarketByOrderDiff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderDiff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MarketByOrderDiff";
  }
  protected:
  explicit MarketByOrderDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByOrderDiff_Diff Diff;

  typedef MarketByOrderDiff_OrderOp OrderOp;
  static constexpr OrderOp ADD =
    MarketByOrderDiff_OrderOp_ADD;
  static constexpr OrderOp REMOVE =
    MarketByOrderDiff_OrderOp_REMOVE;
  static constexpr OrderOp REPLACE =
    MarketByOrderDiff_OrderOp_REPLACE;
  static inline bool OrderOp_IsValid(int value) {
    return MarketByOrderDiff_OrderOp_IsValid(value);
  }
  static constexpr OrderOp OrderOp_MIN =
    MarketByOrderDiff_OrderOp_OrderOp_MIN;
  static constexpr OrderOp OrderOp_MAX =
    MarketByOrderDiff_OrderOp_OrderOp_MAX;
  static constexpr int OrderOp_ARRAYSIZE =
    MarketByOrderDiff_OrderOp_OrderOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OrderOp_descriptor() {
    return MarketByOrderDiff_OrderOp_descriptor();
  }
  template<typename T>
  static inline const std::string& OrderOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OrderOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OrderOp_Name.");
    return MarketByOrderDiff_OrderOp_Name(enum_t_value);
  }
  static inline bool OrderOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OrderOp* value) {
    return MarketByOrderDiff_OrderOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDiffsFieldNumber = 1,
    kTotalBidLevelsFieldNumber = 2,
    kTotalAskLevelsFieldNumber = 3,
    kTotalBidOrdersFieldNumber = 4,
    kTotalAskOrdersFieldNumber = 5,
  };
  // repeated .md.MarketByOrderDiff.Diff diffs = 1;
  int diffs_size() const;
  private:
  int _internal_diffs_size() const;
  public:
  void clear_diffs();
  ::md::MarketByOrderDiff_Diff* mutable_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrderDiff_Diff >*
      mutable_diffs();
  private:
  const ::md::MarketByOrderDiff_Diff& _internal_diffs(int index) const;
  ::md::MarketByOrderDiff_Diff* _internal_add_diffs();
  public:
  const ::md::MarketByOrderDiff_Diff& diffs(int index) const;
  ::md::MarketByOrderDiff_Diff* add_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrderDiff_Diff >&
      diffs() const;

  // uint32 totalBidLevels = 2;
  void clear_totalbidlevels();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbidlevels() const;
  void set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalbidlevels() const;
  void _internal_set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 totalAskLevels = 3;
  void clear_totalasklevels();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalasklevels() const;
  void set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalasklevels() const;
  void _internal_set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 totalBidOrders = 4;
  void clear_totalbidorders();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbidorders() const;
  void set_totalbidorders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalbidorders() const;
  void _internal_set_totalbidorders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 totalAskOrders = 5;
  void clear_totalaskorders();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalaskorders() const;
  void set_totalaskorders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalaskorders() const;
  void _internal_set_totalaskorders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:md.MarketByOrderDiff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrderDiff_Diff > diffs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbidlevels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalasklevels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalbidorders_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalaskorders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Trades_Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.Trades.Trade) */ {
 public:
  inline Trades_Trade() : Trades_Trade(nullptr) {}
  virtual ~Trades_Trade();
  explicit constexpr Trades_Trade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trades_Trade(const Trades_Trade& from);
  Trades_Trade(Trades_Trade&& from) noexcept
    : Trades_Trade() {
    *this = ::std::move(from);
  }

  inline Trades_Trade& operator=(const Trades_Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trades_Trade& operator=(Trades_Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trades_Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trades_Trade* internal_default_instance() {
    return reinterpret_cast<const Trades_Trade*>(
               &_Trades_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Trades_Trade& a, Trades_Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trades_Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trades_Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trades_Trade* New() const final {
    return CreateMaybeMessage<Trades_Trade>(nullptr);
  }

  Trades_Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trades_Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trades_Trade& from);
  void MergeFrom(const Trades_Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trades_Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.Trades.Trade";
  }
  protected:
  explicit Trades_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 1,
    kPriceFieldNumber = 2,
    kRestingExchangeOrderIdFieldNumber = 4,
    kFillQuantityFieldNumber = 5,
    kTransactTimeFieldNumber = 6,
    kAggressingExchangeOrderIdFieldNumber = 7,
    kAggressingSideFieldNumber = 3,
  };
  // uint64 tradeId = 1;
  void clear_tradeid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tradeid() const;
  void set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tradeid() const;
  void _internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 2;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 restingExchangeOrderId = 4;
  void clear_restingexchangeorderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 restingexchangeorderid() const;
  void set_restingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_restingexchangeorderid() const;
  void _internal_set_restingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fillQuantity = 5;
  void clear_fillquantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 fillquantity() const;
  void set_fillquantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fillquantity() const;
  void _internal_set_fillquantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transactTime = 6;
  void clear_transacttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 transacttime() const;
  void set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transacttime() const;
  void _internal_set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 aggressingExchangeOrderId = 7;
  void clear_aggressingexchangeorderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 aggressingexchangeorderid() const;
  void set_aggressingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_aggressingexchangeorderid() const;
  void _internal_set_aggressingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .md.Side aggressingSide = 3;
  void clear_aggressingside();
  ::md::Side aggressingside() const;
  void set_aggressingside(::md::Side value);
  private:
  ::md::Side _internal_aggressingside() const;
  void _internal_set_aggressingside(::md::Side value);
  public:

  // @@protoc_insertion_point(class_scope:md.Trades.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tradeid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restingexchangeorderid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fillquantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transacttime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 aggressingexchangeorderid_;
  int aggressingside_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Trades PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.Trades) */ {
 public:
  inline Trades() : Trades(nullptr) {}
  virtual ~Trades();
  explicit constexpr Trades(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trades(const Trades& from);
  Trades(Trades&& from) noexcept
    : Trades() {
    *this = ::std::move(from);
  }

  inline Trades& operator=(const Trades& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trades& operator=(Trades&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trades& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trades* internal_default_instance() {
    return reinterpret_cast<const Trades*>(
               &_Trades_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Trades& a, Trades& b) {
    a.Swap(&b);
  }
  inline void Swap(Trades* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trades* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trades* New() const final {
    return CreateMaybeMessage<Trades>(nullptr);
  }

  Trades* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trades>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trades& from);
  void MergeFrom(const Trades& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trades* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.Trades";
  }
  protected:
  explicit Trades(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trades_Trade Trade;

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .md.Trades.Trade trades = 1;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::md::Trades_Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::Trades_Trade >*
      mutable_trades();
  private:
  const ::md::Trades_Trade& _internal_trades(int index) const;
  ::md::Trades_Trade* _internal_add_trades();
  public:
  const ::md::Trades_Trade& trades(int index) const;
  ::md::Trades_Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::Trades_Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:md.Trades)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::Trades_Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Summary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  virtual ~Summary();
  explicit constexpr Summary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary& default_instance() {
    return *internal_default_instance();
  }
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.Summary";
  }
  protected:
  explicit Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
    kBaseVolumeLoFieldNumber = 3,
    kBaseVolumeHiFieldNumber = 4,
    kQuoteVolumeLoFieldNumber = 5,
    kQuoteVolumeHiFieldNumber = 6,
  };
  // uint64 low = 1;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 high = 2;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 baseVolumeLo = 3;
  void clear_basevolumelo();
  ::PROTOBUF_NAMESPACE_ID::uint64 basevolumelo() const;
  void set_basevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_basevolumelo() const;
  void _internal_set_basevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 baseVolumeHi = 4;
  void clear_basevolumehi();
  ::PROTOBUF_NAMESPACE_ID::uint64 basevolumehi() const;
  void set_basevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_basevolumehi() const;
  void _internal_set_basevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quoteVolumeLo = 5;
  void clear_quotevolumelo();
  ::PROTOBUF_NAMESPACE_ID::uint64 quotevolumelo() const;
  void set_quotevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quotevolumelo() const;
  void _internal_set_quotevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quoteVolumeHi = 6;
  void clear_quotevolumehi();
  ::PROTOBUF_NAMESPACE_ID::uint64 quotevolumehi() const;
  void set_quotevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quotevolumehi() const;
  void _internal_set_quotevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:md.Summary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 basevolumelo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 basevolumehi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quotevolumelo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quotevolumehi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Kline PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.Kline) */ {
 public:
  inline Kline() : Kline(nullptr) {}
  virtual ~Kline();
  explicit constexpr Kline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Kline(const Kline& from);
  Kline(Kline&& from) noexcept
    : Kline() {
    *this = ::std::move(from);
  }

  inline Kline& operator=(const Kline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kline& operator=(Kline&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kline* internal_default_instance() {
    return reinterpret_cast<const Kline*>(
               &_Kline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Kline& a, Kline& b) {
    a.Swap(&b);
  }
  inline void Swap(Kline* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kline* New() const final {
    return CreateMaybeMessage<Kline>(nullptr);
  }

  Kline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kline& from);
  void MergeFrom(const Kline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.Kline";
  }
  protected:
  explicit Kline(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 2,
    kOpenFieldNumber = 3,
    kCloseFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kVolumeLoFieldNumber = 7,
    kVolumeHiFieldNumber = 8,
    kIntervalFieldNumber = 1,
  };
  // uint64 startTime = 2;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 open = 3;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 close = 4;
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::uint64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 high = 5;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 6;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volumeLo = 7;
  void clear_volumelo();
  ::PROTOBUF_NAMESPACE_ID::uint64 volumelo() const;
  void set_volumelo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volumelo() const;
  void _internal_set_volumelo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volumeHi = 8;
  void clear_volumehi();
  ::PROTOBUF_NAMESPACE_ID::uint64 volumehi() const;
  void set_volumehi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volumehi() const;
  void _internal_set_volumehi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .md.KlineInterval interval = 1;
  void clear_interval();
  ::md::KlineInterval interval() const;
  void set_interval(::md::KlineInterval value);
  private:
  ::md::KlineInterval _internal_interval() const;
  void _internal_set_interval(::md::KlineInterval value);
  public:

  // @@protoc_insertion_point(class_scope:md.Kline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volumelo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volumehi_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Heartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  virtual ~Heartbeat();
  explicit constexpr Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return CreateMaybeMessage<Heartbeat>(nullptr);
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // uint64 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:md.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MdMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.MdMessages) */ {
 public:
  inline MdMessages() : MdMessages(nullptr) {}
  virtual ~MdMessages();
  explicit constexpr MdMessages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdMessages(const MdMessages& from);
  MdMessages(MdMessages&& from) noexcept
    : MdMessages() {
    *this = ::std::move(from);
  }

  inline MdMessages& operator=(const MdMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdMessages& operator=(MdMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MdMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdMessages* internal_default_instance() {
    return reinterpret_cast<const MdMessages*>(
               &_MdMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MdMessages& a, MdMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(MdMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdMessages* New() const final {
    return CreateMaybeMessage<MdMessages>(nullptr);
  }

  MdMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MdMessages& from);
  void MergeFrom(const MdMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.MdMessages";
  }
  protected:
  explicit MdMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .md.MdMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::md::MdMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MdMessage >*
      mutable_messages();
  private:
  const ::md::MdMessage& _internal_messages(int index) const;
  ::md::MdMessage* _internal_add_messages();
  public:
  const ::md::MdMessage& messages(int index) const;
  ::md::MdMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MdMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:md.MdMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MdMessage > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AggMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.AggMessage) */ {
 public:
  inline AggMessage() : AggMessage(nullptr) {}
  virtual ~AggMessage();
  explicit constexpr AggMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggMessage(const AggMessage& from);
  AggMessage(AggMessage&& from) noexcept
    : AggMessage() {
    *this = ::std::move(from);
  }

  inline AggMessage& operator=(const AggMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggMessage& operator=(AggMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggMessage& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kHeartbeat = 1,
    kTopOfBooks = 2,
    INNER_NOT_SET = 0,
  };

  static inline const AggMessage* internal_default_instance() {
    return reinterpret_cast<const AggMessage*>(
               &_AggMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AggMessage& a, AggMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AggMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggMessage* New() const final {
    return CreateMaybeMessage<AggMessage>(nullptr);
  }

  AggMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggMessage& from);
  void MergeFrom(const AggMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.AggMessage";
  }
  protected:
  explicit AggMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kTopOfBooksFieldNumber = 2,
  };
  // .md.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::md::Heartbeat& heartbeat() const;
  ::md::Heartbeat* release_heartbeat();
  ::md::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::md::Heartbeat* heartbeat);
  private:
  const ::md::Heartbeat& _internal_heartbeat() const;
  ::md::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::md::Heartbeat* heartbeat);
  ::md::Heartbeat* unsafe_arena_release_heartbeat();

  // .md.TopOfBooks topOfBooks = 2;
  bool has_topofbooks() const;
  private:
  bool _internal_has_topofbooks() const;
  public:
  void clear_topofbooks();
  const ::md::TopOfBooks& topofbooks() const;
  ::md::TopOfBooks* release_topofbooks();
  ::md::TopOfBooks* mutable_topofbooks();
  void set_allocated_topofbooks(::md::TopOfBooks* topofbooks);
  private:
  const ::md::TopOfBooks& _internal_topofbooks() const;
  ::md::TopOfBooks* _internal_mutable_topofbooks();
  public:
  void unsafe_arena_set_allocated_topofbooks(
      ::md::TopOfBooks* topofbooks);
  ::md::TopOfBooks* unsafe_arena_release_topofbooks();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:md.AggMessage)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_topofbooks();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::md::Heartbeat* heartbeat_;
    ::md::TopOfBooks* topofbooks_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TopOfBook PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.TopOfBook) */ {
 public:
  inline TopOfBook() : TopOfBook(nullptr) {}
  virtual ~TopOfBook();
  explicit constexpr TopOfBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopOfBook(const TopOfBook& from);
  TopOfBook(TopOfBook&& from) noexcept
    : TopOfBook() {
    *this = ::std::move(from);
  }

  inline TopOfBook& operator=(const TopOfBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopOfBook& operator=(TopOfBook&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopOfBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopOfBook* internal_default_instance() {
    return reinterpret_cast<const TopOfBook*>(
               &_TopOfBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TopOfBook& a, TopOfBook& b) {
    a.Swap(&b);
  }
  inline void Swap(TopOfBook* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopOfBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopOfBook* New() const final {
    return CreateMaybeMessage<TopOfBook>(nullptr);
  }

  TopOfBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopOfBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopOfBook& from);
  void MergeFrom(const TopOfBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopOfBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.TopOfBook";
  }
  protected:
  explicit TopOfBook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kTransactTimeFieldNumber = 2,
    kBidPriceFieldNumber = 3,
    kBidQuantityFieldNumber = 4,
    kAskPriceFieldNumber = 5,
    kAskQuantityFieldNumber = 6,
    kLastPriceFieldNumber = 7,
  };
  // uint64 marketId = 1;
  void clear_marketid();
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid() const;
  void set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_marketid() const;
  void _internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transactTime = 2;
  void clear_transacttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 transacttime() const;
  void set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transacttime() const;
  void _internal_set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bidPrice = 3;
  void clear_bidprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 bidprice() const;
  void set_bidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bidprice() const;
  void _internal_set_bidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bidQuantity = 4;
  void clear_bidquantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 bidquantity() const;
  void set_bidquantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bidquantity() const;
  void _internal_set_bidquantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 askPrice = 5;
  void clear_askprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 askprice() const;
  void set_askprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_askprice() const;
  void _internal_set_askprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 askQuantity = 6;
  void clear_askquantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 askquantity() const;
  void set_askquantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_askquantity() const;
  void _internal_set_askquantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lastPrice = 7;
  void clear_lastprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastprice() const;
  void set_lastprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastprice() const;
  void _internal_set_lastprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:md.TopOfBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transacttime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bidprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bidquantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 askprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 askquantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TopOfBooks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.TopOfBooks) */ {
 public:
  inline TopOfBooks() : TopOfBooks(nullptr) {}
  virtual ~TopOfBooks();
  explicit constexpr TopOfBooks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopOfBooks(const TopOfBooks& from);
  TopOfBooks(TopOfBooks&& from) noexcept
    : TopOfBooks() {
    *this = ::std::move(from);
  }

  inline TopOfBooks& operator=(const TopOfBooks& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopOfBooks& operator=(TopOfBooks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopOfBooks& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopOfBooks* internal_default_instance() {
    return reinterpret_cast<const TopOfBooks*>(
               &_TopOfBooks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TopOfBooks& a, TopOfBooks& b) {
    a.Swap(&b);
  }
  inline void Swap(TopOfBooks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopOfBooks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopOfBooks* New() const final {
    return CreateMaybeMessage<TopOfBooks>(nullptr);
  }

  TopOfBooks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopOfBooks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopOfBooks& from);
  void MergeFrom(const TopOfBooks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopOfBooks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.TopOfBooks";
  }
  protected:
  explicit TopOfBooks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopsFieldNumber = 1,
  };
  // repeated .md.TopOfBook tops = 1;
  int tops_size() const;
  private:
  int _internal_tops_size() const;
  public:
  void clear_tops();
  ::md::TopOfBook* mutable_tops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::TopOfBook >*
      mutable_tops();
  private:
  const ::md::TopOfBook& _internal_tops(int index) const;
  ::md::TopOfBook* _internal_add_tops();
  public:
  const ::md::TopOfBook& tops(int index) const;
  ::md::TopOfBook* add_tops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::TopOfBook >&
      tops() const;

  // @@protoc_insertion_point(class_scope:md.TopOfBooks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::TopOfBook > tops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  virtual ~ClientMessage();
  explicit constexpr ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kHeartbeat = 1,
    kConfig = 2,
    INNER_NOT_SET = 0,
  };

  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // .md.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::md::Heartbeat& heartbeat() const;
  ::md::Heartbeat* release_heartbeat();
  ::md::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::md::Heartbeat* heartbeat);
  private:
  const ::md::Heartbeat& _internal_heartbeat() const;
  ::md::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::md::Heartbeat* heartbeat);
  ::md::Heartbeat* unsafe_arena_release_heartbeat();

  // .md.Config config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::md::Config& config() const;
  ::md::Config* release_config();
  ::md::Config* mutable_config();
  void set_allocated_config(::md::Config* config);
  private:
  const ::md::Config& _internal_config() const;
  ::md::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::md::Config* config);
  ::md::Config* unsafe_arena_release_config();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:md.ClientMessage)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_config();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::md::Heartbeat* heartbeat_;
    ::md::Config* config_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:md.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "md.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKlinesFieldNumber = 5,
    kMbpFieldNumber = 1,
    kMboFieldNumber = 2,
    kTradesFieldNumber = 3,
    kSummaryFieldNumber = 4,
  };
  // repeated .md.KlineInterval klines = 5;
  int klines_size() const;
  private:
  int _internal_klines_size() const;
  public:
  void clear_klines();
  private:
  ::md::KlineInterval _internal_klines(int index) const;
  void _internal_add_klines(::md::KlineInterval value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_klines();
  public:
  ::md::KlineInterval klines(int index) const;
  void set_klines(int index, ::md::KlineInterval value);
  void add_klines(::md::KlineInterval value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& klines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_klines();

  // bool mbp = 1;
  void clear_mbp();
  bool mbp() const;
  void set_mbp(bool value);
  private:
  bool _internal_mbp() const;
  void _internal_set_mbp(bool value);
  public:

  // bool mbo = 2;
  void clear_mbo();
  bool mbo() const;
  void set_mbo(bool value);
  private:
  bool _internal_mbo() const;
  void _internal_set_mbo(bool value);
  public:

  // bool trades = 3;
  void clear_trades();
  bool trades() const;
  void set_trades(bool value);
  private:
  bool _internal_trades() const;
  void _internal_set_trades(bool value);
  public:

  // bool summary = 4;
  void clear_summary();
  bool summary() const;
  void set_summary(bool value);
  private:
  bool _internal_summary() const;
  void _internal_set_summary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:md.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> klines_;
  mutable std::atomic<int> _klines_cached_byte_size_;
  bool mbp_;
  bool mbo_;
  bool trades_;
  bool summary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MdMessage

// .md.Heartbeat heartbeat = 1;
inline bool MdMessage::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool MdMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void MdMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void MdMessage::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::md::Heartbeat* MdMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:md.MdMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::md::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Heartbeat& MdMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::md::Heartbeat&>(::md::_Heartbeat_default_instance_);
}
inline const ::md::Heartbeat& MdMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.heartbeat)
  return _internal_heartbeat();
}
inline ::md::Heartbeat* MdMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::md::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_heartbeat(::md::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.heartbeat)
}
inline ::md::Heartbeat* MdMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::md::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::md::Heartbeat* MdMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .md.Summary summary = 2;
inline bool MdMessage::_internal_has_summary() const {
  return inner_case() == kSummary;
}
inline bool MdMessage::has_summary() const {
  return _internal_has_summary();
}
inline void MdMessage::set_has_summary() {
  _oneof_case_[0] = kSummary;
}
inline void MdMessage::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArena() == nullptr) {
      delete inner_.summary_;
    }
    clear_has_inner();
  }
}
inline ::md::Summary* MdMessage::release_summary() {
  // @@protoc_insertion_point(field_release:md.MdMessage.summary)
  if (_internal_has_summary()) {
    clear_has_inner();
      ::md::Summary* temp = inner_.summary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Summary& MdMessage::_internal_summary() const {
  return _internal_has_summary()
      ? *inner_.summary_
      : reinterpret_cast< ::md::Summary&>(::md::_Summary_default_instance_);
}
inline const ::md::Summary& MdMessage::summary() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.summary)
  return _internal_summary();
}
inline ::md::Summary* MdMessage::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.summary)
  if (_internal_has_summary()) {
    clear_has_inner();
    ::md::Summary* temp = inner_.summary_;
    inner_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_summary(::md::Summary* summary) {
  clear_inner();
  if (summary) {
    set_has_summary();
    inner_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.summary)
}
inline ::md::Summary* MdMessage::_internal_mutable_summary() {
  if (!_internal_has_summary()) {
    clear_inner();
    set_has_summary();
    inner_.summary_ = CreateMaybeMessage< ::md::Summary >(GetArena());
  }
  return inner_.summary_;
}
inline ::md::Summary* MdMessage::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.summary)
  return _internal_mutable_summary();
}

// .md.Trades trades = 3;
inline bool MdMessage::_internal_has_trades() const {
  return inner_case() == kTrades;
}
inline bool MdMessage::has_trades() const {
  return _internal_has_trades();
}
inline void MdMessage::set_has_trades() {
  _oneof_case_[0] = kTrades;
}
inline void MdMessage::clear_trades() {
  if (_internal_has_trades()) {
    if (GetArena() == nullptr) {
      delete inner_.trades_;
    }
    clear_has_inner();
  }
}
inline ::md::Trades* MdMessage::release_trades() {
  // @@protoc_insertion_point(field_release:md.MdMessage.trades)
  if (_internal_has_trades()) {
    clear_has_inner();
      ::md::Trades* temp = inner_.trades_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.trades_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Trades& MdMessage::_internal_trades() const {
  return _internal_has_trades()
      ? *inner_.trades_
      : reinterpret_cast< ::md::Trades&>(::md::_Trades_default_instance_);
}
inline const ::md::Trades& MdMessage::trades() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.trades)
  return _internal_trades();
}
inline ::md::Trades* MdMessage::unsafe_arena_release_trades() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.trades)
  if (_internal_has_trades()) {
    clear_has_inner();
    ::md::Trades* temp = inner_.trades_;
    inner_.trades_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_trades(::md::Trades* trades) {
  clear_inner();
  if (trades) {
    set_has_trades();
    inner_.trades_ = trades;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.trades)
}
inline ::md::Trades* MdMessage::_internal_mutable_trades() {
  if (!_internal_has_trades()) {
    clear_inner();
    set_has_trades();
    inner_.trades_ = CreateMaybeMessage< ::md::Trades >(GetArena());
  }
  return inner_.trades_;
}
inline ::md::Trades* MdMessage::mutable_trades() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.trades)
  return _internal_mutable_trades();
}

// .md.MarketByOrder mboSnapshot = 4;
inline bool MdMessage::_internal_has_mbosnapshot() const {
  return inner_case() == kMboSnapshot;
}
inline bool MdMessage::has_mbosnapshot() const {
  return _internal_has_mbosnapshot();
}
inline void MdMessage::set_has_mbosnapshot() {
  _oneof_case_[0] = kMboSnapshot;
}
inline void MdMessage::clear_mbosnapshot() {
  if (_internal_has_mbosnapshot()) {
    if (GetArena() == nullptr) {
      delete inner_.mbosnapshot_;
    }
    clear_has_inner();
  }
}
inline ::md::MarketByOrder* MdMessage::release_mbosnapshot() {
  // @@protoc_insertion_point(field_release:md.MdMessage.mboSnapshot)
  if (_internal_has_mbosnapshot()) {
    clear_has_inner();
      ::md::MarketByOrder* temp = inner_.mbosnapshot_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbosnapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::MarketByOrder& MdMessage::_internal_mbosnapshot() const {
  return _internal_has_mbosnapshot()
      ? *inner_.mbosnapshot_
      : reinterpret_cast< ::md::MarketByOrder&>(::md::_MarketByOrder_default_instance_);
}
inline const ::md::MarketByOrder& MdMessage::mbosnapshot() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.mboSnapshot)
  return _internal_mbosnapshot();
}
inline ::md::MarketByOrder* MdMessage::unsafe_arena_release_mbosnapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.mboSnapshot)
  if (_internal_has_mbosnapshot()) {
    clear_has_inner();
    ::md::MarketByOrder* temp = inner_.mbosnapshot_;
    inner_.mbosnapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbosnapshot(::md::MarketByOrder* mbosnapshot) {
  clear_inner();
  if (mbosnapshot) {
    set_has_mbosnapshot();
    inner_.mbosnapshot_ = mbosnapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.mboSnapshot)
}
inline ::md::MarketByOrder* MdMessage::_internal_mutable_mbosnapshot() {
  if (!_internal_has_mbosnapshot()) {
    clear_inner();
    set_has_mbosnapshot();
    inner_.mbosnapshot_ = CreateMaybeMessage< ::md::MarketByOrder >(GetArena());
  }
  return inner_.mbosnapshot_;
}
inline ::md::MarketByOrder* MdMessage::mutable_mbosnapshot() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.mboSnapshot)
  return _internal_mutable_mbosnapshot();
}

// .md.MarketByOrderDiff mboDiff = 5;
inline bool MdMessage::_internal_has_mbodiff() const {
  return inner_case() == kMboDiff;
}
inline bool MdMessage::has_mbodiff() const {
  return _internal_has_mbodiff();
}
inline void MdMessage::set_has_mbodiff() {
  _oneof_case_[0] = kMboDiff;
}
inline void MdMessage::clear_mbodiff() {
  if (_internal_has_mbodiff()) {
    if (GetArena() == nullptr) {
      delete inner_.mbodiff_;
    }
    clear_has_inner();
  }
}
inline ::md::MarketByOrderDiff* MdMessage::release_mbodiff() {
  // @@protoc_insertion_point(field_release:md.MdMessage.mboDiff)
  if (_internal_has_mbodiff()) {
    clear_has_inner();
      ::md::MarketByOrderDiff* temp = inner_.mbodiff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbodiff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::MarketByOrderDiff& MdMessage::_internal_mbodiff() const {
  return _internal_has_mbodiff()
      ? *inner_.mbodiff_
      : reinterpret_cast< ::md::MarketByOrderDiff&>(::md::_MarketByOrderDiff_default_instance_);
}
inline const ::md::MarketByOrderDiff& MdMessage::mbodiff() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.mboDiff)
  return _internal_mbodiff();
}
inline ::md::MarketByOrderDiff* MdMessage::unsafe_arena_release_mbodiff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.mboDiff)
  if (_internal_has_mbodiff()) {
    clear_has_inner();
    ::md::MarketByOrderDiff* temp = inner_.mbodiff_;
    inner_.mbodiff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbodiff(::md::MarketByOrderDiff* mbodiff) {
  clear_inner();
  if (mbodiff) {
    set_has_mbodiff();
    inner_.mbodiff_ = mbodiff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.mboDiff)
}
inline ::md::MarketByOrderDiff* MdMessage::_internal_mutable_mbodiff() {
  if (!_internal_has_mbodiff()) {
    clear_inner();
    set_has_mbodiff();
    inner_.mbodiff_ = CreateMaybeMessage< ::md::MarketByOrderDiff >(GetArena());
  }
  return inner_.mbodiff_;
}
inline ::md::MarketByOrderDiff* MdMessage::mutable_mbodiff() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.mboDiff)
  return _internal_mutable_mbodiff();
}

// .md.MarketByPrice mbpSnapshot = 6;
inline bool MdMessage::_internal_has_mbpsnapshot() const {
  return inner_case() == kMbpSnapshot;
}
inline bool MdMessage::has_mbpsnapshot() const {
  return _internal_has_mbpsnapshot();
}
inline void MdMessage::set_has_mbpsnapshot() {
  _oneof_case_[0] = kMbpSnapshot;
}
inline void MdMessage::clear_mbpsnapshot() {
  if (_internal_has_mbpsnapshot()) {
    if (GetArena() == nullptr) {
      delete inner_.mbpsnapshot_;
    }
    clear_has_inner();
  }
}
inline ::md::MarketByPrice* MdMessage::release_mbpsnapshot() {
  // @@protoc_insertion_point(field_release:md.MdMessage.mbpSnapshot)
  if (_internal_has_mbpsnapshot()) {
    clear_has_inner();
      ::md::MarketByPrice* temp = inner_.mbpsnapshot_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbpsnapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::MarketByPrice& MdMessage::_internal_mbpsnapshot() const {
  return _internal_has_mbpsnapshot()
      ? *inner_.mbpsnapshot_
      : reinterpret_cast< ::md::MarketByPrice&>(::md::_MarketByPrice_default_instance_);
}
inline const ::md::MarketByPrice& MdMessage::mbpsnapshot() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.mbpSnapshot)
  return _internal_mbpsnapshot();
}
inline ::md::MarketByPrice* MdMessage::unsafe_arena_release_mbpsnapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.mbpSnapshot)
  if (_internal_has_mbpsnapshot()) {
    clear_has_inner();
    ::md::MarketByPrice* temp = inner_.mbpsnapshot_;
    inner_.mbpsnapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbpsnapshot(::md::MarketByPrice* mbpsnapshot) {
  clear_inner();
  if (mbpsnapshot) {
    set_has_mbpsnapshot();
    inner_.mbpsnapshot_ = mbpsnapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.mbpSnapshot)
}
inline ::md::MarketByPrice* MdMessage::_internal_mutable_mbpsnapshot() {
  if (!_internal_has_mbpsnapshot()) {
    clear_inner();
    set_has_mbpsnapshot();
    inner_.mbpsnapshot_ = CreateMaybeMessage< ::md::MarketByPrice >(GetArena());
  }
  return inner_.mbpsnapshot_;
}
inline ::md::MarketByPrice* MdMessage::mutable_mbpsnapshot() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.mbpSnapshot)
  return _internal_mutable_mbpsnapshot();
}

// .md.MarketByPriceDiff mbpDiff = 7;
inline bool MdMessage::_internal_has_mbpdiff() const {
  return inner_case() == kMbpDiff;
}
inline bool MdMessage::has_mbpdiff() const {
  return _internal_has_mbpdiff();
}
inline void MdMessage::set_has_mbpdiff() {
  _oneof_case_[0] = kMbpDiff;
}
inline void MdMessage::clear_mbpdiff() {
  if (_internal_has_mbpdiff()) {
    if (GetArena() == nullptr) {
      delete inner_.mbpdiff_;
    }
    clear_has_inner();
  }
}
inline ::md::MarketByPriceDiff* MdMessage::release_mbpdiff() {
  // @@protoc_insertion_point(field_release:md.MdMessage.mbpDiff)
  if (_internal_has_mbpdiff()) {
    clear_has_inner();
      ::md::MarketByPriceDiff* temp = inner_.mbpdiff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbpdiff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::MarketByPriceDiff& MdMessage::_internal_mbpdiff() const {
  return _internal_has_mbpdiff()
      ? *inner_.mbpdiff_
      : reinterpret_cast< ::md::MarketByPriceDiff&>(::md::_MarketByPriceDiff_default_instance_);
}
inline const ::md::MarketByPriceDiff& MdMessage::mbpdiff() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.mbpDiff)
  return _internal_mbpdiff();
}
inline ::md::MarketByPriceDiff* MdMessage::unsafe_arena_release_mbpdiff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.mbpDiff)
  if (_internal_has_mbpdiff()) {
    clear_has_inner();
    ::md::MarketByPriceDiff* temp = inner_.mbpdiff_;
    inner_.mbpdiff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbpdiff(::md::MarketByPriceDiff* mbpdiff) {
  clear_inner();
  if (mbpdiff) {
    set_has_mbpdiff();
    inner_.mbpdiff_ = mbpdiff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.mbpDiff)
}
inline ::md::MarketByPriceDiff* MdMessage::_internal_mutable_mbpdiff() {
  if (!_internal_has_mbpdiff()) {
    clear_inner();
    set_has_mbpdiff();
    inner_.mbpdiff_ = CreateMaybeMessage< ::md::MarketByPriceDiff >(GetArena());
  }
  return inner_.mbpdiff_;
}
inline ::md::MarketByPriceDiff* MdMessage::mutable_mbpdiff() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.mbpDiff)
  return _internal_mutable_mbpdiff();
}

// .md.Kline kline = 8;
inline bool MdMessage::_internal_has_kline() const {
  return inner_case() == kKline;
}
inline bool MdMessage::has_kline() const {
  return _internal_has_kline();
}
inline void MdMessage::set_has_kline() {
  _oneof_case_[0] = kKline;
}
inline void MdMessage::clear_kline() {
  if (_internal_has_kline()) {
    if (GetArena() == nullptr) {
      delete inner_.kline_;
    }
    clear_has_inner();
  }
}
inline ::md::Kline* MdMessage::release_kline() {
  // @@protoc_insertion_point(field_release:md.MdMessage.kline)
  if (_internal_has_kline()) {
    clear_has_inner();
      ::md::Kline* temp = inner_.kline_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.kline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Kline& MdMessage::_internal_kline() const {
  return _internal_has_kline()
      ? *inner_.kline_
      : reinterpret_cast< ::md::Kline&>(::md::_Kline_default_instance_);
}
inline const ::md::Kline& MdMessage::kline() const {
  // @@protoc_insertion_point(field_get:md.MdMessage.kline)
  return _internal_kline();
}
inline ::md::Kline* MdMessage::unsafe_arena_release_kline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.MdMessage.kline)
  if (_internal_has_kline()) {
    clear_has_inner();
    ::md::Kline* temp = inner_.kline_;
    inner_.kline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_kline(::md::Kline* kline) {
  clear_inner();
  if (kline) {
    set_has_kline();
    inner_.kline_ = kline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.MdMessage.kline)
}
inline ::md::Kline* MdMessage::_internal_mutable_kline() {
  if (!_internal_has_kline()) {
    clear_inner();
    set_has_kline();
    inner_.kline_ = CreateMaybeMessage< ::md::Kline >(GetArena());
  }
  return inner_.kline_;
}
inline ::md::Kline* MdMessage::mutable_kline() {
  // @@protoc_insertion_point(field_mutable:md.MdMessage.kline)
  return _internal_mutable_kline();
}

inline bool MdMessage::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void MdMessage::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline MdMessage::InnerCase MdMessage::inner_case() const {
  return MdMessage::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MarketByPrice_Level

// uint64 price = 1;
inline void MarketByPrice_Level::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::price() const {
  // @@protoc_insertion_point(field_get:md.MarketByPrice.Level.price)
  return _internal_price();
}
inline void MarketByPrice_Level::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByPrice_Level::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:md.MarketByPrice.Level.price)
}

// uint64 quantity = 2;
inline void MarketByPrice_Level::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::quantity() const {
  // @@protoc_insertion_point(field_get:md.MarketByPrice.Level.quantity)
  return _internal_quantity();
}
inline void MarketByPrice_Level::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByPrice_Level::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:md.MarketByPrice.Level.quantity)
}

// .md.Side side = 3;
inline void MarketByPrice_Level::clear_side() {
  side_ = 0;
}
inline ::md::Side MarketByPrice_Level::_internal_side() const {
  return static_cast< ::md::Side >(side_);
}
inline ::md::Side MarketByPrice_Level::side() const {
  // @@protoc_insertion_point(field_get:md.MarketByPrice.Level.side)
  return _internal_side();
}
inline void MarketByPrice_Level::_internal_set_side(::md::Side value) {
  
  side_ = value;
}
inline void MarketByPrice_Level::set_side(::md::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:md.MarketByPrice.Level.side)
}

// -------------------------------------------------------------------

// MarketByPrice

// repeated .md.MarketByPrice.Level levels = 1;
inline int MarketByPrice::_internal_levels_size() const {
  return levels_.size();
}
inline int MarketByPrice::levels_size() const {
  return _internal_levels_size();
}
inline void MarketByPrice::clear_levels() {
  levels_.Clear();
}
inline ::md::MarketByPrice_Level* MarketByPrice::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:md.MarketByPrice.levels)
  return levels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPrice_Level >*
MarketByPrice::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:md.MarketByPrice.levels)
  return &levels_;
}
inline const ::md::MarketByPrice_Level& MarketByPrice::_internal_levels(int index) const {
  return levels_.Get(index);
}
inline const ::md::MarketByPrice_Level& MarketByPrice::levels(int index) const {
  // @@protoc_insertion_point(field_get:md.MarketByPrice.levels)
  return _internal_levels(index);
}
inline ::md::MarketByPrice_Level* MarketByPrice::_internal_add_levels() {
  return levels_.Add();
}
inline ::md::MarketByPrice_Level* MarketByPrice::add_levels() {
  // @@protoc_insertion_point(field_add:md.MarketByPrice.levels)
  return _internal_add_levels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPrice_Level >&
MarketByPrice::levels() const {
  // @@protoc_insertion_point(field_list:md.MarketByPrice.levels)
  return levels_;
}

// uint32 chunk = 2;
inline void MarketByPrice::clear_chunk() {
  chunk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::_internal_chunk() const {
  return chunk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::chunk() const {
  // @@protoc_insertion_point(field_get:md.MarketByPrice.chunk)
  return _internal_chunk();
}
inline void MarketByPrice::_internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_ = value;
}
inline void MarketByPrice::set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:md.MarketByPrice.chunk)
}

// uint32 numChunks = 3;
inline void MarketByPrice::clear_numchunks() {
  numchunks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::_internal_numchunks() const {
  return numchunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::numchunks() const {
  // @@protoc_insertion_point(field_get:md.MarketByPrice.numChunks)
  return _internal_numchunks();
}
inline void MarketByPrice::_internal_set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numchunks_ = value;
}
inline void MarketByPrice::set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numchunks(value);
  // @@protoc_insertion_point(field_set:md.MarketByPrice.numChunks)
}

// -------------------------------------------------------------------

// MarketByPriceDiff_Diff

// uint64 price = 1;
inline void MarketByPriceDiff_Diff::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::price() const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.Diff.price)
  return _internal_price();
}
inline void MarketByPriceDiff_Diff::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByPriceDiff_Diff::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:md.MarketByPriceDiff.Diff.price)
}

// uint64 quantity = 2;
inline void MarketByPriceDiff_Diff::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::quantity() const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.Diff.quantity)
  return _internal_quantity();
}
inline void MarketByPriceDiff_Diff::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByPriceDiff_Diff::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:md.MarketByPriceDiff.Diff.quantity)
}

// .md.Side side = 3;
inline void MarketByPriceDiff_Diff::clear_side() {
  side_ = 0;
}
inline ::md::Side MarketByPriceDiff_Diff::_internal_side() const {
  return static_cast< ::md::Side >(side_);
}
inline ::md::Side MarketByPriceDiff_Diff::side() const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.Diff.side)
  return _internal_side();
}
inline void MarketByPriceDiff_Diff::_internal_set_side(::md::Side value) {
  
  side_ = value;
}
inline void MarketByPriceDiff_Diff::set_side(::md::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:md.MarketByPriceDiff.Diff.side)
}

// .md.MarketByPriceDiff.DiffOp op = 4;
inline void MarketByPriceDiff_Diff::clear_op() {
  op_ = 0;
}
inline ::md::MarketByPriceDiff_DiffOp MarketByPriceDiff_Diff::_internal_op() const {
  return static_cast< ::md::MarketByPriceDiff_DiffOp >(op_);
}
inline ::md::MarketByPriceDiff_DiffOp MarketByPriceDiff_Diff::op() const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.Diff.op)
  return _internal_op();
}
inline void MarketByPriceDiff_Diff::_internal_set_op(::md::MarketByPriceDiff_DiffOp value) {
  
  op_ = value;
}
inline void MarketByPriceDiff_Diff::set_op(::md::MarketByPriceDiff_DiffOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:md.MarketByPriceDiff.Diff.op)
}

// -------------------------------------------------------------------

// MarketByPriceDiff

// repeated .md.MarketByPriceDiff.Diff diffs = 1;
inline int MarketByPriceDiff::_internal_diffs_size() const {
  return diffs_.size();
}
inline int MarketByPriceDiff::diffs_size() const {
  return _internal_diffs_size();
}
inline void MarketByPriceDiff::clear_diffs() {
  diffs_.Clear();
}
inline ::md::MarketByPriceDiff_Diff* MarketByPriceDiff::mutable_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:md.MarketByPriceDiff.diffs)
  return diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPriceDiff_Diff >*
MarketByPriceDiff::mutable_diffs() {
  // @@protoc_insertion_point(field_mutable_list:md.MarketByPriceDiff.diffs)
  return &diffs_;
}
inline const ::md::MarketByPriceDiff_Diff& MarketByPriceDiff::_internal_diffs(int index) const {
  return diffs_.Get(index);
}
inline const ::md::MarketByPriceDiff_Diff& MarketByPriceDiff::diffs(int index) const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.diffs)
  return _internal_diffs(index);
}
inline ::md::MarketByPriceDiff_Diff* MarketByPriceDiff::_internal_add_diffs() {
  return diffs_.Add();
}
inline ::md::MarketByPriceDiff_Diff* MarketByPriceDiff::add_diffs() {
  // @@protoc_insertion_point(field_add:md.MarketByPriceDiff.diffs)
  return _internal_add_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByPriceDiff_Diff >&
MarketByPriceDiff::diffs() const {
  // @@protoc_insertion_point(field_list:md.MarketByPriceDiff.diffs)
  return diffs_;
}

// uint32 totalBidLevels = 2;
inline void MarketByPriceDiff::clear_totalbidlevels() {
  totalbidlevels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::_internal_totalbidlevels() const {
  return totalbidlevels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::totalbidlevels() const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.totalBidLevels)
  return _internal_totalbidlevels();
}
inline void MarketByPriceDiff::_internal_set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalbidlevels_ = value;
}
inline void MarketByPriceDiff::set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalbidlevels(value);
  // @@protoc_insertion_point(field_set:md.MarketByPriceDiff.totalBidLevels)
}

// uint32 totalAskLevels = 3;
inline void MarketByPriceDiff::clear_totalasklevels() {
  totalasklevels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::_internal_totalasklevels() const {
  return totalasklevels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::totalasklevels() const {
  // @@protoc_insertion_point(field_get:md.MarketByPriceDiff.totalAskLevels)
  return _internal_totalasklevels();
}
inline void MarketByPriceDiff::_internal_set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalasklevels_ = value;
}
inline void MarketByPriceDiff::set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalasklevels(value);
  // @@protoc_insertion_point(field_set:md.MarketByPriceDiff.totalAskLevels)
}

// -------------------------------------------------------------------

// MarketByOrder_Order

// uint64 price = 1;
inline void MarketByOrder_Order::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::price() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.Order.price)
  return _internal_price();
}
inline void MarketByOrder_Order::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByOrder_Order::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrder.Order.price)
}

// uint64 quantity = 2;
inline void MarketByOrder_Order::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::quantity() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.Order.quantity)
  return _internal_quantity();
}
inline void MarketByOrder_Order::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByOrder_Order::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrder.Order.quantity)
}

// uint64 exchangeOrderId = 3;
inline void MarketByOrder_Order::clear_exchangeorderid() {
  exchangeorderid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_exchangeorderid() const {
  return exchangeorderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::exchangeorderid() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.Order.exchangeOrderId)
  return _internal_exchangeorderid();
}
inline void MarketByOrder_Order::_internal_set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchangeorderid_ = value;
}
inline void MarketByOrder_Order::set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchangeorderid(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrder.Order.exchangeOrderId)
}

// .md.Side side = 4;
inline void MarketByOrder_Order::clear_side() {
  side_ = 0;
}
inline ::md::Side MarketByOrder_Order::_internal_side() const {
  return static_cast< ::md::Side >(side_);
}
inline ::md::Side MarketByOrder_Order::side() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.Order.side)
  return _internal_side();
}
inline void MarketByOrder_Order::_internal_set_side(::md::Side value) {
  
  side_ = value;
}
inline void MarketByOrder_Order::set_side(::md::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrder.Order.side)
}

// -------------------------------------------------------------------

// MarketByOrder

// repeated .md.MarketByOrder.Order orders = 1;
inline int MarketByOrder::_internal_orders_size() const {
  return orders_.size();
}
inline int MarketByOrder::orders_size() const {
  return _internal_orders_size();
}
inline void MarketByOrder::clear_orders() {
  orders_.Clear();
}
inline ::md::MarketByOrder_Order* MarketByOrder::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:md.MarketByOrder.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrder_Order >*
MarketByOrder::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:md.MarketByOrder.orders)
  return &orders_;
}
inline const ::md::MarketByOrder_Order& MarketByOrder::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::md::MarketByOrder_Order& MarketByOrder::orders(int index) const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.orders)
  return _internal_orders(index);
}
inline ::md::MarketByOrder_Order* MarketByOrder::_internal_add_orders() {
  return orders_.Add();
}
inline ::md::MarketByOrder_Order* MarketByOrder::add_orders() {
  // @@protoc_insertion_point(field_add:md.MarketByOrder.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrder_Order >&
MarketByOrder::orders() const {
  // @@protoc_insertion_point(field_list:md.MarketByOrder.orders)
  return orders_;
}

// uint32 chunk = 2;
inline void MarketByOrder::clear_chunk() {
  chunk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::_internal_chunk() const {
  return chunk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::chunk() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.chunk)
  return _internal_chunk();
}
inline void MarketByOrder::_internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_ = value;
}
inline void MarketByOrder::set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrder.chunk)
}

// uint32 numChunks = 3;
inline void MarketByOrder::clear_numchunks() {
  numchunks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::_internal_numchunks() const {
  return numchunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::numchunks() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrder.numChunks)
  return _internal_numchunks();
}
inline void MarketByOrder::_internal_set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numchunks_ = value;
}
inline void MarketByOrder::set_numchunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numchunks(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrder.numChunks)
}

// -------------------------------------------------------------------

// MarketByOrderDiff_Diff

// uint64 price = 1;
inline void MarketByOrderDiff_Diff::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::price() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.Diff.price)
  return _internal_price();
}
inline void MarketByOrderDiff_Diff::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByOrderDiff_Diff::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.Diff.price)
}

// uint64 quantity = 2;
inline void MarketByOrderDiff_Diff::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::quantity() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.Diff.quantity)
  return _internal_quantity();
}
inline void MarketByOrderDiff_Diff::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByOrderDiff_Diff::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.Diff.quantity)
}

// uint64 exchangeOrderId = 3;
inline void MarketByOrderDiff_Diff::clear_exchangeorderid() {
  exchangeorderid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_exchangeorderid() const {
  return exchangeorderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::exchangeorderid() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.Diff.exchangeOrderId)
  return _internal_exchangeorderid();
}
inline void MarketByOrderDiff_Diff::_internal_set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchangeorderid_ = value;
}
inline void MarketByOrderDiff_Diff::set_exchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchangeorderid(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.Diff.exchangeOrderId)
}

// .md.Side side = 4;
inline void MarketByOrderDiff_Diff::clear_side() {
  side_ = 0;
}
inline ::md::Side MarketByOrderDiff_Diff::_internal_side() const {
  return static_cast< ::md::Side >(side_);
}
inline ::md::Side MarketByOrderDiff_Diff::side() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.Diff.side)
  return _internal_side();
}
inline void MarketByOrderDiff_Diff::_internal_set_side(::md::Side value) {
  
  side_ = value;
}
inline void MarketByOrderDiff_Diff::set_side(::md::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.Diff.side)
}

// .md.MarketByOrderDiff.OrderOp op = 5;
inline void MarketByOrderDiff_Diff::clear_op() {
  op_ = 0;
}
inline ::md::MarketByOrderDiff_OrderOp MarketByOrderDiff_Diff::_internal_op() const {
  return static_cast< ::md::MarketByOrderDiff_OrderOp >(op_);
}
inline ::md::MarketByOrderDiff_OrderOp MarketByOrderDiff_Diff::op() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.Diff.op)
  return _internal_op();
}
inline void MarketByOrderDiff_Diff::_internal_set_op(::md::MarketByOrderDiff_OrderOp value) {
  
  op_ = value;
}
inline void MarketByOrderDiff_Diff::set_op(::md::MarketByOrderDiff_OrderOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.Diff.op)
}

// -------------------------------------------------------------------

// MarketByOrderDiff

// repeated .md.MarketByOrderDiff.Diff diffs = 1;
inline int MarketByOrderDiff::_internal_diffs_size() const {
  return diffs_.size();
}
inline int MarketByOrderDiff::diffs_size() const {
  return _internal_diffs_size();
}
inline void MarketByOrderDiff::clear_diffs() {
  diffs_.Clear();
}
inline ::md::MarketByOrderDiff_Diff* MarketByOrderDiff::mutable_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:md.MarketByOrderDiff.diffs)
  return diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrderDiff_Diff >*
MarketByOrderDiff::mutable_diffs() {
  // @@protoc_insertion_point(field_mutable_list:md.MarketByOrderDiff.diffs)
  return &diffs_;
}
inline const ::md::MarketByOrderDiff_Diff& MarketByOrderDiff::_internal_diffs(int index) const {
  return diffs_.Get(index);
}
inline const ::md::MarketByOrderDiff_Diff& MarketByOrderDiff::diffs(int index) const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.diffs)
  return _internal_diffs(index);
}
inline ::md::MarketByOrderDiff_Diff* MarketByOrderDiff::_internal_add_diffs() {
  return diffs_.Add();
}
inline ::md::MarketByOrderDiff_Diff* MarketByOrderDiff::add_diffs() {
  // @@protoc_insertion_point(field_add:md.MarketByOrderDiff.diffs)
  return _internal_add_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MarketByOrderDiff_Diff >&
MarketByOrderDiff::diffs() const {
  // @@protoc_insertion_point(field_list:md.MarketByOrderDiff.diffs)
  return diffs_;
}

// uint32 totalBidLevels = 2;
inline void MarketByOrderDiff::clear_totalbidlevels() {
  totalbidlevels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_totalbidlevels() const {
  return totalbidlevels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::totalbidlevels() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.totalBidLevels)
  return _internal_totalbidlevels();
}
inline void MarketByOrderDiff::_internal_set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalbidlevels_ = value;
}
inline void MarketByOrderDiff::set_totalbidlevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalbidlevels(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.totalBidLevels)
}

// uint32 totalAskLevels = 3;
inline void MarketByOrderDiff::clear_totalasklevels() {
  totalasklevels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_totalasklevels() const {
  return totalasklevels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::totalasklevels() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.totalAskLevels)
  return _internal_totalasklevels();
}
inline void MarketByOrderDiff::_internal_set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalasklevels_ = value;
}
inline void MarketByOrderDiff::set_totalasklevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalasklevels(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.totalAskLevels)
}

// uint32 totalBidOrders = 4;
inline void MarketByOrderDiff::clear_totalbidorders() {
  totalbidorders_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_totalbidorders() const {
  return totalbidorders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::totalbidorders() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.totalBidOrders)
  return _internal_totalbidorders();
}
inline void MarketByOrderDiff::_internal_set_totalbidorders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalbidorders_ = value;
}
inline void MarketByOrderDiff::set_totalbidorders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalbidorders(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.totalBidOrders)
}

// uint32 totalAskOrders = 5;
inline void MarketByOrderDiff::clear_totalaskorders() {
  totalaskorders_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_totalaskorders() const {
  return totalaskorders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::totalaskorders() const {
  // @@protoc_insertion_point(field_get:md.MarketByOrderDiff.totalAskOrders)
  return _internal_totalaskorders();
}
inline void MarketByOrderDiff::_internal_set_totalaskorders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalaskorders_ = value;
}
inline void MarketByOrderDiff::set_totalaskorders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalaskorders(value);
  // @@protoc_insertion_point(field_set:md.MarketByOrderDiff.totalAskOrders)
}

// -------------------------------------------------------------------

// Trades_Trade

// uint64 tradeId = 1;
inline void Trades_Trade::clear_tradeid() {
  tradeid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_tradeid() const {
  return tradeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::tradeid() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.tradeId)
  return _internal_tradeid();
}
inline void Trades_Trade::_internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tradeid_ = value;
}
inline void Trades_Trade::set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tradeid(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.tradeId)
}

// uint64 price = 2;
inline void Trades_Trade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::price() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.price)
  return _internal_price();
}
inline void Trades_Trade::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void Trades_Trade::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.price)
}

// .md.Side aggressingSide = 3;
inline void Trades_Trade::clear_aggressingside() {
  aggressingside_ = 0;
}
inline ::md::Side Trades_Trade::_internal_aggressingside() const {
  return static_cast< ::md::Side >(aggressingside_);
}
inline ::md::Side Trades_Trade::aggressingside() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.aggressingSide)
  return _internal_aggressingside();
}
inline void Trades_Trade::_internal_set_aggressingside(::md::Side value) {
  
  aggressingside_ = value;
}
inline void Trades_Trade::set_aggressingside(::md::Side value) {
  _internal_set_aggressingside(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.aggressingSide)
}

// uint64 restingExchangeOrderId = 4;
inline void Trades_Trade::clear_restingexchangeorderid() {
  restingexchangeorderid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_restingexchangeorderid() const {
  return restingexchangeorderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::restingexchangeorderid() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.restingExchangeOrderId)
  return _internal_restingexchangeorderid();
}
inline void Trades_Trade::_internal_set_restingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  restingexchangeorderid_ = value;
}
inline void Trades_Trade::set_restingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_restingexchangeorderid(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.restingExchangeOrderId)
}

// uint64 fillQuantity = 5;
inline void Trades_Trade::clear_fillquantity() {
  fillquantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_fillquantity() const {
  return fillquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::fillquantity() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.fillQuantity)
  return _internal_fillquantity();
}
inline void Trades_Trade::_internal_set_fillquantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fillquantity_ = value;
}
inline void Trades_Trade::set_fillquantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fillquantity(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.fillQuantity)
}

// uint64 transactTime = 6;
inline void Trades_Trade::clear_transacttime() {
  transacttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_transacttime() const {
  return transacttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::transacttime() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.transactTime)
  return _internal_transacttime();
}
inline void Trades_Trade::_internal_set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transacttime_ = value;
}
inline void Trades_Trade::set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.transactTime)
}

// uint64 aggressingExchangeOrderId = 7;
inline void Trades_Trade::clear_aggressingexchangeorderid() {
  aggressingexchangeorderid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_aggressingexchangeorderid() const {
  return aggressingexchangeorderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::aggressingexchangeorderid() const {
  // @@protoc_insertion_point(field_get:md.Trades.Trade.aggressingExchangeOrderId)
  return _internal_aggressingexchangeorderid();
}
inline void Trades_Trade::_internal_set_aggressingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  aggressingexchangeorderid_ = value;
}
inline void Trades_Trade::set_aggressingexchangeorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_aggressingexchangeorderid(value);
  // @@protoc_insertion_point(field_set:md.Trades.Trade.aggressingExchangeOrderId)
}

// -------------------------------------------------------------------

// Trades

// repeated .md.Trades.Trade trades = 1;
inline int Trades::_internal_trades_size() const {
  return trades_.size();
}
inline int Trades::trades_size() const {
  return _internal_trades_size();
}
inline void Trades::clear_trades() {
  trades_.Clear();
}
inline ::md::Trades_Trade* Trades::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:md.Trades.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::Trades_Trade >*
Trades::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:md.Trades.trades)
  return &trades_;
}
inline const ::md::Trades_Trade& Trades::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::md::Trades_Trade& Trades::trades(int index) const {
  // @@protoc_insertion_point(field_get:md.Trades.trades)
  return _internal_trades(index);
}
inline ::md::Trades_Trade* Trades::_internal_add_trades() {
  return trades_.Add();
}
inline ::md::Trades_Trade* Trades::add_trades() {
  // @@protoc_insertion_point(field_add:md.Trades.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::Trades_Trade >&
Trades::trades() const {
  // @@protoc_insertion_point(field_list:md.Trades.trades)
  return trades_;
}

// -------------------------------------------------------------------

// Summary

// uint64 low = 1;
inline void Summary::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::low() const {
  // @@protoc_insertion_point(field_get:md.Summary.low)
  return _internal_low();
}
inline void Summary::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void Summary::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:md.Summary.low)
}

// uint64 high = 2;
inline void Summary::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::high() const {
  // @@protoc_insertion_point(field_get:md.Summary.high)
  return _internal_high();
}
inline void Summary::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void Summary::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:md.Summary.high)
}

// uint64 baseVolumeLo = 3;
inline void Summary::clear_basevolumelo() {
  basevolumelo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_basevolumelo() const {
  return basevolumelo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::basevolumelo() const {
  // @@protoc_insertion_point(field_get:md.Summary.baseVolumeLo)
  return _internal_basevolumelo();
}
inline void Summary::_internal_set_basevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  basevolumelo_ = value;
}
inline void Summary::set_basevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_basevolumelo(value);
  // @@protoc_insertion_point(field_set:md.Summary.baseVolumeLo)
}

// uint64 baseVolumeHi = 4;
inline void Summary::clear_basevolumehi() {
  basevolumehi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_basevolumehi() const {
  return basevolumehi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::basevolumehi() const {
  // @@protoc_insertion_point(field_get:md.Summary.baseVolumeHi)
  return _internal_basevolumehi();
}
inline void Summary::_internal_set_basevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  basevolumehi_ = value;
}
inline void Summary::set_basevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_basevolumehi(value);
  // @@protoc_insertion_point(field_set:md.Summary.baseVolumeHi)
}

// uint64 quoteVolumeLo = 5;
inline void Summary::clear_quotevolumelo() {
  quotevolumelo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_quotevolumelo() const {
  return quotevolumelo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::quotevolumelo() const {
  // @@protoc_insertion_point(field_get:md.Summary.quoteVolumeLo)
  return _internal_quotevolumelo();
}
inline void Summary::_internal_set_quotevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quotevolumelo_ = value;
}
inline void Summary::set_quotevolumelo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quotevolumelo(value);
  // @@protoc_insertion_point(field_set:md.Summary.quoteVolumeLo)
}

// uint64 quoteVolumeHi = 6;
inline void Summary::clear_quotevolumehi() {
  quotevolumehi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_quotevolumehi() const {
  return quotevolumehi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::quotevolumehi() const {
  // @@protoc_insertion_point(field_get:md.Summary.quoteVolumeHi)
  return _internal_quotevolumehi();
}
inline void Summary::_internal_set_quotevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quotevolumehi_ = value;
}
inline void Summary::set_quotevolumehi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quotevolumehi(value);
  // @@protoc_insertion_point(field_set:md.Summary.quoteVolumeHi)
}

// -------------------------------------------------------------------

// Kline

// .md.KlineInterval interval = 1;
inline void Kline::clear_interval() {
  interval_ = 0;
}
inline ::md::KlineInterval Kline::_internal_interval() const {
  return static_cast< ::md::KlineInterval >(interval_);
}
inline ::md::KlineInterval Kline::interval() const {
  // @@protoc_insertion_point(field_get:md.Kline.interval)
  return _internal_interval();
}
inline void Kline::_internal_set_interval(::md::KlineInterval value) {
  
  interval_ = value;
}
inline void Kline::set_interval(::md::KlineInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:md.Kline.interval)
}

// uint64 startTime = 2;
inline void Kline::clear_starttime() {
  starttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::starttime() const {
  // @@protoc_insertion_point(field_get:md.Kline.startTime)
  return _internal_starttime();
}
inline void Kline::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  starttime_ = value;
}
inline void Kline::set_starttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:md.Kline.startTime)
}

// uint64 open = 3;
inline void Kline::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::open() const {
  // @@protoc_insertion_point(field_get:md.Kline.open)
  return _internal_open();
}
inline void Kline::_internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_ = value;
}
inline void Kline::set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:md.Kline.open)
}

// uint64 close = 4;
inline void Kline::clear_close() {
  close_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::close() const {
  // @@protoc_insertion_point(field_get:md.Kline.close)
  return _internal_close();
}
inline void Kline::_internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  close_ = value;
}
inline void Kline::set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:md.Kline.close)
}

// uint64 high = 5;
inline void Kline::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::high() const {
  // @@protoc_insertion_point(field_get:md.Kline.high)
  return _internal_high();
}
inline void Kline::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void Kline::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:md.Kline.high)
}

// uint64 low = 6;
inline void Kline::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::low() const {
  // @@protoc_insertion_point(field_get:md.Kline.low)
  return _internal_low();
}
inline void Kline::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void Kline::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:md.Kline.low)
}

// uint64 volumeLo = 7;
inline void Kline::clear_volumelo() {
  volumelo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_volumelo() const {
  return volumelo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::volumelo() const {
  // @@protoc_insertion_point(field_get:md.Kline.volumeLo)
  return _internal_volumelo();
}
inline void Kline::_internal_set_volumelo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volumelo_ = value;
}
inline void Kline::set_volumelo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volumelo(value);
  // @@protoc_insertion_point(field_set:md.Kline.volumeLo)
}

// uint64 volumeHi = 8;
inline void Kline::clear_volumehi() {
  volumehi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_volumehi() const {
  return volumehi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::volumehi() const {
  // @@protoc_insertion_point(field_get:md.Kline.volumeHi)
  return _internal_volumehi();
}
inline void Kline::_internal_set_volumehi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volumehi_ = value;
}
inline void Kline::set_volumehi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volumehi(value);
  // @@protoc_insertion_point(field_set:md.Kline.volumeHi)
}

// -------------------------------------------------------------------

// Heartbeat

// uint64 requestId = 1;
inline void Heartbeat::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::requestid() const {
  // @@protoc_insertion_point(field_get:md.Heartbeat.requestId)
  return _internal_requestid();
}
inline void Heartbeat::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  requestid_ = value;
}
inline void Heartbeat::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:md.Heartbeat.requestId)
}

// uint64 timestamp = 2;
inline void Heartbeat::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:md.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Heartbeat::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:md.Heartbeat.timestamp)
}

// -------------------------------------------------------------------

// MdMessages

// repeated .md.MdMessage messages = 1;
inline int MdMessages::_internal_messages_size() const {
  return messages_.size();
}
inline int MdMessages::messages_size() const {
  return _internal_messages_size();
}
inline void MdMessages::clear_messages() {
  messages_.Clear();
}
inline ::md::MdMessage* MdMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:md.MdMessages.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MdMessage >*
MdMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:md.MdMessages.messages)
  return &messages_;
}
inline const ::md::MdMessage& MdMessages::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::md::MdMessage& MdMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:md.MdMessages.messages)
  return _internal_messages(index);
}
inline ::md::MdMessage* MdMessages::_internal_add_messages() {
  return messages_.Add();
}
inline ::md::MdMessage* MdMessages::add_messages() {
  // @@protoc_insertion_point(field_add:md.MdMessages.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::MdMessage >&
MdMessages::messages() const {
  // @@protoc_insertion_point(field_list:md.MdMessages.messages)
  return messages_;
}

// -------------------------------------------------------------------

// AggMessage

// .md.Heartbeat heartbeat = 1;
inline bool AggMessage::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool AggMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void AggMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void AggMessage::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::md::Heartbeat* AggMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:md.AggMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::md::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Heartbeat& AggMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::md::Heartbeat&>(::md::_Heartbeat_default_instance_);
}
inline const ::md::Heartbeat& AggMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:md.AggMessage.heartbeat)
  return _internal_heartbeat();
}
inline ::md::Heartbeat* AggMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.AggMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::md::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AggMessage::unsafe_arena_set_allocated_heartbeat(::md::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.AggMessage.heartbeat)
}
inline ::md::Heartbeat* AggMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::md::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::md::Heartbeat* AggMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:md.AggMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .md.TopOfBooks topOfBooks = 2;
inline bool AggMessage::_internal_has_topofbooks() const {
  return inner_case() == kTopOfBooks;
}
inline bool AggMessage::has_topofbooks() const {
  return _internal_has_topofbooks();
}
inline void AggMessage::set_has_topofbooks() {
  _oneof_case_[0] = kTopOfBooks;
}
inline void AggMessage::clear_topofbooks() {
  if (_internal_has_topofbooks()) {
    if (GetArena() == nullptr) {
      delete inner_.topofbooks_;
    }
    clear_has_inner();
  }
}
inline ::md::TopOfBooks* AggMessage::release_topofbooks() {
  // @@protoc_insertion_point(field_release:md.AggMessage.topOfBooks)
  if (_internal_has_topofbooks()) {
    clear_has_inner();
      ::md::TopOfBooks* temp = inner_.topofbooks_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.topofbooks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::TopOfBooks& AggMessage::_internal_topofbooks() const {
  return _internal_has_topofbooks()
      ? *inner_.topofbooks_
      : reinterpret_cast< ::md::TopOfBooks&>(::md::_TopOfBooks_default_instance_);
}
inline const ::md::TopOfBooks& AggMessage::topofbooks() const {
  // @@protoc_insertion_point(field_get:md.AggMessage.topOfBooks)
  return _internal_topofbooks();
}
inline ::md::TopOfBooks* AggMessage::unsafe_arena_release_topofbooks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.AggMessage.topOfBooks)
  if (_internal_has_topofbooks()) {
    clear_has_inner();
    ::md::TopOfBooks* temp = inner_.topofbooks_;
    inner_.topofbooks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AggMessage::unsafe_arena_set_allocated_topofbooks(::md::TopOfBooks* topofbooks) {
  clear_inner();
  if (topofbooks) {
    set_has_topofbooks();
    inner_.topofbooks_ = topofbooks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.AggMessage.topOfBooks)
}
inline ::md::TopOfBooks* AggMessage::_internal_mutable_topofbooks() {
  if (!_internal_has_topofbooks()) {
    clear_inner();
    set_has_topofbooks();
    inner_.topofbooks_ = CreateMaybeMessage< ::md::TopOfBooks >(GetArena());
  }
  return inner_.topofbooks_;
}
inline ::md::TopOfBooks* AggMessage::mutable_topofbooks() {
  // @@protoc_insertion_point(field_mutable:md.AggMessage.topOfBooks)
  return _internal_mutable_topofbooks();
}

inline bool AggMessage::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void AggMessage::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline AggMessage::InnerCase AggMessage::inner_case() const {
  return AggMessage::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopOfBook

// uint64 marketId = 1;
inline void TopOfBook::clear_marketid() {
  marketid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_marketid() const {
  return marketid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::marketid() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.marketId)
  return _internal_marketid();
}
inline void TopOfBook::_internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  marketid_ = value;
}
inline void TopOfBook::set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.marketId)
}

// uint64 transactTime = 2;
inline void TopOfBook::clear_transacttime() {
  transacttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_transacttime() const {
  return transacttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::transacttime() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.transactTime)
  return _internal_transacttime();
}
inline void TopOfBook::_internal_set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transacttime_ = value;
}
inline void TopOfBook::set_transacttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.transactTime)
}

// uint64 bidPrice = 3;
inline void TopOfBook::clear_bidprice() {
  bidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_bidprice() const {
  return bidprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::bidprice() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.bidPrice)
  return _internal_bidprice();
}
inline void TopOfBook::_internal_set_bidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bidprice_ = value;
}
inline void TopOfBook::set_bidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bidprice(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.bidPrice)
}

// uint64 bidQuantity = 4;
inline void TopOfBook::clear_bidquantity() {
  bidquantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_bidquantity() const {
  return bidquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::bidquantity() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.bidQuantity)
  return _internal_bidquantity();
}
inline void TopOfBook::_internal_set_bidquantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bidquantity_ = value;
}
inline void TopOfBook::set_bidquantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bidquantity(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.bidQuantity)
}

// uint64 askPrice = 5;
inline void TopOfBook::clear_askprice() {
  askprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_askprice() const {
  return askprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::askprice() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.askPrice)
  return _internal_askprice();
}
inline void TopOfBook::_internal_set_askprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  askprice_ = value;
}
inline void TopOfBook::set_askprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_askprice(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.askPrice)
}

// uint64 askQuantity = 6;
inline void TopOfBook::clear_askquantity() {
  askquantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_askquantity() const {
  return askquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::askquantity() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.askQuantity)
  return _internal_askquantity();
}
inline void TopOfBook::_internal_set_askquantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  askquantity_ = value;
}
inline void TopOfBook::set_askquantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_askquantity(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.askQuantity)
}

// uint64 lastPrice = 7;
inline void TopOfBook::clear_lastprice() {
  lastprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_lastprice() const {
  return lastprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::lastprice() const {
  // @@protoc_insertion_point(field_get:md.TopOfBook.lastPrice)
  return _internal_lastprice();
}
inline void TopOfBook::_internal_set_lastprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastprice_ = value;
}
inline void TopOfBook::set_lastprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastprice(value);
  // @@protoc_insertion_point(field_set:md.TopOfBook.lastPrice)
}

// -------------------------------------------------------------------

// TopOfBooks

// repeated .md.TopOfBook tops = 1;
inline int TopOfBooks::_internal_tops_size() const {
  return tops_.size();
}
inline int TopOfBooks::tops_size() const {
  return _internal_tops_size();
}
inline void TopOfBooks::clear_tops() {
  tops_.Clear();
}
inline ::md::TopOfBook* TopOfBooks::mutable_tops(int index) {
  // @@protoc_insertion_point(field_mutable:md.TopOfBooks.tops)
  return tops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::TopOfBook >*
TopOfBooks::mutable_tops() {
  // @@protoc_insertion_point(field_mutable_list:md.TopOfBooks.tops)
  return &tops_;
}
inline const ::md::TopOfBook& TopOfBooks::_internal_tops(int index) const {
  return tops_.Get(index);
}
inline const ::md::TopOfBook& TopOfBooks::tops(int index) const {
  // @@protoc_insertion_point(field_get:md.TopOfBooks.tops)
  return _internal_tops(index);
}
inline ::md::TopOfBook* TopOfBooks::_internal_add_tops() {
  return tops_.Add();
}
inline ::md::TopOfBook* TopOfBooks::add_tops() {
  // @@protoc_insertion_point(field_add:md.TopOfBooks.tops)
  return _internal_add_tops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::md::TopOfBook >&
TopOfBooks::tops() const {
  // @@protoc_insertion_point(field_list:md.TopOfBooks.tops)
  return tops_;
}

// -------------------------------------------------------------------

// ClientMessage

// .md.Heartbeat heartbeat = 1;
inline bool ClientMessage::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool ClientMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void ClientMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void ClientMessage::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::md::Heartbeat* ClientMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:md.ClientMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::md::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Heartbeat& ClientMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::md::Heartbeat&>(::md::_Heartbeat_default_instance_);
}
inline const ::md::Heartbeat& ClientMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:md.ClientMessage.heartbeat)
  return _internal_heartbeat();
}
inline ::md::Heartbeat* ClientMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.ClientMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::md::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_heartbeat(::md::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.ClientMessage.heartbeat)
}
inline ::md::Heartbeat* ClientMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::md::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::md::Heartbeat* ClientMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:md.ClientMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .md.Config config = 2;
inline bool ClientMessage::_internal_has_config() const {
  return inner_case() == kConfig;
}
inline bool ClientMessage::has_config() const {
  return _internal_has_config();
}
inline void ClientMessage::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void ClientMessage::clear_config() {
  if (_internal_has_config()) {
    if (GetArena() == nullptr) {
      delete inner_.config_;
    }
    clear_has_inner();
  }
}
inline ::md::Config* ClientMessage::release_config() {
  // @@protoc_insertion_point(field_release:md.ClientMessage.config)
  if (_internal_has_config()) {
    clear_has_inner();
      ::md::Config* temp = inner_.config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::md::Config& ClientMessage::_internal_config() const {
  return _internal_has_config()
      ? *inner_.config_
      : reinterpret_cast< ::md::Config&>(::md::_Config_default_instance_);
}
inline const ::md::Config& ClientMessage::config() const {
  // @@protoc_insertion_point(field_get:md.ClientMessage.config)
  return _internal_config();
}
inline ::md::Config* ClientMessage::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:md.ClientMessage.config)
  if (_internal_has_config()) {
    clear_has_inner();
    ::md::Config* temp = inner_.config_;
    inner_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_config(::md::Config* config) {
  clear_inner();
  if (config) {
    set_has_config();
    inner_.config_ = config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:md.ClientMessage.config)
}
inline ::md::Config* ClientMessage::_internal_mutable_config() {
  if (!_internal_has_config()) {
    clear_inner();
    set_has_config();
    inner_.config_ = CreateMaybeMessage< ::md::Config >(GetArena());
  }
  return inner_.config_;
}
inline ::md::Config* ClientMessage::mutable_config() {
  // @@protoc_insertion_point(field_mutable:md.ClientMessage.config)
  return _internal_mutable_config();
}

inline bool ClientMessage::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void ClientMessage::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline ClientMessage::InnerCase ClientMessage::inner_case() const {
  return ClientMessage::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Config

// bool mbp = 1;
inline void Config::clear_mbp() {
  mbp_ = false;
}
inline bool Config::_internal_mbp() const {
  return mbp_;
}
inline bool Config::mbp() const {
  // @@protoc_insertion_point(field_get:md.Config.mbp)
  return _internal_mbp();
}
inline void Config::_internal_set_mbp(bool value) {
  
  mbp_ = value;
}
inline void Config::set_mbp(bool value) {
  _internal_set_mbp(value);
  // @@protoc_insertion_point(field_set:md.Config.mbp)
}

// bool mbo = 2;
inline void Config::clear_mbo() {
  mbo_ = false;
}
inline bool Config::_internal_mbo() const {
  return mbo_;
}
inline bool Config::mbo() const {
  // @@protoc_insertion_point(field_get:md.Config.mbo)
  return _internal_mbo();
}
inline void Config::_internal_set_mbo(bool value) {
  
  mbo_ = value;
}
inline void Config::set_mbo(bool value) {
  _internal_set_mbo(value);
  // @@protoc_insertion_point(field_set:md.Config.mbo)
}

// bool trades = 3;
inline void Config::clear_trades() {
  trades_ = false;
}
inline bool Config::_internal_trades() const {
  return trades_;
}
inline bool Config::trades() const {
  // @@protoc_insertion_point(field_get:md.Config.trades)
  return _internal_trades();
}
inline void Config::_internal_set_trades(bool value) {
  
  trades_ = value;
}
inline void Config::set_trades(bool value) {
  _internal_set_trades(value);
  // @@protoc_insertion_point(field_set:md.Config.trades)
}

// bool summary = 4;
inline void Config::clear_summary() {
  summary_ = false;
}
inline bool Config::_internal_summary() const {
  return summary_;
}
inline bool Config::summary() const {
  // @@protoc_insertion_point(field_get:md.Config.summary)
  return _internal_summary();
}
inline void Config::_internal_set_summary(bool value) {
  
  summary_ = value;
}
inline void Config::set_summary(bool value) {
  _internal_set_summary(value);
  // @@protoc_insertion_point(field_set:md.Config.summary)
}

// repeated .md.KlineInterval klines = 5;
inline int Config::_internal_klines_size() const {
  return klines_.size();
}
inline int Config::klines_size() const {
  return _internal_klines_size();
}
inline void Config::clear_klines() {
  klines_.Clear();
}
inline ::md::KlineInterval Config::_internal_klines(int index) const {
  return static_cast< ::md::KlineInterval >(klines_.Get(index));
}
inline ::md::KlineInterval Config::klines(int index) const {
  // @@protoc_insertion_point(field_get:md.Config.klines)
  return _internal_klines(index);
}
inline void Config::set_klines(int index, ::md::KlineInterval value) {
  klines_.Set(index, value);
  // @@protoc_insertion_point(field_set:md.Config.klines)
}
inline void Config::_internal_add_klines(::md::KlineInterval value) {
  klines_.Add(value);
}
inline void Config::add_klines(::md::KlineInterval value) {
  // @@protoc_insertion_point(field_add:md.Config.klines)
  _internal_add_klines(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Config::klines() const {
  // @@protoc_insertion_point(field_list:md.Config.klines)
  return klines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Config::_internal_mutable_klines() {
  return &klines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Config::mutable_klines() {
  // @@protoc_insertion_point(field_mutable_list:md.Config.klines)
  return _internal_mutable_klines();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace md

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::md::MarketByPriceDiff_DiffOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::md::MarketByPriceDiff_DiffOp>() {
  return ::md::MarketByPriceDiff_DiffOp_descriptor();
}
template <> struct is_proto_enum< ::md::MarketByOrderDiff_OrderOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::md::MarketByOrderDiff_OrderOp>() {
  return ::md::MarketByOrderDiff_OrderOp_descriptor();
}
template <> struct is_proto_enum< ::md::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::md::Side>() {
  return ::md::Side_descriptor();
}
template <> struct is_proto_enum< ::md::KlineInterval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::md::KlineInterval>() {
  return ::md::KlineInterval_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
