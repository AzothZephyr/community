// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace trade {
constexpr Credentials::Credentials(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accesskeyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(PROTOBUF_ULONGLONG(0)){}
struct CredentialsDefaultTypeInternal {
  constexpr CredentialsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CredentialsDefaultTypeInternal() {}
  union {
    Credentials _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CredentialsDefaultTypeInternal _Credentials_default_instance_;
constexpr OrderRequest::OrderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct OrderRequestDefaultTypeInternal {
  constexpr OrderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderRequestDefaultTypeInternal() {}
  union {
    OrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
constexpr NewOrder::NewOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , timeinforce_(0)

  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , ordertype_(0)

  , selftradeprevention_(0)

  , postonly_(0)
{}
struct NewOrderDefaultTypeInternal {
  constexpr NewOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewOrderDefaultTypeInternal() {}
  union {
    NewOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewOrderDefaultTypeInternal _NewOrder_default_instance_;
constexpr CancelOrder::CancelOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marketid_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0)){}
struct CancelOrderDefaultTypeInternal {
  constexpr CancelOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelOrderDefaultTypeInternal() {}
  union {
    CancelOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
constexpr ModifyOrder::ModifyOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marketid_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , newprice_(PROTOBUF_ULONGLONG(0))
  , newquantity_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , selftradeprevention_(0)

  , postonly_(0)
{}
struct ModifyOrderDefaultTypeInternal {
  constexpr ModifyOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyOrderDefaultTypeInternal() {}
  union {
    ModifyOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyOrderDefaultTypeInternal _ModifyOrder_default_instance_;
constexpr MassCancel::MassCancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subaccountid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , side_(0)
{}
struct MassCancelDefaultTypeInternal {
  constexpr MassCancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MassCancelDefaultTypeInternal() {}
  union {
    MassCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MassCancelDefaultTypeInternal _MassCancel_default_instance_;
constexpr Heartbeat::Heartbeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0))
  , timestamp_(PROTOBUF_ULONGLONG(0)){}
struct HeartbeatDefaultTypeInternal {
  constexpr HeartbeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
constexpr OrderResponse::OrderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct OrderResponseDefaultTypeInternal {
  constexpr OrderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderResponseDefaultTypeInternal() {}
  union {
    OrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
constexpr NewOrderAck::NewOrderAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , exchangeorderid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , timeinforce_(0)

  , transacttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , ordertype_(0)
{}
struct NewOrderAckDefaultTypeInternal {
  constexpr NewOrderAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewOrderAckDefaultTypeInternal() {}
  union {
    NewOrderAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewOrderAckDefaultTypeInternal _NewOrderAck_default_instance_;
constexpr CancelOrderAck::CancelOrderAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , reason_(0)
{}
struct CancelOrderAckDefaultTypeInternal {
  constexpr CancelOrderAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelOrderAckDefaultTypeInternal() {}
  union {
    CancelOrderAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelOrderAckDefaultTypeInternal _CancelOrderAck_default_instance_;
constexpr ModifyOrderAck::ModifyOrderAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , newquantity_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0)){}
struct ModifyOrderAckDefaultTypeInternal {
  constexpr ModifyOrderAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyOrderAckDefaultTypeInternal() {}
  union {
    ModifyOrderAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyOrderAckDefaultTypeInternal _ModifyOrderAck_default_instance_;
constexpr MassCancelAck::MassCancelAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , reason_(0)

  , totalaffectedorders_(0u){}
struct MassCancelAckDefaultTypeInternal {
  constexpr MassCancelAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MassCancelAckDefaultTypeInternal() {}
  union {
    MassCancelAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MassCancelAckDefaultTypeInternal _MassCancelAck_default_instance_;
constexpr NewOrderReject::NewOrderReject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0))
  , reason_(0)

  , side_(0)

  , quantity_(PROTOBUF_ULONGLONG(0))
  , timeinforce_(0)

  , ordertype_(0)
{}
struct NewOrderRejectDefaultTypeInternal {
  constexpr NewOrderRejectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewOrderRejectDefaultTypeInternal() {}
  union {
    NewOrderReject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewOrderRejectDefaultTypeInternal _NewOrderReject_default_instance_;
constexpr CancelOrderReject::CancelOrderReject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , reason_(0)
{}
struct CancelOrderRejectDefaultTypeInternal {
  constexpr CancelOrderRejectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelOrderRejectDefaultTypeInternal() {}
  union {
    CancelOrderReject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelOrderRejectDefaultTypeInternal _CancelOrderReject_default_instance_;
constexpr ModifyOrderReject::ModifyOrderReject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , requestid_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , reason_(0)
{}
struct ModifyOrderRejectDefaultTypeInternal {
  constexpr ModifyOrderRejectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyOrderRejectDefaultTypeInternal() {}
  union {
    ModifyOrderReject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyOrderRejectDefaultTypeInternal _ModifyOrderReject_default_instance_;
constexpr Fill::Fill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgseqnum_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , clientorderid_(PROTOBUF_ULONGLONG(0))
  , exchangeorderid_(PROTOBUF_ULONGLONG(0))
  , fillprice_(PROTOBUF_ULONGLONG(0))
  , fillquantity_(PROTOBUF_ULONGLONG(0))
  , leavesquantity_(PROTOBUF_ULONGLONG(0))
  , transacttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0)){}
struct FillDefaultTypeInternal {
  constexpr FillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FillDefaultTypeInternal() {}
  union {
    Fill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FillDefaultTypeInternal _Fill_default_instance_;
constexpr AssetPosition::AssetPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_(nullptr)
  , available_(nullptr)
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , assetid_(PROTOBUF_ULONGLONG(0)){}
struct AssetPositionDefaultTypeInternal {
  constexpr AssetPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetPositionDefaultTypeInternal() {}
  union {
    AssetPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetPositionDefaultTypeInternal _AssetPosition_default_instance_;
constexpr RawUnits::RawUnits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word0_(PROTOBUF_ULONGLONG(0))
  , word1_(PROTOBUF_ULONGLONG(0))
  , word2_(PROTOBUF_ULONGLONG(0))
  , word3_(PROTOBUF_ULONGLONG(0)){}
struct RawUnitsDefaultTypeInternal {
  constexpr RawUnitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawUnitsDefaultTypeInternal() {}
  union {
    RawUnits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawUnitsDefaultTypeInternal _RawUnits_default_instance_;
constexpr Bootstrap::Bootstrap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BootstrapDefaultTypeInternal {
  constexpr BootstrapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BootstrapDefaultTypeInternal() {}
  union {
    Bootstrap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
constexpr RestingOrders::RestingOrders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_(){}
struct RestingOrdersDefaultTypeInternal {
  constexpr RestingOrdersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestingOrdersDefaultTypeInternal() {}
  union {
    RestingOrders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestingOrdersDefaultTypeInternal _RestingOrders_default_instance_;
constexpr AssetPositions::AssetPositions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positions_(){}
struct AssetPositionsDefaultTypeInternal {
  constexpr AssetPositionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetPositionsDefaultTypeInternal() {}
  union {
    AssetPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetPositionsDefaultTypeInternal _AssetPositions_default_instance_;
constexpr Done::Done(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latesttransacttime_(PROTOBUF_ULONGLONG(0)){}
struct DoneDefaultTypeInternal {
  constexpr DoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoneDefaultTypeInternal() {}
  union {
    Done _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoneDefaultTypeInternal _Done_default_instance_;
constexpr RestingOrder::RestingOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientorderid_(PROTOBUF_ULONGLONG(0))
  , exchangeorderid_(PROTOBUF_ULONGLONG(0))
  , marketid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0))
  , originalquantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , timeinforce_(0)

  , remainingquantity_(PROTOBUF_ULONGLONG(0))
  , resttime_(PROTOBUF_ULONGLONG(0))
  , subaccountid_(PROTOBUF_ULONGLONG(0))
  , ordertype_(0)
{}
struct RestingOrderDefaultTypeInternal {
  constexpr RestingOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestingOrderDefaultTypeInternal() {}
  union {
    RestingOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestingOrderDefaultTypeInternal _RestingOrder_default_instance_;
}  // namespace trade
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trade_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trade_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trade_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trade_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::Credentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::Credentials, accesskeyid_),
  PROTOBUF_FIELD_OFFSET(::trade::Credentials, signature_),
  PROTOBUF_FIELD_OFFSET(::trade::Credentials, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::OrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::trade::OrderRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::trade::OrderRequest, inner_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, price_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, quantity_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, side_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, selftradeprevention_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrder, postonly_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrder, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrder, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrder, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrder, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, newprice_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, newquantity_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, selftradeprevention_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrder, postonly_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::MassCancel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MassCancel, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancel, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancel, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancel, side_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::Heartbeat, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::Heartbeat, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::OrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::trade::OrderResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::trade::OrderResponse, inner_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, exchangeorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, price_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, quantity_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, side_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, ordertype_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderAck, subaccountid_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, reason_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderAck, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, newquantity_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderAck, price_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, reason_),
  PROTOBUF_FIELD_OFFSET(::trade::MassCancelAck, totalaffectedorders_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, reason_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, price_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, quantity_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, side_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::trade::NewOrderReject, ordertype_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, reason_),
  PROTOBUF_FIELD_OFFSET(::trade::CancelOrderReject, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, requestid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, reason_),
  PROTOBUF_FIELD_OFFSET(::trade::ModifyOrderReject, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::Fill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::Fill, msgseqnum_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, exchangeorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, fillprice_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, fillquantity_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, leavesquantity_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, transacttime_),
  PROTOBUF_FIELD_OFFSET(::trade::Fill, subaccountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::AssetPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::AssetPosition, subaccountid_),
  PROTOBUF_FIELD_OFFSET(::trade::AssetPosition, assetid_),
  PROTOBUF_FIELD_OFFSET(::trade::AssetPosition, total_),
  PROTOBUF_FIELD_OFFSET(::trade::AssetPosition, available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::RawUnits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::RawUnits, word0_),
  PROTOBUF_FIELD_OFFSET(::trade::RawUnits, word1_),
  PROTOBUF_FIELD_OFFSET(::trade::RawUnits, word2_),
  PROTOBUF_FIELD_OFFSET(::trade::RawUnits, word3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::Bootstrap, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::trade::Bootstrap, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::trade::Bootstrap, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrders, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::AssetPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::AssetPositions, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::Done, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::Done, latesttransacttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, exchangeorderid_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, marketid_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, price_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, originalquantity_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, side_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, remainingquantity_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, resttime_),
  PROTOBUF_FIELD_OFFSET(::trade::RestingOrder, subaccountid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trade::Credentials)},
  { 8, -1, sizeof(::trade::OrderRequest)},
  { 19, 35, sizeof(::trade::NewOrder)},
  { 46, -1, sizeof(::trade::CancelOrder)},
  { 55, 68, sizeof(::trade::ModifyOrder)},
  { 76, 85, sizeof(::trade::MassCancel)},
  { 89, -1, sizeof(::trade::Heartbeat)},
  { 96, -1, sizeof(::trade::OrderResponse)},
  { 112, 129, sizeof(::trade::NewOrderAck)},
  { 141, -1, sizeof(::trade::CancelOrderAck)},
  { 153, -1, sizeof(::trade::ModifyOrderAck)},
  { 166, 177, sizeof(::trade::MassCancelAck)},
  { 183, 200, sizeof(::trade::NewOrderReject)},
  { 212, -1, sizeof(::trade::CancelOrderReject)},
  { 224, -1, sizeof(::trade::ModifyOrderReject)},
  { 236, -1, sizeof(::trade::Fill)},
  { 250, -1, sizeof(::trade::AssetPosition)},
  { 259, -1, sizeof(::trade::RawUnits)},
  { 268, -1, sizeof(::trade::Bootstrap)},
  { 277, -1, sizeof(::trade::RestingOrders)},
  { 283, -1, sizeof(::trade::AssetPositions)},
  { 289, -1, sizeof(::trade::Done)},
  { 295, -1, sizeof(::trade::RestingOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_Credentials_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_OrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_NewOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_CancelOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_ModifyOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MassCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_OrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_NewOrderAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_CancelOrderAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_ModifyOrderAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MassCancelAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_NewOrderReject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_CancelOrderReject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_ModifyOrderReject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_Fill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_AssetPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_RawUnits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_Bootstrap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_RestingOrders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_AssetPositions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_Done_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_RestingOrder_default_instance_),
};

const char descriptor_table_protodef_trade_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013trade.proto\022\005trade\"H\n\013Credentials\022\023\n\013a"
  "ccessKeyId\030\001 \001(\t\022\021\n\tsignature\030\002 \001(\t\022\021\n\tt"
  "imestamp\030\003 \001(\004\"\313\001\n\014OrderRequest\022\036\n\003new\030\001"
  " \001(\0132\017.trade.NewOrderH\000\022$\n\006cancel\030\002 \001(\0132"
  "\022.trade.CancelOrderH\000\022$\n\006modify\030\003 \001(\0132\022."
  "trade.ModifyOrderH\000\022%\n\theartbeat\030\004 \001(\0132\020"
  ".trade.HeartbeatH\000\022\037\n\002mc\030\005 \001(\0132\021.trade.M"
  "assCancelH\000B\007\n\005inner\"\356\002\n\010NewOrder\022\025\n\rcli"
  "entOrderId\030\001 \001(\004\022\021\n\trequestId\030\002 \001(\004\022\020\n\010m"
  "arketId\030\003 \001(\004\022\022\n\005price\030\004 \001(\004H\000\210\001\001\022\020\n\010qua"
  "ntity\030\005 \001(\004\022\031\n\004side\030\006 \001(\0162\013.trade.Side\022\'"
  "\n\013timeInForce\030\007 \001(\0162\022.trade.TimeInForce\022"
  "#\n\torderType\030\010 \001(\0162\020.trade.OrderType\022\024\n\014"
  "subaccountId\030\t \001(\004\022<\n\023selfTradePreventio"
  "n\030\n \001(\0162\032.trade.SelfTradePreventionH\001\210\001\001"
  "\022!\n\010postOnly\030\013 \001(\0162\017.trade.PostOnlyB\010\n\006_"
  "priceB\026\n\024_selfTradePrevention\"_\n\013CancelO"
  "rder\022\020\n\010marketId\030\001 \001(\004\022\025\n\rclientOrderId\030"
  "\002 \001(\004\022\021\n\trequestId\030\003 \001(\004\022\024\n\014subaccountId"
  "\030\004 \001(\004\"\377\001\n\013ModifyOrder\022\020\n\010marketId\030\001 \001(\004"
  "\022\025\n\rclientOrderId\030\002 \001(\004\022\021\n\trequestId\030\003 \001"
  "(\004\022\020\n\010newPrice\030\004 \001(\004\022\023\n\013newQuantity\030\005 \001("
  "\004\022\024\n\014subaccountId\030\006 \001(\004\022<\n\023selfTradePrev"
  "ention\030\007 \001(\0162\032.trade.SelfTradePrevention"
  "H\000\210\001\001\022!\n\010postOnly\030\010 \001(\0162\017.trade.PostOnly"
  "B\026\n\024_selfTradePrevention\"\202\001\n\nMassCancel\022"
  "\024\n\014subaccountId\030\001 \001(\004\022\021\n\trequestId\030\002 \001(\004"
  "\022\025\n\010marketId\030\003 \001(\004H\000\210\001\001\022\036\n\004side\030\004 \001(\0162\013."
  "trade.SideH\001\210\001\001B\013\n\t_marketIdB\007\n\005_side\"1\n"
  "\tHeartbeat\022\021\n\trequestId\030\001 \001(\004\022\021\n\ttimesta"
  "mp\030\002 \001(\004\"\303\003\n\rOrderResponse\022$\n\006newAck\030\001 \001"
  "(\0132\022.trade.NewOrderAckH\000\022*\n\tcancelAck\030\002 "
  "\001(\0132\025.trade.CancelOrderAckH\000\022*\n\tmodifyAc"
  "k\030\003 \001(\0132\025.trade.ModifyOrderAckH\000\022*\n\tnewR"
  "eject\030\004 \001(\0132\025.trade.NewOrderRejectH\000\0220\n\014"
  "cancelReject\030\005 \001(\0132\030.trade.CancelOrderRe"
  "jectH\000\0220\n\014modifyReject\030\006 \001(\0132\030.trade.Mod"
  "ifyOrderRejectH\000\022\033\n\004fill\030\007 \001(\0132\013.trade.F"
  "illH\000\022%\n\theartbeat\030\010 \001(\0132\020.trade.Heartbe"
  "atH\000\022(\n\010position\030\t \001(\0132\024.trade.AssetPosi"
  "tionH\000\022-\n\rmassCancelAck\030\n \001(\0132\024.trade.Ma"
  "ssCancelAckH\000B\007\n\005inner\"\272\002\n\013NewOrderAck\022\021"
  "\n\tmsgSeqNum\030\001 \001(\004\022\025\n\rclientOrderId\030\002 \001(\004"
  "\022\021\n\trequestId\030\003 \001(\004\022\027\n\017exchangeOrderId\030\004"
  " \001(\004\022\020\n\010marketId\030\005 \001(\004\022\022\n\005price\030\006 \001(\004H\000\210"
  "\001\001\022\020\n\010quantity\030\007 \001(\004\022\031\n\004side\030\010 \001(\0162\013.tra"
  "de.Side\022\'\n\013timeInForce\030\t \001(\0162\022.trade.Tim"
  "eInForce\022#\n\torderType\030\n \001(\0162\020.trade.Orde"
  "rType\022\024\n\014transactTime\030\013 \001(\004\022\024\n\014subaccoun"
  "tId\030\014 \001(\004B\010\n\006_price\"\263\002\n\016CancelOrderAck\022\021"
  "\n\tmsgSeqNum\030\001 \001(\004\022\025\n\rclientOrderId\030\002 \001(\004"
  "\022\021\n\trequestId\030\003 \001(\004\022\024\n\014transactTime\030\004 \001("
  "\004\022\024\n\014subaccountId\030\005 \001(\004\022,\n\006reason\030\006 \001(\0162"
  "\034.trade.CancelOrderAck.Reason\022\020\n\010marketI"
  "d\030\007 \001(\004\"x\n\006Reason\022\020\n\014UNCLASSIFIED\020\000\022\016\n\nD"
  "ISCONNECT\020\001\022\r\n\tREQUESTED\020\002\022\007\n\003IOC\020\003\022\017\n\013S"
  "TP_RESTING\020\004\022\022\n\016STP_AGGRESSING\020\005\022\017\n\013MASS"
  "_CANCEL\020\006\"\257\001\n\016ModifyOrderAck\022\021\n\tmsgSeqNu"
  "m\030\001 \001(\004\022\025\n\rclientOrderId\030\002 \001(\004\022\021\n\treques"
  "tId\030\003 \001(\004\022\024\n\014transactTime\030\004 \001(\004\022\023\n\013newQu"
  "antity\030\005 \001(\004\022\024\n\014subaccountId\030\006 \001(\004\022\020\n\010ma"
  "rketId\030\007 \001(\004\022\r\n\005price\030\010 \001(\004\"\200\002\n\rMassCanc"
  "elAck\022\021\n\tmsgSeqNum\030\001 \001(\004\022\024\n\014subaccountId"
  "\030\002 \001(\004\022\021\n\trequestId\030\003 \001(\004\022\024\n\014transactTim"
  "e\030\004 \001(\004\0220\n\006reason\030\006 \001(\0162\033.trade.MassCanc"
  "elAck.ReasonH\000\210\001\001\022\033\n\023totalAffectedOrders"
  "\030\007 \001(\r\"C\n\006Reason\022\020\n\014UNCLASSIFIED\020\000\022\025\n\021IN"
  "VALID_MARKET_ID\020\001\022\020\n\014INVALID_SIDE\020\002B\t\n\007_"
  "reason\"\221\006\n\016NewOrderReject\022\021\n\tmsgSeqNum\030\001"
  " \001(\004\022\025\n\rclientOrderId\030\002 \001(\004\022\021\n\trequestId"
  "\030\003 \001(\004\022\024\n\014transactTime\030\004 \001(\004\022\024\n\014subaccou"
  "ntId\030\005 \001(\004\022,\n\006reason\030\006 \001(\0162\034.trade.NewOr"
  "derReject.Reason\022\020\n\010marketId\030\007 \001(\004\022\022\n\005pr"
  "ice\030\010 \001(\004H\000\210\001\001\022\020\n\010quantity\030\t \001(\004\022\031\n\004side"
  "\030\n \001(\0162\013.trade.Side\022\'\n\013timeInForce\030\013 \001(\016"
  "2\022.trade.TimeInForce\022#\n\torderType\030\014 \001(\0162"
  "\020.trade.OrderType\"\274\003\n\006Reason\022\020\n\014UNCLASSI"
  "FIED\020\000\022\024\n\020INVALID_QUANTITY\020\001\022\025\n\021INVALID_"
  "MARKET_ID\020\002\022\026\n\022DUPLICATE_ORDER_ID\020\003\022\020\n\014I"
  "NVALID_SIDE\020\004\022\031\n\025INVALID_TIME_IN_FORCE\020\005"
  "\022\026\n\022INVALID_ORDER_TYPE\020\006\022\025\n\021INVALID_POST"
  "_ONLY\020\007\022!\n\035INVALID_SELF_TRADE_PREVENTION"
  "\020\010\022\022\n\016UNKNOWN_TRADER\020\t\022\033\n\027PRICE_WITH_MAR"
  "KET_ORDER\020\n\022\037\n\033POST_ONLY_WITH_MARKET_ORD"
  "ER\020\013\022\036\n\032POST_ONLY_WITH_INVALID_TIF\020\014\022\032\n\026"
  "EXCEEDED_SPOT_POSITION\020\r\022\033\n\027NO_OPPOSING_"
  "LIMIT_ORDER\020\016\022\031\n\025POST_ONLY_WOULD_TRADE\020\017"
  "\022\026\n\022DID_NOT_FULLY_FILL\020\020B\010\n\006_price\"\207\002\n\021C"
  "ancelOrderReject\022\021\n\tmsgSeqNum\030\001 \001(\004\022\025\n\rc"
  "lientOrderId\030\002 \001(\004\022\021\n\trequestId\030\003 \001(\004\022\024\n"
  "\014transactTime\030\004 \001(\004\022\024\n\014subaccountId\030\005 \001("
  "\004\022/\n\006reason\030\006 \001(\0162\037.trade.CancelOrderRej"
  "ect.Reason\022\020\n\010marketId\030\007 \001(\004\"F\n\006Reason\022\020"
  "\n\014UNCLASSIFIED\020\000\022\025\n\021INVALID_MARKET_ID\020\001\022"
  "\023\n\017ORDER_NOT_FOUND\020\002\"\264\003\n\021ModifyOrderReje"
  "ct\022\021\n\tmsgSeqNum\030\001 \001(\004\022\025\n\rclientOrderId\030\002"
  " \001(\004\022\021\n\trequestId\030\003 \001(\004\022\024\n\014transactTime\030"
  "\004 \001(\004\022\024\n\014subaccountId\030\005 \001(\004\022/\n\006reason\030\006 "
  "\001(\0162\037.trade.ModifyOrderReject.Reason\022\020\n\010"
  "marketId\030\007 \001(\004\"\362\001\n\006Reason\022\020\n\014UNCLASSIFIE"
  "D\020\000\022\024\n\020INVALID_QUANTITY\020\001\022\025\n\021INVALID_MAR"
  "KET_ID\020\002\022\023\n\017ORDER_NOT_FOUND\020\003\022\017\n\013INVALID"
  "_IFM\020\004\022\025\n\021INVALID_POST_ONLY\020\005\022!\n\035INVALID"
  "_SELF_TRADE_PREVENTION\020\006\022\022\n\016UNKNOWN_TRAD"
  "ER\020\007\022\032\n\026EXCEEDED_SPOT_POSITION\020\010\022\031\n\025POST"
  "_ONLY_WOULD_TRADE\020\t\"\310\001\n\004Fill\022\021\n\tmsgSeqNu"
  "m\030\001 \001(\004\022\020\n\010marketId\030\002 \001(\004\022\025\n\rclientOrder"
  "Id\030\003 \001(\004\022\027\n\017exchangeOrderId\030\004 \001(\004\022\021\n\tfil"
  "lPrice\030\005 \001(\004\022\024\n\014fillQuantity\030\006 \001(\004\022\026\n\016le"
  "avesQuantity\030\007 \001(\004\022\024\n\014transactTime\030\010 \001(\004"
  "\022\024\n\014subaccountId\030\t \001(\004\"z\n\rAssetPosition\022"
  "\024\n\014subaccountId\030\001 \001(\004\022\017\n\007assetId\030\002 \001(\004\022\036"
  "\n\005total\030\003 \001(\0132\017.trade.RawUnits\022\"\n\tavaila"
  "ble\030\004 \001(\0132\017.trade.RawUnits\"F\n\010RawUnits\022\r"
  "\n\005word0\030\001 \001(\004\022\r\n\005word1\030\002 \001(\004\022\r\n\005word2\030\003 "
  "\001(\004\022\r\n\005word3\030\005 \001(\004\"\205\001\n\tBootstrap\022\033\n\004done"
  "\030\001 \001(\0132\013.trade.DoneH\000\022\'\n\007resting\030\002 \001(\0132\024"
  ".trade.RestingOrdersH\000\022)\n\010position\030\003 \001(\013"
  "2\025.trade.AssetPositionsH\000B\007\n\005inner\"4\n\rRe"
  "stingOrders\022#\n\006orders\030\001 \003(\0132\023.trade.Rest"
  "ingOrder\"9\n\016AssetPositions\022\'\n\tpositions\030"
  "\001 \003(\0132\024.trade.AssetPosition\"\"\n\004Done\022\032\n\022l"
  "atestTransactTime\030\001 \001(\004\"\245\002\n\014RestingOrder"
  "\022\025\n\rclientOrderId\030\001 \001(\004\022\027\n\017exchangeOrder"
  "Id\030\002 \001(\004\022\020\n\010marketId\030\003 \001(\004\022\r\n\005price\030\004 \001("
  "\004\022\030\n\020originalQuantity\030\005 \001(\004\022\031\n\004side\030\006 \001("
  "\0162\013.trade.Side\022\'\n\013timeInForce\030\007 \001(\0162\022.tr"
  "ade.TimeInForce\022#\n\torderType\030\010 \001(\0162\020.tra"
  "de.OrderType\022\031\n\021remainingQuantity\030\t \001(\004\022"
  "\020\n\010restTime\030\n \001(\004\022\024\n\014subaccountId\030\013 \001(\004*"
  "\030\n\004Side\022\007\n\003BID\020\000\022\007\n\003ASK\020\001*N\n\013TimeInForce"
  "\022\027\n\023IMMEDIATE_OR_CANCEL\020\000\022\024\n\020GOOD_FOR_SE"
  "SSION\020\001\022\020\n\014FILL_OR_KILL\020\002*D\n\tOrderType\022\t"
  "\n\005LIMIT\020\000\022\020\n\014MARKET_LIMIT\020\001\022\032\n\026MARKET_WI"
  "TH_PROTECTION\020\002*V\n\023SelfTradePrevention\022\022"
  "\n\016CANCEL_RESTING\020\000\022\025\n\021CANCEL_AGGRESSING\020"
  "\001\022\024\n\020ALLOW_SELF_TRADE\020\002*%\n\010PostOnly\022\014\n\010D"
  "ISABLED\020\000\022\013\n\007ENABLED\020\001B\005Z\003go/b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trade_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto = {
  false, false, 5517, descriptor_table_protodef_trade_2eproto, "trade.proto", 
  &descriptor_table_trade_2eproto_once, nullptr, 0, 23,
  schemas, file_default_instances, TableStruct_trade_2eproto::offsets,
  file_level_metadata_trade_2eproto, file_level_enum_descriptors_trade_2eproto, file_level_service_descriptors_trade_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_trade_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return descriptor_table_trade_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_trade_2eproto(&descriptor_table_trade_2eproto);
namespace trade {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelOrderAck_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[0];
}
bool CancelOrderAck_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CancelOrderAck_Reason CancelOrderAck::UNCLASSIFIED;
constexpr CancelOrderAck_Reason CancelOrderAck::DISCONNECT;
constexpr CancelOrderAck_Reason CancelOrderAck::REQUESTED;
constexpr CancelOrderAck_Reason CancelOrderAck::IOC;
constexpr CancelOrderAck_Reason CancelOrderAck::STP_RESTING;
constexpr CancelOrderAck_Reason CancelOrderAck::STP_AGGRESSING;
constexpr CancelOrderAck_Reason CancelOrderAck::MASS_CANCEL;
constexpr CancelOrderAck_Reason CancelOrderAck::Reason_MIN;
constexpr CancelOrderAck_Reason CancelOrderAck::Reason_MAX;
constexpr int CancelOrderAck::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MassCancelAck_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[1];
}
bool MassCancelAck_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MassCancelAck_Reason MassCancelAck::UNCLASSIFIED;
constexpr MassCancelAck_Reason MassCancelAck::INVALID_MARKET_ID;
constexpr MassCancelAck_Reason MassCancelAck::INVALID_SIDE;
constexpr MassCancelAck_Reason MassCancelAck::Reason_MIN;
constexpr MassCancelAck_Reason MassCancelAck::Reason_MAX;
constexpr int MassCancelAck::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewOrderReject_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[2];
}
bool NewOrderReject_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NewOrderReject_Reason NewOrderReject::UNCLASSIFIED;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_QUANTITY;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_MARKET_ID;
constexpr NewOrderReject_Reason NewOrderReject::DUPLICATE_ORDER_ID;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_SIDE;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_TIME_IN_FORCE;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_ORDER_TYPE;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_POST_ONLY;
constexpr NewOrderReject_Reason NewOrderReject::INVALID_SELF_TRADE_PREVENTION;
constexpr NewOrderReject_Reason NewOrderReject::UNKNOWN_TRADER;
constexpr NewOrderReject_Reason NewOrderReject::PRICE_WITH_MARKET_ORDER;
constexpr NewOrderReject_Reason NewOrderReject::POST_ONLY_WITH_MARKET_ORDER;
constexpr NewOrderReject_Reason NewOrderReject::POST_ONLY_WITH_INVALID_TIF;
constexpr NewOrderReject_Reason NewOrderReject::EXCEEDED_SPOT_POSITION;
constexpr NewOrderReject_Reason NewOrderReject::NO_OPPOSING_LIMIT_ORDER;
constexpr NewOrderReject_Reason NewOrderReject::POST_ONLY_WOULD_TRADE;
constexpr NewOrderReject_Reason NewOrderReject::DID_NOT_FULLY_FILL;
constexpr NewOrderReject_Reason NewOrderReject::Reason_MIN;
constexpr NewOrderReject_Reason NewOrderReject::Reason_MAX;
constexpr int NewOrderReject::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelOrderReject_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[3];
}
bool CancelOrderReject_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CancelOrderReject_Reason CancelOrderReject::UNCLASSIFIED;
constexpr CancelOrderReject_Reason CancelOrderReject::INVALID_MARKET_ID;
constexpr CancelOrderReject_Reason CancelOrderReject::ORDER_NOT_FOUND;
constexpr CancelOrderReject_Reason CancelOrderReject::Reason_MIN;
constexpr CancelOrderReject_Reason CancelOrderReject::Reason_MAX;
constexpr int CancelOrderReject::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModifyOrderReject_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[4];
}
bool ModifyOrderReject_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModifyOrderReject_Reason ModifyOrderReject::UNCLASSIFIED;
constexpr ModifyOrderReject_Reason ModifyOrderReject::INVALID_QUANTITY;
constexpr ModifyOrderReject_Reason ModifyOrderReject::INVALID_MARKET_ID;
constexpr ModifyOrderReject_Reason ModifyOrderReject::ORDER_NOT_FOUND;
constexpr ModifyOrderReject_Reason ModifyOrderReject::INVALID_IFM;
constexpr ModifyOrderReject_Reason ModifyOrderReject::INVALID_POST_ONLY;
constexpr ModifyOrderReject_Reason ModifyOrderReject::INVALID_SELF_TRADE_PREVENTION;
constexpr ModifyOrderReject_Reason ModifyOrderReject::UNKNOWN_TRADER;
constexpr ModifyOrderReject_Reason ModifyOrderReject::EXCEEDED_SPOT_POSITION;
constexpr ModifyOrderReject_Reason ModifyOrderReject::POST_ONLY_WOULD_TRADE;
constexpr ModifyOrderReject_Reason ModifyOrderReject::Reason_MIN;
constexpr ModifyOrderReject_Reason ModifyOrderReject::Reason_MAX;
constexpr int ModifyOrderReject::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[5];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[6];
}
bool TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[7];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelfTradePrevention_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[8];
}
bool SelfTradePrevention_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PostOnly_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[9];
}
bool PostOnly_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Credentials::_Internal {
 public:
};

Credentials::Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.Credentials)
}
Credentials::Credentials(const Credentials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accesskeyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesskeyid().empty()) {
    accesskeyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accesskeyid(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:trade.Credentials)
}

void Credentials::SharedCtor() {
accesskeyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_ = PROTOBUF_ULONGLONG(0);
}

Credentials::~Credentials() {
  // @@protoc_insertion_point(destructor:trade.Credentials)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Credentials::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  accesskeyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Credentials::ArenaDtor(void* object) {
  Credentials* _this = reinterpret_cast< Credentials* >(object);
  (void)_this;
}
void Credentials::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Credentials::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Credentials::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.Credentials)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesskeyid_.ClearToEmpty();
  signature_.ClearToEmpty();
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Credentials::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string accessKeyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_accesskeyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.Credentials.accessKeyId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.Credentials.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Credentials::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.Credentials)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessKeyId = 1;
  if (this->accesskeyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesskeyid().data(), static_cast<int>(this->_internal_accesskeyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.Credentials.accessKeyId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accesskeyid(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.Credentials.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.Credentials)
  return target;
}

size_t Credentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.Credentials)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessKeyId = 1;
  if (this->accesskeyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesskeyid());
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Credentials::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.Credentials)
  GOOGLE_DCHECK_NE(&from, this);
  const Credentials* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Credentials>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.Credentials)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.Credentials)
    MergeFrom(*source);
  }
}

void Credentials::MergeFrom(const Credentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.Credentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accesskeyid().size() > 0) {
    _internal_set_accesskeyid(from._internal_accesskeyid());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Credentials::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.Credentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credentials::CopyFrom(const Credentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.Credentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credentials::IsInitialized() const {
  return true;
}

void Credentials::InternalSwap(Credentials* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accesskeyid_.Swap(&other->accesskeyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Credentials::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderRequest::_Internal {
 public:
  static const ::trade::NewOrder& new_(const OrderRequest* msg);
  static const ::trade::CancelOrder& cancel(const OrderRequest* msg);
  static const ::trade::ModifyOrder& modify(const OrderRequest* msg);
  static const ::trade::Heartbeat& heartbeat(const OrderRequest* msg);
  static const ::trade::MassCancel& mc(const OrderRequest* msg);
};

const ::trade::NewOrder&
OrderRequest::_Internal::new_(const OrderRequest* msg) {
  return *msg->inner_.new__;
}
const ::trade::CancelOrder&
OrderRequest::_Internal::cancel(const OrderRequest* msg) {
  return *msg->inner_.cancel_;
}
const ::trade::ModifyOrder&
OrderRequest::_Internal::modify(const OrderRequest* msg) {
  return *msg->inner_.modify_;
}
const ::trade::Heartbeat&
OrderRequest::_Internal::heartbeat(const OrderRequest* msg) {
  return *msg->inner_.heartbeat_;
}
const ::trade::MassCancel&
OrderRequest::_Internal::mc(const OrderRequest* msg) {
  return *msg->inner_.mc_;
}
void OrderRequest::set_allocated_new_(::trade::NewOrder* new_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (new_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_);
    if (message_arena != submessage_arena) {
      new_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_, submessage_arena);
    }
    set_has_new_();
    inner_.new__ = new_;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderRequest.new)
}
void OrderRequest::set_allocated_cancel(::trade::CancelOrder* cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel);
    if (message_arena != submessage_arena) {
      cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel, submessage_arena);
    }
    set_has_cancel();
    inner_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderRequest.cancel)
}
void OrderRequest::set_allocated_modify(::trade::ModifyOrder* modify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (modify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modify);
    if (message_arena != submessage_arena) {
      modify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify, submessage_arena);
    }
    set_has_modify();
    inner_.modify_ = modify;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderRequest.modify)
}
void OrderRequest::set_allocated_heartbeat(::trade::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderRequest.heartbeat)
}
void OrderRequest::set_allocated_mc(::trade::MassCancel* mc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mc);
    if (message_arena != submessage_arena) {
      mc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mc, submessage_arena);
    }
    set_has_mc();
    inner_.mc_ = mc;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderRequest.mc)
}
OrderRequest::OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.OrderRequest)
}
OrderRequest::OrderRequest(const OrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kNew: {
      _internal_mutable_new_()->::trade::NewOrder::MergeFrom(from._internal_new_());
      break;
    }
    case kCancel: {
      _internal_mutable_cancel()->::trade::CancelOrder::MergeFrom(from._internal_cancel());
      break;
    }
    case kModify: {
      _internal_mutable_modify()->::trade::ModifyOrder::MergeFrom(from._internal_modify());
      break;
    }
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::trade::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kMc: {
      _internal_mutable_mc()->::trade::MassCancel::MergeFrom(from._internal_mc());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trade.OrderRequest)
}

void OrderRequest::SharedCtor() {
clear_has_inner();
}

OrderRequest::~OrderRequest() {
  // @@protoc_insertion_point(destructor:trade.OrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void OrderRequest::ArenaDtor(void* object) {
  OrderRequest* _this = reinterpret_cast< OrderRequest* >(object);
  (void)_this;
}
void OrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderRequest::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:trade.OrderRequest)
  switch (inner_case()) {
    case kNew: {
      if (GetArena() == nullptr) {
        delete inner_.new__;
      }
      break;
    }
    case kCancel: {
      if (GetArena() == nullptr) {
        delete inner_.cancel_;
      }
      break;
    }
    case kModify: {
      if (GetArena() == nullptr) {
        delete inner_.modify_;
      }
      break;
    }
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kMc: {
      if (GetArena() == nullptr) {
        delete inner_.mc_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void OrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.OrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trade.NewOrder new = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.CancelOrder cancel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.ModifyOrder modify = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Heartbeat heartbeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.MassCancel mc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.OrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trade.NewOrder new = 1;
  if (_internal_has_new_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_(this), target, stream);
  }

  // .trade.CancelOrder cancel = 2;
  if (_internal_has_cancel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cancel(this), target, stream);
  }

  // .trade.ModifyOrder modify = 3;
  if (_internal_has_modify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modify(this), target, stream);
  }

  // .trade.Heartbeat heartbeat = 4;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heartbeat(this), target, stream);
  }

  // .trade.MassCancel mc = 5;
  if (_internal_has_mc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.OrderRequest)
  return target;
}

size_t OrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.OrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .trade.NewOrder new = 1;
    case kNew: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.new__);
      break;
    }
    // .trade.CancelOrder cancel = 2;
    case kCancel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.cancel_);
      break;
    }
    // .trade.ModifyOrder modify = 3;
    case kModify: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.modify_);
      break;
    }
    // .trade.Heartbeat heartbeat = 4;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .trade.MassCancel mc = 5;
    case kMc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mc_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.OrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.OrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.OrderRequest)
    MergeFrom(*source);
  }
}

void OrderRequest::MergeFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.OrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kNew: {
      _internal_mutable_new_()->::trade::NewOrder::MergeFrom(from._internal_new_());
      break;
    }
    case kCancel: {
      _internal_mutable_cancel()->::trade::CancelOrder::MergeFrom(from._internal_cancel());
      break;
    }
    case kModify: {
      _internal_mutable_modify()->::trade::ModifyOrder::MergeFrom(from._internal_modify());
      break;
    }
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::trade::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kMc: {
      _internal_mutable_mc()->::trade::MassCancel::MergeFrom(from._internal_mc());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void OrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.OrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderRequest::CopyFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.OrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRequest::IsInitialized() const {
  return true;
}

void OrderRequest::InternalSwap(OrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<NewOrder>()._has_bits_);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selftradeprevention(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NewOrder::NewOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.NewOrder)
}
NewOrder::NewOrder(const NewOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clientorderid_, &from.clientorderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&postonly_) -
    reinterpret_cast<char*>(&clientorderid_)) + sizeof(postonly_));
  // @@protoc_insertion_point(copy_constructor:trade.NewOrder)
}

void NewOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clientorderid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&postonly_) -
    reinterpret_cast<char*>(&clientorderid_)) + sizeof(postonly_));
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:trade.NewOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewOrder::ArenaDtor(void* object) {
  NewOrder* _this = reinterpret_cast< NewOrder* >(object);
  (void)_this;
}
void NewOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.NewOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clientorderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketid_) -
      reinterpret_cast<char*>(&clientorderid_)) + sizeof(marketid_));
  price_ = PROTOBUF_ULONGLONG(0);
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordertype_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(ordertype_));
  selftradeprevention_ = 0;
  postonly_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 clientOrderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Side side = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::trade::Side>(val));
        } else goto handle_unusual;
        continue;
      // .trade.TimeInForce timeInForce = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::trade::TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .trade.OrderType orderType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ordertype(static_cast<::trade::OrderType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.SelfTradePrevention selfTradePrevention = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selftradeprevention(static_cast<::trade::SelfTradePrevention>(val));
        } else goto handle_unusual;
        continue;
      // .trade.PostOnly postOnly = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_postonly(static_cast<::trade::PostOnly>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.NewOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 clientOrderId = 1;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 2;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_requestid(), target);
  }

  // uint64 marketId = 3;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_marketid(), target);
  }

  // uint64 price = 4;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_price(), target);
  }

  // uint64 quantity = 5;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_quantity(), target);
  }

  // .trade.Side side = 6;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_side(), target);
  }

  // .trade.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_timeinforce(), target);
  }

  // .trade.OrderType orderType = 8;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ordertype(), target);
  }

  // uint64 subaccountId = 9;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_subaccountid(), target);
  }

  // .trade.SelfTradePrevention selfTradePrevention = 10;
  if (_internal_has_selftradeprevention()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_selftradeprevention(), target);
  }

  // .trade.PostOnly postOnly = 11;
  if (this->postonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_postonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.NewOrder)
  return target;
}

size_t NewOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.NewOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 clientOrderId = 1;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 2;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 marketId = 3;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 price = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 5;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .trade.Side side = 6;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .trade.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // uint64 subaccountId = 9;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // .trade.OrderType orderType = 8;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  // .trade.SelfTradePrevention selfTradePrevention = 10;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selftradeprevention());
  }

  // .trade.PostOnly postOnly = 11;
  if (this->postonly() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_postonly());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.NewOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.NewOrder)
    MergeFrom(*source);
  }
}

void NewOrder::MergeFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from._internal_has_price()) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from._internal_has_selftradeprevention()) {
    _internal_set_selftradeprevention(from._internal_selftradeprevention());
  }
  if (from.postonly() != 0) {
    _internal_set_postonly(from._internal_postonly());
  }
}

void NewOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrder::CopyFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {
  return true;
}

void NewOrder::InternalSwap(NewOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewOrder, postonly_)
      + sizeof(NewOrder::postonly_)
      - PROTOBUF_FIELD_OFFSET(NewOrder, clientorderid_)>(
          reinterpret_cast<char*>(&clientorderid_),
          reinterpret_cast<char*>(&other->clientorderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelOrder::_Internal {
 public:
};

CancelOrder::CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&marketid_, &from.marketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&subaccountid_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(subaccountid_));
  // @@protoc_insertion_point(copy_constructor:trade.CancelOrder)
}

void CancelOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&marketid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subaccountid_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(subaccountid_));
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:trade.CancelOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelOrder::ArenaDtor(void* object) {
  CancelOrder* _this = reinterpret_cast< CancelOrder* >(object);
  (void)_this;
}
void CancelOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&marketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subaccountid_) -
      reinterpret_cast<char*>(&marketid_)) + sizeof(subaccountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 marketId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 marketId = 1;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_marketid(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 subaccountId = 4;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_subaccountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.CancelOrder)
  return target;
}

size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.CancelOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 marketId = 1;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 subaccountId = 4;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.CancelOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.CancelOrder)
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
}

void CancelOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  return true;
}

void CancelOrder::InternalSwap(CancelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelOrder, subaccountid_)
      + sizeof(CancelOrder::subaccountid_)
      - PROTOBUF_FIELD_OFFSET(CancelOrder, marketid_)>(
          reinterpret_cast<char*>(&marketid_),
          reinterpret_cast<char*>(&other->marketid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModifyOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyOrder>()._has_bits_);
  static void set_has_selftradeprevention(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModifyOrder::ModifyOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.ModifyOrder)
}
ModifyOrder::ModifyOrder(const ModifyOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&marketid_, &from.marketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&postonly_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(postonly_));
  // @@protoc_insertion_point(copy_constructor:trade.ModifyOrder)
}

void ModifyOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&marketid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&postonly_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(postonly_));
}

ModifyOrder::~ModifyOrder() {
  // @@protoc_insertion_point(destructor:trade.ModifyOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModifyOrder::ArenaDtor(void* object) {
  ModifyOrder* _this = reinterpret_cast< ModifyOrder* >(object);
  (void)_this;
}
void ModifyOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.ModifyOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&marketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subaccountid_) -
      reinterpret_cast<char*>(&marketid_)) + sizeof(subaccountid_));
  selftradeprevention_ = 0;
  postonly_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 marketId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 newPrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          newprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 newQuantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          newquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.SelfTradePrevention selfTradePrevention = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selftradeprevention(static_cast<::trade::SelfTradePrevention>(val));
        } else goto handle_unusual;
        continue;
      // .trade.PostOnly postOnly = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_postonly(static_cast<::trade::PostOnly>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.ModifyOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 marketId = 1;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_marketid(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 newPrice = 4;
  if (this->newprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_newprice(), target);
  }

  // uint64 newQuantity = 5;
  if (this->newquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_newquantity(), target);
  }

  // uint64 subaccountId = 6;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_subaccountid(), target);
  }

  // .trade.SelfTradePrevention selfTradePrevention = 7;
  if (_internal_has_selftradeprevention()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_selftradeprevention(), target);
  }

  // .trade.PostOnly postOnly = 8;
  if (this->postonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_postonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.ModifyOrder)
  return target;
}

size_t ModifyOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.ModifyOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 marketId = 1;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 newPrice = 4;
  if (this->newprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newprice());
  }

  // uint64 newQuantity = 5;
  if (this->newquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newquantity());
  }

  // uint64 subaccountId = 6;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // .trade.SelfTradePrevention selfTradePrevention = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selftradeprevention());
  }

  // .trade.PostOnly postOnly = 8;
  if (this->postonly() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_postonly());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.ModifyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.ModifyOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.ModifyOrder)
    MergeFrom(*source);
  }
}

void ModifyOrder::MergeFrom(const ModifyOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.ModifyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.newprice() != 0) {
    _internal_set_newprice(from._internal_newprice());
  }
  if (from.newquantity() != 0) {
    _internal_set_newquantity(from._internal_newquantity());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from._internal_has_selftradeprevention()) {
    _internal_set_selftradeprevention(from._internal_selftradeprevention());
  }
  if (from.postonly() != 0) {
    _internal_set_postonly(from._internal_postonly());
  }
}

void ModifyOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.ModifyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyOrder::CopyFrom(const ModifyOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.ModifyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyOrder::IsInitialized() const {
  return true;
}

void ModifyOrder::InternalSwap(ModifyOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyOrder, postonly_)
      + sizeof(ModifyOrder::postonly_)
      - PROTOBUF_FIELD_OFFSET(ModifyOrder, marketid_)>(
          reinterpret_cast<char*>(&marketid_),
          reinterpret_cast<char*>(&other->marketid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MassCancel::_Internal {
 public:
  using HasBits = decltype(std::declval<MassCancel>()._has_bits_);
  static void set_has_marketid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MassCancel::MassCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.MassCancel)
}
MassCancel::MassCancel(const MassCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&subaccountid_, &from.subaccountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&subaccountid_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:trade.MassCancel)
}

void MassCancel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subaccountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&subaccountid_)) + sizeof(side_));
}

MassCancel::~MassCancel() {
  // @@protoc_insertion_point(destructor:trade.MassCancel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MassCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MassCancel::ArenaDtor(void* object) {
  MassCancel* _this = reinterpret_cast< MassCancel* >(object);
  (void)_this;
}
void MassCancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MassCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MassCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MassCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&subaccountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&subaccountid_)) + sizeof(requestid_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&marketid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&side_) -
        reinterpret_cast<char*>(&marketid_)) + sizeof(side_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MassCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 subaccountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_marketid(&has_bits);
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Side side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::trade::Side>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MassCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MassCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 subaccountId = 1;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_subaccountid(), target);
  }

  // uint64 requestId = 2;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_requestid(), target);
  }

  // uint64 marketId = 3;
  if (_internal_has_marketid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_marketid(), target);
  }

  // .trade.Side side = 4;
  if (_internal_has_side()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MassCancel)
  return target;
}

size_t MassCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MassCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 subaccountId = 1;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 requestId = 2;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // uint64 marketId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_marketid());
    }

    // .trade.Side side = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MassCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MassCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const MassCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MassCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MassCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MassCancel)
    MergeFrom(*source);
  }
}

void MassCancel::MergeFrom(const MassCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MassCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      marketid_ = from.marketid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MassCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MassCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassCancel::CopyFrom(const MassCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MassCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassCancel::IsInitialized() const {
  return true;
}

void MassCancel::InternalSwap(MassCancel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MassCancel, side_)
      + sizeof(MassCancel::side_)
      - PROTOBUF_FIELD_OFFSET(MassCancel, subaccountid_)>(
          reinterpret_cast<char*>(&subaccountid_),
          reinterpret_cast<char*>(&other->subaccountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MassCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:trade.Heartbeat)
}

void Heartbeat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(timestamp_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:trade.Heartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heartbeat::ArenaDtor(void* object) {
  Heartbeat* _this = reinterpret_cast< Heartbeat* >(object);
  (void)_this;
}
void Heartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 requestId = 1;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 requestId = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, timestamp_)
      + sizeof(Heartbeat::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderResponse::_Internal {
 public:
  static const ::trade::NewOrderAck& newack(const OrderResponse* msg);
  static const ::trade::CancelOrderAck& cancelack(const OrderResponse* msg);
  static const ::trade::ModifyOrderAck& modifyack(const OrderResponse* msg);
  static const ::trade::NewOrderReject& newreject(const OrderResponse* msg);
  static const ::trade::CancelOrderReject& cancelreject(const OrderResponse* msg);
  static const ::trade::ModifyOrderReject& modifyreject(const OrderResponse* msg);
  static const ::trade::Fill& fill(const OrderResponse* msg);
  static const ::trade::Heartbeat& heartbeat(const OrderResponse* msg);
  static const ::trade::AssetPosition& position(const OrderResponse* msg);
  static const ::trade::MassCancelAck& masscancelack(const OrderResponse* msg);
};

const ::trade::NewOrderAck&
OrderResponse::_Internal::newack(const OrderResponse* msg) {
  return *msg->inner_.newack_;
}
const ::trade::CancelOrderAck&
OrderResponse::_Internal::cancelack(const OrderResponse* msg) {
  return *msg->inner_.cancelack_;
}
const ::trade::ModifyOrderAck&
OrderResponse::_Internal::modifyack(const OrderResponse* msg) {
  return *msg->inner_.modifyack_;
}
const ::trade::NewOrderReject&
OrderResponse::_Internal::newreject(const OrderResponse* msg) {
  return *msg->inner_.newreject_;
}
const ::trade::CancelOrderReject&
OrderResponse::_Internal::cancelreject(const OrderResponse* msg) {
  return *msg->inner_.cancelreject_;
}
const ::trade::ModifyOrderReject&
OrderResponse::_Internal::modifyreject(const OrderResponse* msg) {
  return *msg->inner_.modifyreject_;
}
const ::trade::Fill&
OrderResponse::_Internal::fill(const OrderResponse* msg) {
  return *msg->inner_.fill_;
}
const ::trade::Heartbeat&
OrderResponse::_Internal::heartbeat(const OrderResponse* msg) {
  return *msg->inner_.heartbeat_;
}
const ::trade::AssetPosition&
OrderResponse::_Internal::position(const OrderResponse* msg) {
  return *msg->inner_.position_;
}
const ::trade::MassCancelAck&
OrderResponse::_Internal::masscancelack(const OrderResponse* msg) {
  return *msg->inner_.masscancelack_;
}
void OrderResponse::set_allocated_newack(::trade::NewOrderAck* newack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (newack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newack);
    if (message_arena != submessage_arena) {
      newack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newack, submessage_arena);
    }
    set_has_newack();
    inner_.newack_ = newack;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.newAck)
}
void OrderResponse::set_allocated_cancelack(::trade::CancelOrderAck* cancelack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (cancelack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancelack);
    if (message_arena != submessage_arena) {
      cancelack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelack, submessage_arena);
    }
    set_has_cancelack();
    inner_.cancelack_ = cancelack;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.cancelAck)
}
void OrderResponse::set_allocated_modifyack(::trade::ModifyOrderAck* modifyack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (modifyack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modifyack);
    if (message_arena != submessage_arena) {
      modifyack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modifyack, submessage_arena);
    }
    set_has_modifyack();
    inner_.modifyack_ = modifyack;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.modifyAck)
}
void OrderResponse::set_allocated_newreject(::trade::NewOrderReject* newreject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (newreject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(newreject);
    if (message_arena != submessage_arena) {
      newreject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newreject, submessage_arena);
    }
    set_has_newreject();
    inner_.newreject_ = newreject;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.newReject)
}
void OrderResponse::set_allocated_cancelreject(::trade::CancelOrderReject* cancelreject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (cancelreject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancelreject);
    if (message_arena != submessage_arena) {
      cancelreject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelreject, submessage_arena);
    }
    set_has_cancelreject();
    inner_.cancelreject_ = cancelreject;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.cancelReject)
}
void OrderResponse::set_allocated_modifyreject(::trade::ModifyOrderReject* modifyreject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (modifyreject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modifyreject);
    if (message_arena != submessage_arena) {
      modifyreject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modifyreject, submessage_arena);
    }
    set_has_modifyreject();
    inner_.modifyreject_ = modifyreject;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.modifyReject)
}
void OrderResponse::set_allocated_fill(::trade::Fill* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fill);
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    set_has_fill();
    inner_.fill_ = fill;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.fill)
}
void OrderResponse::set_allocated_heartbeat(::trade::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.heartbeat)
}
void OrderResponse::set_allocated_position(::trade::AssetPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    inner_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.position)
}
void OrderResponse::set_allocated_masscancelack(::trade::MassCancelAck* masscancelack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (masscancelack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(masscancelack);
    if (message_arena != submessage_arena) {
      masscancelack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masscancelack, submessage_arena);
    }
    set_has_masscancelack();
    inner_.masscancelack_ = masscancelack;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.OrderResponse.massCancelAck)
}
OrderResponse::OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.OrderResponse)
}
OrderResponse::OrderResponse(const OrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kNewAck: {
      _internal_mutable_newack()->::trade::NewOrderAck::MergeFrom(from._internal_newack());
      break;
    }
    case kCancelAck: {
      _internal_mutable_cancelack()->::trade::CancelOrderAck::MergeFrom(from._internal_cancelack());
      break;
    }
    case kModifyAck: {
      _internal_mutable_modifyack()->::trade::ModifyOrderAck::MergeFrom(from._internal_modifyack());
      break;
    }
    case kNewReject: {
      _internal_mutable_newreject()->::trade::NewOrderReject::MergeFrom(from._internal_newreject());
      break;
    }
    case kCancelReject: {
      _internal_mutable_cancelreject()->::trade::CancelOrderReject::MergeFrom(from._internal_cancelreject());
      break;
    }
    case kModifyReject: {
      _internal_mutable_modifyreject()->::trade::ModifyOrderReject::MergeFrom(from._internal_modifyreject());
      break;
    }
    case kFill: {
      _internal_mutable_fill()->::trade::Fill::MergeFrom(from._internal_fill());
      break;
    }
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::trade::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kPosition: {
      _internal_mutable_position()->::trade::AssetPosition::MergeFrom(from._internal_position());
      break;
    }
    case kMassCancelAck: {
      _internal_mutable_masscancelack()->::trade::MassCancelAck::MergeFrom(from._internal_masscancelack());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trade.OrderResponse)
}

void OrderResponse::SharedCtor() {
clear_has_inner();
}

OrderResponse::~OrderResponse() {
  // @@protoc_insertion_point(destructor:trade.OrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void OrderResponse::ArenaDtor(void* object) {
  OrderResponse* _this = reinterpret_cast< OrderResponse* >(object);
  (void)_this;
}
void OrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderResponse::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:trade.OrderResponse)
  switch (inner_case()) {
    case kNewAck: {
      if (GetArena() == nullptr) {
        delete inner_.newack_;
      }
      break;
    }
    case kCancelAck: {
      if (GetArena() == nullptr) {
        delete inner_.cancelack_;
      }
      break;
    }
    case kModifyAck: {
      if (GetArena() == nullptr) {
        delete inner_.modifyack_;
      }
      break;
    }
    case kNewReject: {
      if (GetArena() == nullptr) {
        delete inner_.newreject_;
      }
      break;
    }
    case kCancelReject: {
      if (GetArena() == nullptr) {
        delete inner_.cancelreject_;
      }
      break;
    }
    case kModifyReject: {
      if (GetArena() == nullptr) {
        delete inner_.modifyreject_;
      }
      break;
    }
    case kFill: {
      if (GetArena() == nullptr) {
        delete inner_.fill_;
      }
      break;
    }
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kPosition: {
      if (GetArena() == nullptr) {
        delete inner_.position_;
      }
      break;
    }
    case kMassCancelAck: {
      if (GetArena() == nullptr) {
        delete inner_.masscancelack_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void OrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.OrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trade.NewOrderAck newAck = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_newack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.CancelOrderAck cancelAck = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.ModifyOrderAck modifyAck = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modifyack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.NewOrderReject newReject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_newreject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.CancelOrderReject cancelReject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelreject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.ModifyOrderReject modifyReject = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_modifyreject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Fill fill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Heartbeat heartbeat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.AssetPosition position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.MassCancelAck massCancelAck = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_masscancelack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.OrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trade.NewOrderAck newAck = 1;
  if (_internal_has_newack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::newack(this), target, stream);
  }

  // .trade.CancelOrderAck cancelAck = 2;
  if (_internal_has_cancelack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cancelack(this), target, stream);
  }

  // .trade.ModifyOrderAck modifyAck = 3;
  if (_internal_has_modifyack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::modifyack(this), target, stream);
  }

  // .trade.NewOrderReject newReject = 4;
  if (_internal_has_newreject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::newreject(this), target, stream);
  }

  // .trade.CancelOrderReject cancelReject = 5;
  if (_internal_has_cancelreject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cancelreject(this), target, stream);
  }

  // .trade.ModifyOrderReject modifyReject = 6;
  if (_internal_has_modifyreject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::modifyreject(this), target, stream);
  }

  // .trade.Fill fill = 7;
  if (_internal_has_fill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::fill(this), target, stream);
  }

  // .trade.Heartbeat heartbeat = 8;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::heartbeat(this), target, stream);
  }

  // .trade.AssetPosition position = 9;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::position(this), target, stream);
  }

  // .trade.MassCancelAck massCancelAck = 10;
  if (_internal_has_masscancelack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::masscancelack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.OrderResponse)
  return target;
}

size_t OrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.OrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .trade.NewOrderAck newAck = 1;
    case kNewAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.newack_);
      break;
    }
    // .trade.CancelOrderAck cancelAck = 2;
    case kCancelAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.cancelack_);
      break;
    }
    // .trade.ModifyOrderAck modifyAck = 3;
    case kModifyAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.modifyack_);
      break;
    }
    // .trade.NewOrderReject newReject = 4;
    case kNewReject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.newreject_);
      break;
    }
    // .trade.CancelOrderReject cancelReject = 5;
    case kCancelReject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.cancelreject_);
      break;
    }
    // .trade.ModifyOrderReject modifyReject = 6;
    case kModifyReject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.modifyreject_);
      break;
    }
    // .trade.Fill fill = 7;
    case kFill: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.fill_);
      break;
    }
    // .trade.Heartbeat heartbeat = 8;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .trade.AssetPosition position = 9;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.position_);
      break;
    }
    // .trade.MassCancelAck massCancelAck = 10;
    case kMassCancelAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.masscancelack_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.OrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.OrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.OrderResponse)
    MergeFrom(*source);
  }
}

void OrderResponse::MergeFrom(const OrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.OrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kNewAck: {
      _internal_mutable_newack()->::trade::NewOrderAck::MergeFrom(from._internal_newack());
      break;
    }
    case kCancelAck: {
      _internal_mutable_cancelack()->::trade::CancelOrderAck::MergeFrom(from._internal_cancelack());
      break;
    }
    case kModifyAck: {
      _internal_mutable_modifyack()->::trade::ModifyOrderAck::MergeFrom(from._internal_modifyack());
      break;
    }
    case kNewReject: {
      _internal_mutable_newreject()->::trade::NewOrderReject::MergeFrom(from._internal_newreject());
      break;
    }
    case kCancelReject: {
      _internal_mutable_cancelreject()->::trade::CancelOrderReject::MergeFrom(from._internal_cancelreject());
      break;
    }
    case kModifyReject: {
      _internal_mutable_modifyreject()->::trade::ModifyOrderReject::MergeFrom(from._internal_modifyreject());
      break;
    }
    case kFill: {
      _internal_mutable_fill()->::trade::Fill::MergeFrom(from._internal_fill());
      break;
    }
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::trade::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kPosition: {
      _internal_mutable_position()->::trade::AssetPosition::MergeFrom(from._internal_position());
      break;
    }
    case kMassCancelAck: {
      _internal_mutable_masscancelack()->::trade::MassCancelAck::MergeFrom(from._internal_masscancelack());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void OrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.OrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderResponse::CopyFrom(const OrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.OrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderResponse::IsInitialized() const {
  return true;
}

void OrderResponse::InternalSwap(OrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewOrderAck::_Internal {
 public:
  using HasBits = decltype(std::declval<NewOrderAck>()._has_bits_);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewOrderAck::NewOrderAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.NewOrderAck)
}
NewOrderAck::NewOrderAck(const NewOrderAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordertype_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(ordertype_));
  // @@protoc_insertion_point(copy_constructor:trade.NewOrderAck)
}

void NewOrderAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordertype_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(ordertype_));
}

NewOrderAck::~NewOrderAck() {
  // @@protoc_insertion_point(destructor:trade.NewOrderAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewOrderAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewOrderAck::ArenaDtor(void* object) {
  NewOrderAck* _this = reinterpret_cast< NewOrderAck* >(object);
  (void)_this;
}
void NewOrderAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewOrderAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewOrderAck::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.NewOrderAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketid_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(marketid_));
  price_ = PROTOBUF_ULONGLONG(0);
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordertype_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(ordertype_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewOrderAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchangeOrderId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Side side = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::trade::Side>(val));
        } else goto handle_unusual;
        continue;
      // .trade.TimeInForce timeInForce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::trade::TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .trade.OrderType orderType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ordertype(static_cast<::trade::OrderType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewOrderAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.NewOrderAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 exchangeOrderId = 4;
  if (this->exchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_exchangeorderid(), target);
  }

  // uint64 marketId = 5;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_marketid(), target);
  }

  // uint64 price = 6;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_price(), target);
  }

  // uint64 quantity = 7;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_quantity(), target);
  }

  // .trade.Side side = 8;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_side(), target);
  }

  // .trade.TimeInForce timeInForce = 9;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_timeinforce(), target);
  }

  // .trade.OrderType orderType = 10;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_ordertype(), target);
  }

  // uint64 transactTime = 11;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_transacttime(), target);
  }

  // uint64 subaccountId = 12;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_subaccountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.NewOrderAck)
  return target;
}

size_t NewOrderAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.NewOrderAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 exchangeOrderId = 4;
  if (this->exchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchangeorderid());
  }

  // uint64 marketId = 5;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 price = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 7;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .trade.Side side = 8;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .trade.TimeInForce timeInForce = 9;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // uint64 transactTime = 11;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 subaccountId = 12;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // .trade.OrderType orderType = 10;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrderAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.NewOrderAck)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrderAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewOrderAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.NewOrderAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.NewOrderAck)
    MergeFrom(*source);
  }
}

void NewOrderAck::MergeFrom(const NewOrderAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.NewOrderAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.exchangeorderid() != 0) {
    _internal_set_exchangeorderid(from._internal_exchangeorderid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from._internal_has_price()) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
}

void NewOrderAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.NewOrderAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrderAck::CopyFrom(const NewOrderAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.NewOrderAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrderAck::IsInitialized() const {
  return true;
}

void NewOrderAck::InternalSwap(NewOrderAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewOrderAck, ordertype_)
      + sizeof(NewOrderAck::ordertype_)
      - PROTOBUF_FIELD_OFFSET(NewOrderAck, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrderAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelOrderAck::_Internal {
 public:
};

CancelOrderAck::CancelOrderAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.CancelOrderAck)
}
CancelOrderAck::CancelOrderAck(const CancelOrderAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:trade.CancelOrderAck)
}

void CancelOrderAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
}

CancelOrderAck::~CancelOrderAck() {
  // @@protoc_insertion_point(destructor:trade.CancelOrderAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelOrderAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelOrderAck::ArenaDtor(void* object) {
  CancelOrderAck* _this = reinterpret_cast< CancelOrderAck* >(object);
  (void)_this;
}
void CancelOrderAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrderAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelOrderAck::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.CancelOrderAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.CancelOrderAck.Reason reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::trade::CancelOrderAck_Reason>(val));
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrderAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.CancelOrderAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transacttime(), target);
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_subaccountid(), target);
  }

  // .trade.CancelOrderAck.Reason reason = 6;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reason(), target);
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.CancelOrderAck)
  return target;
}

size_t CancelOrderAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.CancelOrderAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // .trade.CancelOrderAck.Reason reason = 6;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.CancelOrderAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrderAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.CancelOrderAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.CancelOrderAck)
    MergeFrom(*source);
  }
}

void CancelOrderAck::MergeFrom(const CancelOrderAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.CancelOrderAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void CancelOrderAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.CancelOrderAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderAck::CopyFrom(const CancelOrderAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.CancelOrderAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderAck::IsInitialized() const {
  return true;
}

void CancelOrderAck::InternalSwap(CancelOrderAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelOrderAck, reason_)
      + sizeof(CancelOrderAck::reason_)
      - PROTOBUF_FIELD_OFFSET(CancelOrderAck, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModifyOrderAck::_Internal {
 public:
};

ModifyOrderAck::ModifyOrderAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.ModifyOrderAck)
}
ModifyOrderAck::ModifyOrderAck(const ModifyOrderAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:trade.ModifyOrderAck)
}

void ModifyOrderAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(price_));
}

ModifyOrderAck::~ModifyOrderAck() {
  // @@protoc_insertion_point(destructor:trade.ModifyOrderAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyOrderAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModifyOrderAck::ArenaDtor(void* object) {
  ModifyOrderAck* _this = reinterpret_cast< ModifyOrderAck* >(object);
  (void)_this;
}
void ModifyOrderAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyOrderAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyOrderAck::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.ModifyOrderAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyOrderAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 newQuantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          newquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyOrderAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.ModifyOrderAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transacttime(), target);
  }

  // uint64 newQuantity = 5;
  if (this->newquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_newquantity(), target);
  }

  // uint64 subaccountId = 6;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_subaccountid(), target);
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_marketid(), target);
  }

  // uint64 price = 8;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.ModifyOrderAck)
  return target;
}

size_t ModifyOrderAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.ModifyOrderAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 newQuantity = 5;
  if (this->newquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newquantity());
  }

  // uint64 subaccountId = 6;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 price = 8;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyOrderAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.ModifyOrderAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyOrderAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyOrderAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.ModifyOrderAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.ModifyOrderAck)
    MergeFrom(*source);
  }
}

void ModifyOrderAck::MergeFrom(const ModifyOrderAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.ModifyOrderAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.newquantity() != 0) {
    _internal_set_newquantity(from._internal_newquantity());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void ModifyOrderAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.ModifyOrderAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyOrderAck::CopyFrom(const ModifyOrderAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.ModifyOrderAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyOrderAck::IsInitialized() const {
  return true;
}

void ModifyOrderAck::InternalSwap(ModifyOrderAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyOrderAck, price_)
      + sizeof(ModifyOrderAck::price_)
      - PROTOBUF_FIELD_OFFSET(ModifyOrderAck, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyOrderAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MassCancelAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MassCancelAck>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MassCancelAck::MassCancelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.MassCancelAck)
}
MassCancelAck::MassCancelAck(const MassCancelAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalaffectedorders_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(totalaffectedorders_));
  // @@protoc_insertion_point(copy_constructor:trade.MassCancelAck)
}

void MassCancelAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalaffectedorders_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(totalaffectedorders_));
}

MassCancelAck::~MassCancelAck() {
  // @@protoc_insertion_point(destructor:trade.MassCancelAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MassCancelAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MassCancelAck::ArenaDtor(void* object) {
  MassCancelAck* _this = reinterpret_cast< MassCancelAck* >(object);
  (void)_this;
}
void MassCancelAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MassCancelAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MassCancelAck::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MassCancelAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transacttime_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(transacttime_));
  reason_ = 0;
  totalaffectedorders_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MassCancelAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.MassCancelAck.Reason reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::trade::MassCancelAck_Reason>(val));
        } else goto handle_unusual;
        continue;
      // uint32 totalAffectedOrders = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalaffectedorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MassCancelAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MassCancelAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 subaccountId = 2;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_subaccountid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transacttime(), target);
  }

  // .trade.MassCancelAck.Reason reason = 6;
  if (_internal_has_reason()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reason(), target);
  }

  // uint32 totalAffectedOrders = 7;
  if (this->totalaffectedorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_totalaffectedorders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MassCancelAck)
  return target;
}

size_t MassCancelAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MassCancelAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 subaccountId = 2;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // .trade.MassCancelAck.Reason reason = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // uint32 totalAffectedOrders = 7;
  if (this->totalaffectedorders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalaffectedorders());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MassCancelAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MassCancelAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MassCancelAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MassCancelAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MassCancelAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MassCancelAck)
    MergeFrom(*source);
  }
}

void MassCancelAck::MergeFrom(const MassCancelAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MassCancelAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.totalaffectedorders() != 0) {
    _internal_set_totalaffectedorders(from._internal_totalaffectedorders());
  }
}

void MassCancelAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MassCancelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassCancelAck::CopyFrom(const MassCancelAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MassCancelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassCancelAck::IsInitialized() const {
  return true;
}

void MassCancelAck::InternalSwap(MassCancelAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MassCancelAck, totalaffectedorders_)
      + sizeof(MassCancelAck::totalaffectedorders_)
      - PROTOBUF_FIELD_OFFSET(MassCancelAck, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MassCancelAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewOrderReject::_Internal {
 public:
  using HasBits = decltype(std::declval<NewOrderReject>()._has_bits_);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewOrderReject::NewOrderReject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.NewOrderReject)
}
NewOrderReject::NewOrderReject(const NewOrderReject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordertype_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(ordertype_));
  // @@protoc_insertion_point(copy_constructor:trade.NewOrderReject)
}

void NewOrderReject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordertype_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(ordertype_));
}

NewOrderReject::~NewOrderReject() {
  // @@protoc_insertion_point(destructor:trade.NewOrderReject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewOrderReject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewOrderReject::ArenaDtor(void* object) {
  NewOrderReject* _this = reinterpret_cast< NewOrderReject* >(object);
  (void)_this;
}
void NewOrderReject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewOrderReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewOrderReject::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.NewOrderReject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketid_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(marketid_));
  price_ = PROTOBUF_ULONGLONG(0);
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordertype_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(ordertype_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewOrderReject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.NewOrderReject.Reason reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::trade::NewOrderReject_Reason>(val));
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Side side = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::trade::Side>(val));
        } else goto handle_unusual;
        continue;
      // .trade.TimeInForce timeInForce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::trade::TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .trade.OrderType orderType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ordertype(static_cast<::trade::OrderType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewOrderReject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.NewOrderReject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transacttime(), target);
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_subaccountid(), target);
  }

  // .trade.NewOrderReject.Reason reason = 6;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reason(), target);
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_marketid(), target);
  }

  // uint64 price = 8;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_price(), target);
  }

  // uint64 quantity = 9;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_quantity(), target);
  }

  // .trade.Side side = 10;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_side(), target);
  }

  // .trade.TimeInForce timeInForce = 11;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_timeinforce(), target);
  }

  // .trade.OrderType orderType = 12;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_ordertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.NewOrderReject)
  return target;
}

size_t NewOrderReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.NewOrderReject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 price = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // .trade.NewOrderReject.Reason reason = 6;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // .trade.Side side = 10;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // uint64 quantity = 9;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .trade.TimeInForce timeInForce = 11;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // .trade.OrderType orderType = 12;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrderReject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.NewOrderReject)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrderReject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewOrderReject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.NewOrderReject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.NewOrderReject)
    MergeFrom(*source);
  }
}

void NewOrderReject::MergeFrom(const NewOrderReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.NewOrderReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from._internal_has_price()) {
    _internal_set_price(from._internal_price());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
}

void NewOrderReject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.NewOrderReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrderReject::CopyFrom(const NewOrderReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.NewOrderReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrderReject::IsInitialized() const {
  return true;
}

void NewOrderReject::InternalSwap(NewOrderReject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewOrderReject, ordertype_)
      + sizeof(NewOrderReject::ordertype_)
      - PROTOBUF_FIELD_OFFSET(NewOrderReject, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrderReject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelOrderReject::_Internal {
 public:
};

CancelOrderReject::CancelOrderReject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.CancelOrderReject)
}
CancelOrderReject::CancelOrderReject(const CancelOrderReject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:trade.CancelOrderReject)
}

void CancelOrderReject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
}

CancelOrderReject::~CancelOrderReject() {
  // @@protoc_insertion_point(destructor:trade.CancelOrderReject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelOrderReject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelOrderReject::ArenaDtor(void* object) {
  CancelOrderReject* _this = reinterpret_cast< CancelOrderReject* >(object);
  (void)_this;
}
void CancelOrderReject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrderReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelOrderReject::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.CancelOrderReject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderReject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.CancelOrderReject.Reason reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::trade::CancelOrderReject_Reason>(val));
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrderReject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.CancelOrderReject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transacttime(), target);
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_subaccountid(), target);
  }

  // .trade.CancelOrderReject.Reason reason = 6;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reason(), target);
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.CancelOrderReject)
  return target;
}

size_t CancelOrderReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.CancelOrderReject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // .trade.CancelOrderReject.Reason reason = 6;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderReject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.CancelOrderReject)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderReject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrderReject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.CancelOrderReject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.CancelOrderReject)
    MergeFrom(*source);
  }
}

void CancelOrderReject::MergeFrom(const CancelOrderReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.CancelOrderReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void CancelOrderReject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.CancelOrderReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderReject::CopyFrom(const CancelOrderReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.CancelOrderReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderReject::IsInitialized() const {
  return true;
}

void CancelOrderReject::InternalSwap(CancelOrderReject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelOrderReject, reason_)
      + sizeof(CancelOrderReject::reason_)
      - PROTOBUF_FIELD_OFFSET(CancelOrderReject, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderReject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModifyOrderReject::_Internal {
 public:
};

ModifyOrderReject::ModifyOrderReject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.ModifyOrderReject)
}
ModifyOrderReject::ModifyOrderReject(const ModifyOrderReject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:trade.ModifyOrderReject)
}

void ModifyOrderReject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
}

ModifyOrderReject::~ModifyOrderReject() {
  // @@protoc_insertion_point(destructor:trade.ModifyOrderReject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyOrderReject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModifyOrderReject::ArenaDtor(void* object) {
  ModifyOrderReject* _this = reinterpret_cast< ModifyOrderReject* >(object);
  (void)_this;
}
void ModifyOrderReject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyOrderReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyOrderReject::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.ModifyOrderReject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyOrderReject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 requestId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.ModifyOrderReject.Reason reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::trade::ModifyOrderReject_Reason>(val));
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyOrderReject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.ModifyOrderReject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_clientorderid(), target);
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_requestid(), target);
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transacttime(), target);
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_subaccountid(), target);
  }

  // .trade.ModifyOrderReject.Reason reason = 6;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reason(), target);
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.ModifyOrderReject)
  return target;
}

size_t ModifyOrderReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.ModifyOrderReject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 clientOrderId = 2;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 requestId = 3;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 transactTime = 4;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 subaccountId = 5;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 marketId = 7;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // .trade.ModifyOrderReject.Reason reason = 6;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyOrderReject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.ModifyOrderReject)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyOrderReject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyOrderReject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.ModifyOrderReject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.ModifyOrderReject)
    MergeFrom(*source);
  }
}

void ModifyOrderReject::MergeFrom(const ModifyOrderReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.ModifyOrderReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void ModifyOrderReject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.ModifyOrderReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyOrderReject::CopyFrom(const ModifyOrderReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.ModifyOrderReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyOrderReject::IsInitialized() const {
  return true;
}

void ModifyOrderReject::InternalSwap(ModifyOrderReject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyOrderReject, reason_)
      + sizeof(ModifyOrderReject::reason_)
      - PROTOBUF_FIELD_OFFSET(ModifyOrderReject, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyOrderReject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fill::_Internal {
 public:
};

Fill::Fill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.Fill)
}
Fill::Fill(const Fill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgseqnum_, &from.msgseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&subaccountid_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(subaccountid_));
  // @@protoc_insertion_point(copy_constructor:trade.Fill)
}

void Fill::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msgseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subaccountid_) -
    reinterpret_cast<char*>(&msgseqnum_)) + sizeof(subaccountid_));
}

Fill::~Fill() {
  // @@protoc_insertion_point(destructor:trade.Fill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Fill::ArenaDtor(void* object) {
  Fill* _this = reinterpret_cast< Fill* >(object);
  (void)_this;
}
void Fill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fill::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.Fill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subaccountid_) -
      reinterpret_cast<char*>(&msgseqnum_)) + sizeof(subaccountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msgSeqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 clientOrderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchangeOrderId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fillPrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fillprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fillQuantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fillquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 leavesQuantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          leavesquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transactTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          transacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.Fill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgseqnum(), target);
  }

  // uint64 marketId = 2;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_marketid(), target);
  }

  // uint64 clientOrderId = 3;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_clientorderid(), target);
  }

  // uint64 exchangeOrderId = 4;
  if (this->exchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_exchangeorderid(), target);
  }

  // uint64 fillPrice = 5;
  if (this->fillprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fillprice(), target);
  }

  // uint64 fillQuantity = 6;
  if (this->fillquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_fillquantity(), target);
  }

  // uint64 leavesQuantity = 7;
  if (this->leavesquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_leavesquantity(), target);
  }

  // uint64 transactTime = 8;
  if (this->transacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_transacttime(), target);
  }

  // uint64 subaccountId = 9;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_subaccountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.Fill)
  return target;
}

size_t Fill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.Fill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msgSeqNum = 1;
  if (this->msgseqnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msgseqnum());
  }

  // uint64 marketId = 2;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 clientOrderId = 3;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 exchangeOrderId = 4;
  if (this->exchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchangeorderid());
  }

  // uint64 fillPrice = 5;
  if (this->fillprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fillprice());
  }

  // uint64 fillQuantity = 6;
  if (this->fillquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fillquantity());
  }

  // uint64 leavesQuantity = 7;
  if (this->leavesquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leavesquantity());
  }

  // uint64 transactTime = 8;
  if (this->transacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transacttime());
  }

  // uint64 subaccountId = 9;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.Fill)
  GOOGLE_DCHECK_NE(&from, this);
  const Fill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.Fill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.Fill)
    MergeFrom(*source);
  }
}

void Fill::MergeFrom(const Fill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.Fill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgseqnum() != 0) {
    _internal_set_msgseqnum(from._internal_msgseqnum());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.exchangeorderid() != 0) {
    _internal_set_exchangeorderid(from._internal_exchangeorderid());
  }
  if (from.fillprice() != 0) {
    _internal_set_fillprice(from._internal_fillprice());
  }
  if (from.fillquantity() != 0) {
    _internal_set_fillquantity(from._internal_fillquantity());
  }
  if (from.leavesquantity() != 0) {
    _internal_set_leavesquantity(from._internal_leavesquantity());
  }
  if (from.transacttime() != 0) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
}

void Fill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.Fill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fill::CopyFrom(const Fill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.Fill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fill::IsInitialized() const {
  return true;
}

void Fill::InternalSwap(Fill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fill, subaccountid_)
      + sizeof(Fill::subaccountid_)
      - PROTOBUF_FIELD_OFFSET(Fill, msgseqnum_)>(
          reinterpret_cast<char*>(&msgseqnum_),
          reinterpret_cast<char*>(&other->msgseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetPosition::_Internal {
 public:
  static const ::trade::RawUnits& total(const AssetPosition* msg);
  static const ::trade::RawUnits& available(const AssetPosition* msg);
};

const ::trade::RawUnits&
AssetPosition::_Internal::total(const AssetPosition* msg) {
  return *msg->total_;
}
const ::trade::RawUnits&
AssetPosition::_Internal::available(const AssetPosition* msg) {
  return *msg->available_;
}
AssetPosition::AssetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.AssetPosition)
}
AssetPosition::AssetPosition(const AssetPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total()) {
    total_ = new ::trade::RawUnits(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from._internal_has_available()) {
    available_ = new ::trade::RawUnits(*from.available_);
  } else {
    available_ = nullptr;
  }
  ::memcpy(&subaccountid_, &from.subaccountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&assetid_) -
    reinterpret_cast<char*>(&subaccountid_)) + sizeof(assetid_));
  // @@protoc_insertion_point(copy_constructor:trade.AssetPosition)
}

void AssetPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assetid_) -
    reinterpret_cast<char*>(&total_)) + sizeof(assetid_));
}

AssetPosition::~AssetPosition() {
  // @@protoc_insertion_point(destructor:trade.AssetPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete available_;
}

void AssetPosition::ArenaDtor(void* object) {
  AssetPosition* _this = reinterpret_cast< AssetPosition* >(object);
  (void)_this;
}
void AssetPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.AssetPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
  if (GetArena() == nullptr && available_ != nullptr) {
    delete available_;
  }
  available_ = nullptr;
  ::memset(&subaccountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assetid_) -
      reinterpret_cast<char*>(&subaccountid_)) + sizeof(assetid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 subaccountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 assetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.RawUnits total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.RawUnits available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_available(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.AssetPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 subaccountId = 1;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_subaccountid(), target);
  }

  // uint64 assetId = 2;
  if (this->assetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_assetid(), target);
  }

  // .trade.RawUnits total = 3;
  if (this->has_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::total(this), target, stream);
  }

  // .trade.RawUnits available = 4;
  if (this->has_available()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::available(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.AssetPosition)
  return target;
}

size_t AssetPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.AssetPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trade.RawUnits total = 3;
  if (this->has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  // .trade.RawUnits available = 4;
  if (this->has_available()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *available_);
  }

  // uint64 subaccountId = 1;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // uint64 assetId = 2;
  if (this->assetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_assetid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.AssetPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.AssetPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.AssetPosition)
    MergeFrom(*source);
  }
}

void AssetPosition::MergeFrom(const AssetPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.AssetPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total()) {
    _internal_mutable_total()->::trade::RawUnits::MergeFrom(from._internal_total());
  }
  if (from.has_available()) {
    _internal_mutable_available()->::trade::RawUnits::MergeFrom(from._internal_available());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.assetid() != 0) {
    _internal_set_assetid(from._internal_assetid());
  }
}

void AssetPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.AssetPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetPosition::CopyFrom(const AssetPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.AssetPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetPosition::IsInitialized() const {
  return true;
}

void AssetPosition::InternalSwap(AssetPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetPosition, assetid_)
      + sizeof(AssetPosition::assetid_)
      - PROTOBUF_FIELD_OFFSET(AssetPosition, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawUnits::_Internal {
 public:
};

RawUnits::RawUnits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.RawUnits)
}
RawUnits::RawUnits(const RawUnits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&word0_, &from.word0_,
    static_cast<size_t>(reinterpret_cast<char*>(&word3_) -
    reinterpret_cast<char*>(&word0_)) + sizeof(word3_));
  // @@protoc_insertion_point(copy_constructor:trade.RawUnits)
}

void RawUnits::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&word0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&word3_) -
    reinterpret_cast<char*>(&word0_)) + sizeof(word3_));
}

RawUnits::~RawUnits() {
  // @@protoc_insertion_point(destructor:trade.RawUnits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawUnits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawUnits::ArenaDtor(void* object) {
  RawUnits* _this = reinterpret_cast< RawUnits* >(object);
  (void)_this;
}
void RawUnits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawUnits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawUnits::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.RawUnits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&word0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&word3_) -
      reinterpret_cast<char*>(&word0_)) + sizeof(word3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawUnits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 word0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          word0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 word1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          word1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 word2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          word2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 word3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          word3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawUnits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.RawUnits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 word0 = 1;
  if (this->word0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_word0(), target);
  }

  // uint64 word1 = 2;
  if (this->word1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_word1(), target);
  }

  // uint64 word2 = 3;
  if (this->word2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_word2(), target);
  }

  // uint64 word3 = 5;
  if (this->word3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_word3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.RawUnits)
  return target;
}

size_t RawUnits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.RawUnits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 word0 = 1;
  if (this->word0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_word0());
  }

  // uint64 word1 = 2;
  if (this->word1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_word1());
  }

  // uint64 word2 = 3;
  if (this->word2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_word2());
  }

  // uint64 word3 = 5;
  if (this->word3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_word3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawUnits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.RawUnits)
  GOOGLE_DCHECK_NE(&from, this);
  const RawUnits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawUnits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.RawUnits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.RawUnits)
    MergeFrom(*source);
  }
}

void RawUnits::MergeFrom(const RawUnits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.RawUnits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word0() != 0) {
    _internal_set_word0(from._internal_word0());
  }
  if (from.word1() != 0) {
    _internal_set_word1(from._internal_word1());
  }
  if (from.word2() != 0) {
    _internal_set_word2(from._internal_word2());
  }
  if (from.word3() != 0) {
    _internal_set_word3(from._internal_word3());
  }
}

void RawUnits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.RawUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawUnits::CopyFrom(const RawUnits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.RawUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawUnits::IsInitialized() const {
  return true;
}

void RawUnits::InternalSwap(RawUnits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawUnits, word3_)
      + sizeof(RawUnits::word3_)
      - PROTOBUF_FIELD_OFFSET(RawUnits, word0_)>(
          reinterpret_cast<char*>(&word0_),
          reinterpret_cast<char*>(&other->word0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawUnits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bootstrap::_Internal {
 public:
  static const ::trade::Done& done(const Bootstrap* msg);
  static const ::trade::RestingOrders& resting(const Bootstrap* msg);
  static const ::trade::AssetPositions& position(const Bootstrap* msg);
};

const ::trade::Done&
Bootstrap::_Internal::done(const Bootstrap* msg) {
  return *msg->inner_.done_;
}
const ::trade::RestingOrders&
Bootstrap::_Internal::resting(const Bootstrap* msg) {
  return *msg->inner_.resting_;
}
const ::trade::AssetPositions&
Bootstrap::_Internal::position(const Bootstrap* msg) {
  return *msg->inner_.position_;
}
void Bootstrap::set_allocated_done(::trade::Done* done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(done);
    if (message_arena != submessage_arena) {
      done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, done, submessage_arena);
    }
    set_has_done();
    inner_.done_ = done;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.Bootstrap.done)
}
void Bootstrap::set_allocated_resting(::trade::RestingOrders* resting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (resting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resting);
    if (message_arena != submessage_arena) {
      resting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resting, submessage_arena);
    }
    set_has_resting();
    inner_.resting_ = resting;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.Bootstrap.resting)
}
void Bootstrap::set_allocated_position(::trade::AssetPositions* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    inner_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:trade.Bootstrap.position)
}
Bootstrap::Bootstrap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.Bootstrap)
}
Bootstrap::Bootstrap(const Bootstrap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kDone: {
      _internal_mutable_done()->::trade::Done::MergeFrom(from._internal_done());
      break;
    }
    case kResting: {
      _internal_mutable_resting()->::trade::RestingOrders::MergeFrom(from._internal_resting());
      break;
    }
    case kPosition: {
      _internal_mutable_position()->::trade::AssetPositions::MergeFrom(from._internal_position());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trade.Bootstrap)
}

void Bootstrap::SharedCtor() {
clear_has_inner();
}

Bootstrap::~Bootstrap() {
  // @@protoc_insertion_point(destructor:trade.Bootstrap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bootstrap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void Bootstrap::ArenaDtor(void* object) {
  Bootstrap* _this = reinterpret_cast< Bootstrap* >(object);
  (void)_this;
}
void Bootstrap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bootstrap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bootstrap::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:trade.Bootstrap)
  switch (inner_case()) {
    case kDone: {
      if (GetArena() == nullptr) {
        delete inner_.done_;
      }
      break;
    }
    case kResting: {
      if (GetArena() == nullptr) {
        delete inner_.resting_;
      }
      break;
    }
    case kPosition: {
      if (GetArena() == nullptr) {
        delete inner_.position_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void Bootstrap::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bootstrap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trade.Done done = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_done(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.RestingOrders resting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.AssetPositions position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bootstrap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.Bootstrap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trade.Done done = 1;
  if (_internal_has_done()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::done(this), target, stream);
  }

  // .trade.RestingOrders resting = 2;
  if (_internal_has_resting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resting(this), target, stream);
  }

  // .trade.AssetPositions position = 3;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.Bootstrap)
  return target;
}

size_t Bootstrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.Bootstrap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .trade.Done done = 1;
    case kDone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.done_);
      break;
    }
    // .trade.RestingOrders resting = 2;
    case kResting: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.resting_);
      break;
    }
    // .trade.AssetPositions position = 3;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.position_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bootstrap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.Bootstrap)
  GOOGLE_DCHECK_NE(&from, this);
  const Bootstrap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bootstrap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.Bootstrap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.Bootstrap)
    MergeFrom(*source);
  }
}

void Bootstrap::MergeFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.Bootstrap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kDone: {
      _internal_mutable_done()->::trade::Done::MergeFrom(from._internal_done());
      break;
    }
    case kResting: {
      _internal_mutable_resting()->::trade::RestingOrders::MergeFrom(from._internal_resting());
      break;
    }
    case kPosition: {
      _internal_mutable_position()->::trade::AssetPositions::MergeFrom(from._internal_position());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void Bootstrap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bootstrap::CopyFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bootstrap::IsInitialized() const {
  return true;
}

void Bootstrap::InternalSwap(Bootstrap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bootstrap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RestingOrders::_Internal {
 public:
};

RestingOrders::RestingOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.RestingOrders)
}
RestingOrders::RestingOrders(const RestingOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.RestingOrders)
}

void RestingOrders::SharedCtor() {
}

RestingOrders::~RestingOrders() {
  // @@protoc_insertion_point(destructor:trade.RestingOrders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestingOrders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RestingOrders::ArenaDtor(void* object) {
  RestingOrders* _this = reinterpret_cast< RestingOrders* >(object);
  (void)_this;
}
void RestingOrders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestingOrders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestingOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.RestingOrders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestingOrders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.RestingOrder orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestingOrders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.RestingOrders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.RestingOrder orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.RestingOrders)
  return target;
}

size_t RestingOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.RestingOrders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.RestingOrder orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestingOrders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.RestingOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const RestingOrders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestingOrders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.RestingOrders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.RestingOrders)
    MergeFrom(*source);
  }
}

void RestingOrders::MergeFrom(const RestingOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.RestingOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void RestingOrders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.RestingOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestingOrders::CopyFrom(const RestingOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.RestingOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestingOrders::IsInitialized() const {
  return true;
}

void RestingOrders::InternalSwap(RestingOrders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestingOrders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetPositions::_Internal {
 public:
};

AssetPositions::AssetPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.AssetPositions)
}
AssetPositions::AssetPositions(const AssetPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.AssetPositions)
}

void AssetPositions::SharedCtor() {
}

AssetPositions::~AssetPositions() {
  // @@protoc_insertion_point(destructor:trade.AssetPositions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssetPositions::ArenaDtor(void* object) {
  AssetPositions* _this = reinterpret_cast< AssetPositions* >(object);
  (void)_this;
}
void AssetPositions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.AssetPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetPositions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.AssetPosition positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetPositions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.AssetPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.AssetPosition positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.AssetPositions)
  return target;
}

size_t AssetPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.AssetPositions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.AssetPosition positions = 1;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetPositions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.AssetPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetPositions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetPositions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.AssetPositions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.AssetPositions)
    MergeFrom(*source);
  }
}

void AssetPositions::MergeFrom(const AssetPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.AssetPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void AssetPositions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.AssetPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetPositions::CopyFrom(const AssetPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.AssetPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetPositions::IsInitialized() const {
  return true;
}

void AssetPositions::InternalSwap(AssetPositions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetPositions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Done::_Internal {
 public:
};

Done::Done(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.Done)
}
Done::Done(const Done& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  latesttransacttime_ = from.latesttransacttime_;
  // @@protoc_insertion_point(copy_constructor:trade.Done)
}

void Done::SharedCtor() {
latesttransacttime_ = PROTOBUF_ULONGLONG(0);
}

Done::~Done() {
  // @@protoc_insertion_point(destructor:trade.Done)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Done::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Done::ArenaDtor(void* object) {
  Done* _this = reinterpret_cast< Done* >(object);
  (void)_this;
}
void Done::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Done::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Done::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.Done)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latesttransacttime_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Done::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 latestTransactTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latesttransacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Done::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.Done)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 latestTransactTime = 1;
  if (this->latesttransacttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_latesttransacttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.Done)
  return target;
}

size_t Done::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.Done)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 latestTransactTime = 1;
  if (this->latesttransacttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latesttransacttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Done::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.Done)
  GOOGLE_DCHECK_NE(&from, this);
  const Done* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Done>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.Done)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.Done)
    MergeFrom(*source);
  }
}

void Done::MergeFrom(const Done& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.Done)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latesttransacttime() != 0) {
    _internal_set_latesttransacttime(from._internal_latesttransacttime());
  }
}

void Done::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.Done)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Done::CopyFrom(const Done& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.Done)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Done::IsInitialized() const {
  return true;
}

void Done::InternalSwap(Done* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(latesttransacttime_, other->latesttransacttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Done::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RestingOrder::_Internal {
 public:
};

RestingOrder::RestingOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.RestingOrder)
}
RestingOrder::RestingOrder(const RestingOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clientorderid_, &from.clientorderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordertype_) -
    reinterpret_cast<char*>(&clientorderid_)) + sizeof(ordertype_));
  // @@protoc_insertion_point(copy_constructor:trade.RestingOrder)
}

void RestingOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clientorderid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordertype_) -
    reinterpret_cast<char*>(&clientorderid_)) + sizeof(ordertype_));
}

RestingOrder::~RestingOrder() {
  // @@protoc_insertion_point(destructor:trade.RestingOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestingOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RestingOrder::ArenaDtor(void* object) {
  RestingOrder* _this = reinterpret_cast< RestingOrder* >(object);
  (void)_this;
}
void RestingOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestingOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestingOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.RestingOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clientorderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordertype_) -
      reinterpret_cast<char*>(&clientorderid_)) + sizeof(ordertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestingOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 clientOrderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          clientorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchangeOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exchangeorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 marketId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 originalQuantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          originalquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trade.Side side = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::trade::Side>(val));
        } else goto handle_unusual;
        continue;
      // .trade.TimeInForce timeInForce = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::trade::TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .trade.OrderType orderType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ordertype(static_cast<::trade::OrderType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 remainingQuantity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          remainingquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 restTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          resttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 subaccountId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          subaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestingOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.RestingOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 clientOrderId = 1;
  if (this->clientorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clientorderid(), target);
  }

  // uint64 exchangeOrderId = 2;
  if (this->exchangeorderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_exchangeorderid(), target);
  }

  // uint64 marketId = 3;
  if (this->marketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_marketid(), target);
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_price(), target);
  }

  // uint64 originalQuantity = 5;
  if (this->originalquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_originalquantity(), target);
  }

  // .trade.Side side = 6;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_side(), target);
  }

  // .trade.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_timeinforce(), target);
  }

  // .trade.OrderType orderType = 8;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ordertype(), target);
  }

  // uint64 remainingQuantity = 9;
  if (this->remainingquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_remainingquantity(), target);
  }

  // uint64 restTime = 10;
  if (this->resttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_resttime(), target);
  }

  // uint64 subaccountId = 11;
  if (this->subaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_subaccountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.RestingOrder)
  return target;
}

size_t RestingOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.RestingOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 clientOrderId = 1;
  if (this->clientorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clientorderid());
  }

  // uint64 exchangeOrderId = 2;
  if (this->exchangeorderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchangeorderid());
  }

  // uint64 marketId = 3;
  if (this->marketid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 originalQuantity = 5;
  if (this->originalquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_originalquantity());
  }

  // .trade.Side side = 6;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .trade.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // uint64 remainingQuantity = 9;
  if (this->remainingquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remainingquantity());
  }

  // uint64 restTime = 10;
  if (this->resttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resttime());
  }

  // uint64 subaccountId = 11;
  if (this->subaccountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_subaccountid());
  }

  // .trade.OrderType orderType = 8;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestingOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.RestingOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const RestingOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestingOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.RestingOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.RestingOrder)
    MergeFrom(*source);
  }
}

void RestingOrder::MergeFrom(const RestingOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.RestingOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientorderid() != 0) {
    _internal_set_clientorderid(from._internal_clientorderid());
  }
  if (from.exchangeorderid() != 0) {
    _internal_set_exchangeorderid(from._internal_exchangeorderid());
  }
  if (from.marketid() != 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.originalquantity() != 0) {
    _internal_set_originalquantity(from._internal_originalquantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.remainingquantity() != 0) {
    _internal_set_remainingquantity(from._internal_remainingquantity());
  }
  if (from.resttime() != 0) {
    _internal_set_resttime(from._internal_resttime());
  }
  if (from.subaccountid() != 0) {
    _internal_set_subaccountid(from._internal_subaccountid());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
}

void RestingOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.RestingOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestingOrder::CopyFrom(const RestingOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.RestingOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestingOrder::IsInitialized() const {
  return true;
}

void RestingOrder::InternalSwap(RestingOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestingOrder, ordertype_)
      + sizeof(RestingOrder::ordertype_)
      - PROTOBUF_FIELD_OFFSET(RestingOrder, clientorderid_)>(
          reinterpret_cast<char*>(&clientorderid_),
          reinterpret_cast<char*>(&other->clientorderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestingOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trade::Credentials* Arena::CreateMaybeMessage< ::trade::Credentials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::Credentials >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::OrderRequest* Arena::CreateMaybeMessage< ::trade::OrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::OrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::NewOrder* Arena::CreateMaybeMessage< ::trade::NewOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::NewOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::CancelOrder* Arena::CreateMaybeMessage< ::trade::CancelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::CancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::ModifyOrder* Arena::CreateMaybeMessage< ::trade::ModifyOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::ModifyOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MassCancel* Arena::CreateMaybeMessage< ::trade::MassCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::MassCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::Heartbeat* Arena::CreateMaybeMessage< ::trade::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::OrderResponse* Arena::CreateMaybeMessage< ::trade::OrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::OrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::NewOrderAck* Arena::CreateMaybeMessage< ::trade::NewOrderAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::NewOrderAck >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::CancelOrderAck* Arena::CreateMaybeMessage< ::trade::CancelOrderAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::CancelOrderAck >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::ModifyOrderAck* Arena::CreateMaybeMessage< ::trade::ModifyOrderAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::ModifyOrderAck >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MassCancelAck* Arena::CreateMaybeMessage< ::trade::MassCancelAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::MassCancelAck >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::NewOrderReject* Arena::CreateMaybeMessage< ::trade::NewOrderReject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::NewOrderReject >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::CancelOrderReject* Arena::CreateMaybeMessage< ::trade::CancelOrderReject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::CancelOrderReject >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::ModifyOrderReject* Arena::CreateMaybeMessage< ::trade::ModifyOrderReject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::ModifyOrderReject >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::Fill* Arena::CreateMaybeMessage< ::trade::Fill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::Fill >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::AssetPosition* Arena::CreateMaybeMessage< ::trade::AssetPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::AssetPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::RawUnits* Arena::CreateMaybeMessage< ::trade::RawUnits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::RawUnits >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::Bootstrap* Arena::CreateMaybeMessage< ::trade::Bootstrap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::Bootstrap >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::RestingOrders* Arena::CreateMaybeMessage< ::trade::RestingOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::RestingOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::AssetPositions* Arena::CreateMaybeMessage< ::trade::AssetPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::AssetPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::Done* Arena::CreateMaybeMessage< ::trade::Done >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::Done >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::RestingOrder* Arena::CreateMaybeMessage< ::trade::RestingOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::RestingOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
