// source: market_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.md.AggMessage', null, global);
goog.exportSymbol('proto.md.AggMessage.InnerCase', null, global);
goog.exportSymbol('proto.md.ClientMessage', null, global);
goog.exportSymbol('proto.md.ClientMessage.InnerCase', null, global);
goog.exportSymbol('proto.md.Config', null, global);
goog.exportSymbol('proto.md.Heartbeat', null, global);
goog.exportSymbol('proto.md.Kline', null, global);
goog.exportSymbol('proto.md.KlineInterval', null, global);
goog.exportSymbol('proto.md.MarketByOrder', null, global);
goog.exportSymbol('proto.md.MarketByOrder.Order', null, global);
goog.exportSymbol('proto.md.MarketByOrderDiff', null, global);
goog.exportSymbol('proto.md.MarketByOrderDiff.Diff', null, global);
goog.exportSymbol('proto.md.MarketByOrderDiff.OrderOp', null, global);
goog.exportSymbol('proto.md.MarketByPrice', null, global);
goog.exportSymbol('proto.md.MarketByPrice.Level', null, global);
goog.exportSymbol('proto.md.MarketByPriceDiff', null, global);
goog.exportSymbol('proto.md.MarketByPriceDiff.Diff', null, global);
goog.exportSymbol('proto.md.MarketByPriceDiff.DiffOp', null, global);
goog.exportSymbol('proto.md.MdMessage', null, global);
goog.exportSymbol('proto.md.MdMessage.InnerCase', null, global);
goog.exportSymbol('proto.md.MdMessages', null, global);
goog.exportSymbol('proto.md.Side', null, global);
goog.exportSymbol('proto.md.Summary', null, global);
goog.exportSymbol('proto.md.TopOfBook', null, global);
goog.exportSymbol('proto.md.TopOfBooks', null, global);
goog.exportSymbol('proto.md.Trades', null, global);
goog.exportSymbol('proto.md.Trades.Trade', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MdMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.md.MdMessage.oneofGroups_);
};
goog.inherits(proto.md.MdMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MdMessage.displayName = 'proto.md.MdMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.MarketByPrice.repeatedFields_, null);
};
goog.inherits(proto.md.MarketByPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByPrice.displayName = 'proto.md.MarketByPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByPrice.Level = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.MarketByPrice.Level, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByPrice.Level.displayName = 'proto.md.MarketByPrice.Level';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByPriceDiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.MarketByPriceDiff.repeatedFields_, null);
};
goog.inherits(proto.md.MarketByPriceDiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByPriceDiff.displayName = 'proto.md.MarketByPriceDiff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByPriceDiff.Diff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.MarketByPriceDiff.Diff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByPriceDiff.Diff.displayName = 'proto.md.MarketByPriceDiff.Diff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.MarketByOrder.repeatedFields_, null);
};
goog.inherits(proto.md.MarketByOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByOrder.displayName = 'proto.md.MarketByOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByOrder.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.MarketByOrder.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByOrder.Order.displayName = 'proto.md.MarketByOrder.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByOrderDiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.MarketByOrderDiff.repeatedFields_, null);
};
goog.inherits(proto.md.MarketByOrderDiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByOrderDiff.displayName = 'proto.md.MarketByOrderDiff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MarketByOrderDiff.Diff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.MarketByOrderDiff.Diff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MarketByOrderDiff.Diff.displayName = 'proto.md.MarketByOrderDiff.Diff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.Trades = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.Trades.repeatedFields_, null);
};
goog.inherits(proto.md.Trades, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.Trades.displayName = 'proto.md.Trades';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.Trades.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.Trades.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.Trades.Trade.displayName = 'proto.md.Trades.Trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.Summary.displayName = 'proto.md.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.Kline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.Kline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.Kline.displayName = 'proto.md.Kline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.Heartbeat.displayName = 'proto.md.Heartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.MdMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.MdMessages.repeatedFields_, null);
};
goog.inherits(proto.md.MdMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.MdMessages.displayName = 'proto.md.MdMessages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.AggMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.md.AggMessage.oneofGroups_);
};
goog.inherits(proto.md.AggMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.AggMessage.displayName = 'proto.md.AggMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.TopOfBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.md.TopOfBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.TopOfBook.displayName = 'proto.md.TopOfBook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.TopOfBooks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.TopOfBooks.repeatedFields_, null);
};
goog.inherits(proto.md.TopOfBooks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.TopOfBooks.displayName = 'proto.md.TopOfBooks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.md.ClientMessage.oneofGroups_);
};
goog.inherits(proto.md.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.ClientMessage.displayName = 'proto.md.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.md.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.md.Config.repeatedFields_, null);
};
goog.inherits(proto.md.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.md.Config.displayName = 'proto.md.Config';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.md.MdMessage.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.md.MdMessage.InnerCase = {
  INNER_NOT_SET: 0,
  HEARTBEAT: 1,
  SUMMARY: 2,
  TRADES: 3,
  MBOSNAPSHOT: 4,
  MBODIFF: 5,
  MBPSNAPSHOT: 6,
  MBPDIFF: 7,
  KLINE: 8
};

/**
 * @return {proto.md.MdMessage.InnerCase}
 */
proto.md.MdMessage.prototype.getInnerCase = function() {
  return /** @type {proto.md.MdMessage.InnerCase} */(jspb.Message.computeOneofCase(this, proto.md.MdMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MdMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MdMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MdMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MdMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.md.Heartbeat.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.md.Summary.toObject(includeInstance, f),
    trades: (f = msg.getTrades()) && proto.md.Trades.toObject(includeInstance, f),
    mbosnapshot: (f = msg.getMbosnapshot()) && proto.md.MarketByOrder.toObject(includeInstance, f),
    mbodiff: (f = msg.getMbodiff()) && proto.md.MarketByOrderDiff.toObject(includeInstance, f),
    mbpsnapshot: (f = msg.getMbpsnapshot()) && proto.md.MarketByPrice.toObject(includeInstance, f),
    mbpdiff: (f = msg.getMbpdiff()) && proto.md.MarketByPriceDiff.toObject(includeInstance, f),
    kline: (f = msg.getKline()) && proto.md.Kline.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MdMessage}
 */
proto.md.MdMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MdMessage;
  return proto.md.MdMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MdMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MdMessage}
 */
proto.md.MdMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.Heartbeat;
      reader.readMessage(value,proto.md.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.md.Summary;
      reader.readMessage(value,proto.md.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 3:
      var value = new proto.md.Trades;
      reader.readMessage(value,proto.md.Trades.deserializeBinaryFromReader);
      msg.setTrades(value);
      break;
    case 4:
      var value = new proto.md.MarketByOrder;
      reader.readMessage(value,proto.md.MarketByOrder.deserializeBinaryFromReader);
      msg.setMbosnapshot(value);
      break;
    case 5:
      var value = new proto.md.MarketByOrderDiff;
      reader.readMessage(value,proto.md.MarketByOrderDiff.deserializeBinaryFromReader);
      msg.setMbodiff(value);
      break;
    case 6:
      var value = new proto.md.MarketByPrice;
      reader.readMessage(value,proto.md.MarketByPrice.deserializeBinaryFromReader);
      msg.setMbpsnapshot(value);
      break;
    case 7:
      var value = new proto.md.MarketByPriceDiff;
      reader.readMessage(value,proto.md.MarketByPriceDiff.deserializeBinaryFromReader);
      msg.setMbpdiff(value);
      break;
    case 8:
      var value = new proto.md.Kline;
      reader.readMessage(value,proto.md.Kline.deserializeBinaryFromReader);
      msg.setKline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MdMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MdMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MdMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MdMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.md.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.md.Summary.serializeBinaryToWriter
    );
  }
  f = message.getTrades();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.md.Trades.serializeBinaryToWriter
    );
  }
  f = message.getMbosnapshot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.md.MarketByOrder.serializeBinaryToWriter
    );
  }
  f = message.getMbodiff();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.md.MarketByOrderDiff.serializeBinaryToWriter
    );
  }
  f = message.getMbpsnapshot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.md.MarketByPrice.serializeBinaryToWriter
    );
  }
  f = message.getMbpdiff();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.md.MarketByPriceDiff.serializeBinaryToWriter
    );
  }
  f = message.getKline();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.md.Kline.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.md.Heartbeat}
 */
proto.md.MdMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.md.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.md.Heartbeat, 1));
};


/**
 * @param {?proto.md.Heartbeat|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Summary summary = 2;
 * @return {?proto.md.Summary}
 */
proto.md.MdMessage.prototype.getSummary = function() {
  return /** @type{?proto.md.Summary} */ (
    jspb.Message.getWrapperField(this, proto.md.Summary, 2));
};


/**
 * @param {?proto.md.Summary|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setSummary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearSummary = function() {
  return this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Trades trades = 3;
 * @return {?proto.md.Trades}
 */
proto.md.MdMessage.prototype.getTrades = function() {
  return /** @type{?proto.md.Trades} */ (
    jspb.Message.getWrapperField(this, proto.md.Trades, 3));
};


/**
 * @param {?proto.md.Trades|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setTrades = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearTrades = function() {
  return this.setTrades(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasTrades = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MarketByOrder mboSnapshot = 4;
 * @return {?proto.md.MarketByOrder}
 */
proto.md.MdMessage.prototype.getMbosnapshot = function() {
  return /** @type{?proto.md.MarketByOrder} */ (
    jspb.Message.getWrapperField(this, proto.md.MarketByOrder, 4));
};


/**
 * @param {?proto.md.MarketByOrder|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setMbosnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearMbosnapshot = function() {
  return this.setMbosnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasMbosnapshot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MarketByOrderDiff mboDiff = 5;
 * @return {?proto.md.MarketByOrderDiff}
 */
proto.md.MdMessage.prototype.getMbodiff = function() {
  return /** @type{?proto.md.MarketByOrderDiff} */ (
    jspb.Message.getWrapperField(this, proto.md.MarketByOrderDiff, 5));
};


/**
 * @param {?proto.md.MarketByOrderDiff|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setMbodiff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearMbodiff = function() {
  return this.setMbodiff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasMbodiff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MarketByPrice mbpSnapshot = 6;
 * @return {?proto.md.MarketByPrice}
 */
proto.md.MdMessage.prototype.getMbpsnapshot = function() {
  return /** @type{?proto.md.MarketByPrice} */ (
    jspb.Message.getWrapperField(this, proto.md.MarketByPrice, 6));
};


/**
 * @param {?proto.md.MarketByPrice|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setMbpsnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearMbpsnapshot = function() {
  return this.setMbpsnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasMbpsnapshot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MarketByPriceDiff mbpDiff = 7;
 * @return {?proto.md.MarketByPriceDiff}
 */
proto.md.MdMessage.prototype.getMbpdiff = function() {
  return /** @type{?proto.md.MarketByPriceDiff} */ (
    jspb.Message.getWrapperField(this, proto.md.MarketByPriceDiff, 7));
};


/**
 * @param {?proto.md.MarketByPriceDiff|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setMbpdiff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearMbpdiff = function() {
  return this.setMbpdiff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasMbpdiff = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Kline kline = 8;
 * @return {?proto.md.Kline}
 */
proto.md.MdMessage.prototype.getKline = function() {
  return /** @type{?proto.md.Kline} */ (
    jspb.Message.getWrapperField(this, proto.md.Kline, 8));
};


/**
 * @param {?proto.md.Kline|undefined} value
 * @return {!proto.md.MdMessage} returns this
*/
proto.md.MdMessage.prototype.setKline = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.md.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.MdMessage} returns this
 */
proto.md.MdMessage.prototype.clearKline = function() {
  return this.setKline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.MdMessage.prototype.hasKline = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.MarketByPrice.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    levelsList: jspb.Message.toObjectList(msg.getLevelsList(),
    proto.md.MarketByPrice.Level.toObject, includeInstance),
    chunk: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numchunks: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByPrice}
 */
proto.md.MarketByPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByPrice;
  return proto.md.MarketByPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByPrice}
 */
proto.md.MarketByPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.MarketByPrice.Level;
      reader.readMessage(value,proto.md.MarketByPrice.Level.deserializeBinaryFromReader);
      msg.addLevels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumchunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.MarketByPrice.Level.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumchunks();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByPrice.Level.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByPrice.Level.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByPrice.Level} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPrice.Level.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    side: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByPrice.Level}
 */
proto.md.MarketByPrice.Level.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByPrice.Level;
  return proto.md.MarketByPrice.Level.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByPrice.Level} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByPrice.Level}
 */
proto.md.MarketByPrice.Level.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {!proto.md.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByPrice.Level.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByPrice.Level.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByPrice.Level} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPrice.Level.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.md.MarketByPrice.Level.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPrice.Level} returns this
 */
proto.md.MarketByPrice.Level.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.md.MarketByPrice.Level.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPrice.Level} returns this
 */
proto.md.MarketByPrice.Level.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side side = 3;
 * @return {!proto.md.Side}
 */
proto.md.MarketByPrice.Level.prototype.getSide = function() {
  return /** @type {!proto.md.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.md.Side} value
 * @return {!proto.md.MarketByPrice.Level} returns this
 */
proto.md.MarketByPrice.Level.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Level levels = 1;
 * @return {!Array<!proto.md.MarketByPrice.Level>}
 */
proto.md.MarketByPrice.prototype.getLevelsList = function() {
  return /** @type{!Array<!proto.md.MarketByPrice.Level>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.MarketByPrice.Level, 1));
};


/**
 * @param {!Array<!proto.md.MarketByPrice.Level>} value
 * @return {!proto.md.MarketByPrice} returns this
*/
proto.md.MarketByPrice.prototype.setLevelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.MarketByPrice.Level=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.MarketByPrice.Level}
 */
proto.md.MarketByPrice.prototype.addLevels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.MarketByPrice.Level, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.MarketByPrice} returns this
 */
proto.md.MarketByPrice.prototype.clearLevelsList = function() {
  return this.setLevelsList([]);
};


/**
 * optional uint32 chunk = 2;
 * @return {number}
 */
proto.md.MarketByPrice.prototype.getChunk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPrice} returns this
 */
proto.md.MarketByPrice.prototype.setChunk = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 numChunks = 3;
 * @return {number}
 */
proto.md.MarketByPrice.prototype.getNumchunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPrice} returns this
 */
proto.md.MarketByPrice.prototype.setNumchunks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.MarketByPriceDiff.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByPriceDiff.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByPriceDiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByPriceDiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPriceDiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    diffsList: jspb.Message.toObjectList(msg.getDiffsList(),
    proto.md.MarketByPriceDiff.Diff.toObject, includeInstance),
    totalbidlevels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalasklevels: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByPriceDiff}
 */
proto.md.MarketByPriceDiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByPriceDiff;
  return proto.md.MarketByPriceDiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByPriceDiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByPriceDiff}
 */
proto.md.MarketByPriceDiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.MarketByPriceDiff.Diff;
      reader.readMessage(value,proto.md.MarketByPriceDiff.Diff.deserializeBinaryFromReader);
      msg.addDiffs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalbidlevels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalasklevels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByPriceDiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByPriceDiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByPriceDiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPriceDiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiffsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.MarketByPriceDiff.Diff.serializeBinaryToWriter
    );
  }
  f = message.getTotalbidlevels();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalasklevels();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.md.MarketByPriceDiff.DiffOp = {
  ADD: 0,
  REMOVE: 1,
  REPLACE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByPriceDiff.Diff.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByPriceDiff.Diff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByPriceDiff.Diff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPriceDiff.Diff.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    side: jspb.Message.getFieldWithDefault(msg, 3, 0),
    op: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByPriceDiff.Diff}
 */
proto.md.MarketByPriceDiff.Diff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByPriceDiff.Diff;
  return proto.md.MarketByPriceDiff.Diff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByPriceDiff.Diff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByPriceDiff.Diff}
 */
proto.md.MarketByPriceDiff.Diff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {!proto.md.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {!proto.md.MarketByPriceDiff.DiffOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByPriceDiff.Diff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByPriceDiff.Diff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByPriceDiff.Diff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByPriceDiff.Diff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.md.MarketByPriceDiff.Diff.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPriceDiff.Diff} returns this
 */
proto.md.MarketByPriceDiff.Diff.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.md.MarketByPriceDiff.Diff.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPriceDiff.Diff} returns this
 */
proto.md.MarketByPriceDiff.Diff.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side side = 3;
 * @return {!proto.md.Side}
 */
proto.md.MarketByPriceDiff.Diff.prototype.getSide = function() {
  return /** @type {!proto.md.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.md.Side} value
 * @return {!proto.md.MarketByPriceDiff.Diff} returns this
 */
proto.md.MarketByPriceDiff.Diff.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional DiffOp op = 4;
 * @return {!proto.md.MarketByPriceDiff.DiffOp}
 */
proto.md.MarketByPriceDiff.Diff.prototype.getOp = function() {
  return /** @type {!proto.md.MarketByPriceDiff.DiffOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.md.MarketByPriceDiff.DiffOp} value
 * @return {!proto.md.MarketByPriceDiff.Diff} returns this
 */
proto.md.MarketByPriceDiff.Diff.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated Diff diffs = 1;
 * @return {!Array<!proto.md.MarketByPriceDiff.Diff>}
 */
proto.md.MarketByPriceDiff.prototype.getDiffsList = function() {
  return /** @type{!Array<!proto.md.MarketByPriceDiff.Diff>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.MarketByPriceDiff.Diff, 1));
};


/**
 * @param {!Array<!proto.md.MarketByPriceDiff.Diff>} value
 * @return {!proto.md.MarketByPriceDiff} returns this
*/
proto.md.MarketByPriceDiff.prototype.setDiffsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.MarketByPriceDiff.Diff=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.MarketByPriceDiff.Diff}
 */
proto.md.MarketByPriceDiff.prototype.addDiffs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.MarketByPriceDiff.Diff, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.MarketByPriceDiff} returns this
 */
proto.md.MarketByPriceDiff.prototype.clearDiffsList = function() {
  return this.setDiffsList([]);
};


/**
 * optional uint32 totalBidLevels = 2;
 * @return {number}
 */
proto.md.MarketByPriceDiff.prototype.getTotalbidlevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPriceDiff} returns this
 */
proto.md.MarketByPriceDiff.prototype.setTotalbidlevels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 totalAskLevels = 3;
 * @return {number}
 */
proto.md.MarketByPriceDiff.prototype.getTotalasklevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByPriceDiff} returns this
 */
proto.md.MarketByPriceDiff.prototype.setTotalasklevels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.MarketByOrder.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.md.MarketByOrder.Order.toObject, includeInstance),
    chunk: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numchunks: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByOrder}
 */
proto.md.MarketByOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByOrder;
  return proto.md.MarketByOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByOrder}
 */
proto.md.MarketByOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.MarketByOrder.Order;
      reader.readMessage(value,proto.md.MarketByOrder.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumchunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.MarketByOrder.Order.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumchunks();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByOrder.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByOrder.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByOrder.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrder.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    exchangeorderid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByOrder.Order}
 */
proto.md.MarketByOrder.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByOrder.Order;
  return proto.md.MarketByOrder.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByOrder.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByOrder.Order}
 */
proto.md.MarketByOrder.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeorderid(value);
      break;
    case 4:
      var value = /** @type {!proto.md.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByOrder.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByOrder.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByOrder.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrder.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.md.MarketByOrder.Order.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrder.Order} returns this
 */
proto.md.MarketByOrder.Order.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.md.MarketByOrder.Order.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrder.Order} returns this
 */
proto.md.MarketByOrder.Order.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 exchangeOrderId = 3;
 * @return {number}
 */
proto.md.MarketByOrder.Order.prototype.getExchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrder.Order} returns this
 */
proto.md.MarketByOrder.Order.prototype.setExchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Side side = 4;
 * @return {!proto.md.Side}
 */
proto.md.MarketByOrder.Order.prototype.getSide = function() {
  return /** @type {!proto.md.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.md.Side} value
 * @return {!proto.md.MarketByOrder.Order} returns this
 */
proto.md.MarketByOrder.Order.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated Order orders = 1;
 * @return {!Array<!proto.md.MarketByOrder.Order>}
 */
proto.md.MarketByOrder.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.md.MarketByOrder.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.MarketByOrder.Order, 1));
};


/**
 * @param {!Array<!proto.md.MarketByOrder.Order>} value
 * @return {!proto.md.MarketByOrder} returns this
*/
proto.md.MarketByOrder.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.MarketByOrder.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.MarketByOrder.Order}
 */
proto.md.MarketByOrder.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.MarketByOrder.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.MarketByOrder} returns this
 */
proto.md.MarketByOrder.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * optional uint32 chunk = 2;
 * @return {number}
 */
proto.md.MarketByOrder.prototype.getChunk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrder} returns this
 */
proto.md.MarketByOrder.prototype.setChunk = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 numChunks = 3;
 * @return {number}
 */
proto.md.MarketByOrder.prototype.getNumchunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrder} returns this
 */
proto.md.MarketByOrder.prototype.setNumchunks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.MarketByOrderDiff.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByOrderDiff.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByOrderDiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByOrderDiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrderDiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    diffsList: jspb.Message.toObjectList(msg.getDiffsList(),
    proto.md.MarketByOrderDiff.Diff.toObject, includeInstance),
    totalbidlevels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalasklevels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalbidorders: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalaskorders: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByOrderDiff}
 */
proto.md.MarketByOrderDiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByOrderDiff;
  return proto.md.MarketByOrderDiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByOrderDiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByOrderDiff}
 */
proto.md.MarketByOrderDiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.MarketByOrderDiff.Diff;
      reader.readMessage(value,proto.md.MarketByOrderDiff.Diff.deserializeBinaryFromReader);
      msg.addDiffs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalbidlevels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalasklevels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalbidorders(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalaskorders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByOrderDiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByOrderDiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByOrderDiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrderDiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiffsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.MarketByOrderDiff.Diff.serializeBinaryToWriter
    );
  }
  f = message.getTotalbidlevels();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalasklevels();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTotalbidorders();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTotalaskorders();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.md.MarketByOrderDiff.OrderOp = {
  ADD: 0,
  REMOVE: 1,
  REPLACE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MarketByOrderDiff.Diff.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MarketByOrderDiff.Diff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MarketByOrderDiff.Diff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrderDiff.Diff.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    exchangeorderid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0),
    op: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MarketByOrderDiff.Diff}
 */
proto.md.MarketByOrderDiff.Diff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MarketByOrderDiff.Diff;
  return proto.md.MarketByOrderDiff.Diff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MarketByOrderDiff.Diff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MarketByOrderDiff.Diff}
 */
proto.md.MarketByOrderDiff.Diff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeorderid(value);
      break;
    case 4:
      var value = /** @type {!proto.md.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 5:
      var value = /** @type {!proto.md.MarketByOrderDiff.OrderOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MarketByOrderDiff.Diff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MarketByOrderDiff.Diff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MarketByOrderDiff.Diff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MarketByOrderDiff.Diff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.md.MarketByOrderDiff.Diff.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff.Diff} returns this
 */
proto.md.MarketByOrderDiff.Diff.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.md.MarketByOrderDiff.Diff.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff.Diff} returns this
 */
proto.md.MarketByOrderDiff.Diff.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 exchangeOrderId = 3;
 * @return {number}
 */
proto.md.MarketByOrderDiff.Diff.prototype.getExchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff.Diff} returns this
 */
proto.md.MarketByOrderDiff.Diff.prototype.setExchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Side side = 4;
 * @return {!proto.md.Side}
 */
proto.md.MarketByOrderDiff.Diff.prototype.getSide = function() {
  return /** @type {!proto.md.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.md.Side} value
 * @return {!proto.md.MarketByOrderDiff.Diff} returns this
 */
proto.md.MarketByOrderDiff.Diff.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional OrderOp op = 5;
 * @return {!proto.md.MarketByOrderDiff.OrderOp}
 */
proto.md.MarketByOrderDiff.Diff.prototype.getOp = function() {
  return /** @type {!proto.md.MarketByOrderDiff.OrderOp} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.md.MarketByOrderDiff.OrderOp} value
 * @return {!proto.md.MarketByOrderDiff.Diff} returns this
 */
proto.md.MarketByOrderDiff.Diff.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated Diff diffs = 1;
 * @return {!Array<!proto.md.MarketByOrderDiff.Diff>}
 */
proto.md.MarketByOrderDiff.prototype.getDiffsList = function() {
  return /** @type{!Array<!proto.md.MarketByOrderDiff.Diff>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.MarketByOrderDiff.Diff, 1));
};


/**
 * @param {!Array<!proto.md.MarketByOrderDiff.Diff>} value
 * @return {!proto.md.MarketByOrderDiff} returns this
*/
proto.md.MarketByOrderDiff.prototype.setDiffsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.MarketByOrderDiff.Diff=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.MarketByOrderDiff.Diff}
 */
proto.md.MarketByOrderDiff.prototype.addDiffs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.MarketByOrderDiff.Diff, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.MarketByOrderDiff} returns this
 */
proto.md.MarketByOrderDiff.prototype.clearDiffsList = function() {
  return this.setDiffsList([]);
};


/**
 * optional uint32 totalBidLevels = 2;
 * @return {number}
 */
proto.md.MarketByOrderDiff.prototype.getTotalbidlevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff} returns this
 */
proto.md.MarketByOrderDiff.prototype.setTotalbidlevels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 totalAskLevels = 3;
 * @return {number}
 */
proto.md.MarketByOrderDiff.prototype.getTotalasklevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff} returns this
 */
proto.md.MarketByOrderDiff.prototype.setTotalasklevels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 totalBidOrders = 4;
 * @return {number}
 */
proto.md.MarketByOrderDiff.prototype.getTotalbidorders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff} returns this
 */
proto.md.MarketByOrderDiff.prototype.setTotalbidorders = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 totalAskOrders = 5;
 * @return {number}
 */
proto.md.MarketByOrderDiff.prototype.getTotalaskorders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.MarketByOrderDiff} returns this
 */
proto.md.MarketByOrderDiff.prototype.setTotalaskorders = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.Trades.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.Trades.prototype.toObject = function(opt_includeInstance) {
  return proto.md.Trades.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.Trades} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Trades.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.md.Trades.Trade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.Trades}
 */
proto.md.Trades.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.Trades;
  return proto.md.Trades.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.Trades} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.Trades}
 */
proto.md.Trades.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.Trades.Trade;
      reader.readMessage(value,proto.md.Trades.Trade.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.Trades.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.Trades.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.Trades} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Trades.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.Trades.Trade.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.Trades.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.md.Trades.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.Trades.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Trades.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aggressingside: jspb.Message.getFieldWithDefault(msg, 3, 0),
    restingexchangeorderid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fillquantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    aggressingexchangeorderid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.Trades.Trade}
 */
proto.md.Trades.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.Trades.Trade;
  return proto.md.Trades.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.Trades.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.Trades.Trade}
 */
proto.md.Trades.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {!proto.md.Side} */ (reader.readEnum());
      msg.setAggressingside(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestingexchangeorderid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFillquantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAggressingexchangeorderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.Trades.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.Trades.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.Trades.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Trades.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAggressingside();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRestingexchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFillquantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getAggressingexchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 tradeId = 1;
 * @return {number}
 */
proto.md.Trades.Trade.prototype.getTradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setTradeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 price = 2;
 * @return {number}
 */
proto.md.Trades.Trade.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side aggressingSide = 3;
 * @return {!proto.md.Side}
 */
proto.md.Trades.Trade.prototype.getAggressingside = function() {
  return /** @type {!proto.md.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.md.Side} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setAggressingside = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 restingExchangeOrderId = 4;
 * @return {number}
 */
proto.md.Trades.Trade.prototype.getRestingexchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setRestingexchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fillQuantity = 5;
 * @return {number}
 */
proto.md.Trades.Trade.prototype.getFillquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setFillquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 transactTime = 6;
 * @return {number}
 */
proto.md.Trades.Trade.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 aggressingExchangeOrderId = 7;
 * @return {number}
 */
proto.md.Trades.Trade.prototype.getAggressingexchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Trades.Trade} returns this
 */
proto.md.Trades.Trade.prototype.setAggressingexchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated Trade trades = 1;
 * @return {!Array<!proto.md.Trades.Trade>}
 */
proto.md.Trades.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.md.Trades.Trade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.Trades.Trade, 1));
};


/**
 * @param {!Array<!proto.md.Trades.Trade>} value
 * @return {!proto.md.Trades} returns this
*/
proto.md.Trades.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.Trades.Trade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.Trades.Trade}
 */
proto.md.Trades.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.Trades.Trade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.Trades} returns this
 */
proto.md.Trades.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.md.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    low: jspb.Message.getFieldWithDefault(msg, 1, 0),
    high: jspb.Message.getFieldWithDefault(msg, 2, 0),
    basevolumelo: jspb.Message.getFieldWithDefault(msg, 3, 0),
    basevolumehi: jspb.Message.getFieldWithDefault(msg, 4, 0),
    quotevolumelo: jspb.Message.getFieldWithDefault(msg, 5, 0),
    quotevolumehi: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.Summary}
 */
proto.md.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.Summary;
  return proto.md.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.Summary}
 */
proto.md.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBasevolumelo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBasevolumehi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuotevolumelo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuotevolumehi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLow();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBasevolumelo();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBasevolumehi();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getQuotevolumelo();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getQuotevolumehi();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 low = 1;
 * @return {number}
 */
proto.md.Summary.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Summary} returns this
 */
proto.md.Summary.prototype.setLow = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 high = 2;
 * @return {number}
 */
proto.md.Summary.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Summary} returns this
 */
proto.md.Summary.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 baseVolumeLo = 3;
 * @return {number}
 */
proto.md.Summary.prototype.getBasevolumelo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Summary} returns this
 */
proto.md.Summary.prototype.setBasevolumelo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 baseVolumeHi = 4;
 * @return {number}
 */
proto.md.Summary.prototype.getBasevolumehi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Summary} returns this
 */
proto.md.Summary.prototype.setBasevolumehi = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 quoteVolumeLo = 5;
 * @return {number}
 */
proto.md.Summary.prototype.getQuotevolumelo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Summary} returns this
 */
proto.md.Summary.prototype.setQuotevolumelo = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 quoteVolumeHi = 6;
 * @return {number}
 */
proto.md.Summary.prototype.getQuotevolumehi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Summary} returns this
 */
proto.md.Summary.prototype.setQuotevolumehi = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.Kline.prototype.toObject = function(opt_includeInstance) {
  return proto.md.Kline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.Kline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Kline.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    open: jspb.Message.getFieldWithDefault(msg, 3, 0),
    close: jspb.Message.getFieldWithDefault(msg, 4, 0),
    high: jspb.Message.getFieldWithDefault(msg, 5, 0),
    low: jspb.Message.getFieldWithDefault(msg, 6, 0),
    volumelo: jspb.Message.getFieldWithDefault(msg, 7, 0),
    volumehi: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.Kline}
 */
proto.md.Kline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.Kline;
  return proto.md.Kline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.Kline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.Kline}
 */
proto.md.Kline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.md.KlineInterval} */ (reader.readEnum());
      msg.setInterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStarttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClose(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHigh(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumelo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumehi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.Kline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.Kline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.Kline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Kline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getVolumelo();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getVolumehi();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional KlineInterval interval = 1;
 * @return {!proto.md.KlineInterval}
 */
proto.md.Kline.prototype.getInterval = function() {
  return /** @type {!proto.md.KlineInterval} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.md.KlineInterval} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setInterval = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 startTime = 2;
 * @return {number}
 */
proto.md.Kline.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 open = 3;
 * @return {number}
 */
proto.md.Kline.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 close = 4;
 * @return {number}
 */
proto.md.Kline.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 high = 5;
 * @return {number}
 */
proto.md.Kline.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 low = 6;
 * @return {number}
 */
proto.md.Kline.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setLow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 volumeLo = 7;
 * @return {number}
 */
proto.md.Kline.prototype.getVolumelo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setVolumelo = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 volumeHi = 8;
 * @return {number}
 */
proto.md.Kline.prototype.getVolumehi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Kline} returns this
 */
proto.md.Kline.prototype.setVolumehi = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.md.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.Heartbeat}
 */
proto.md.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.Heartbeat;
  return proto.md.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.Heartbeat}
 */
proto.md.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 requestId = 1;
 * @return {number}
 */
proto.md.Heartbeat.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Heartbeat} returns this
 */
proto.md.Heartbeat.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.md.Heartbeat.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.Heartbeat} returns this
 */
proto.md.Heartbeat.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.MdMessages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.MdMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.md.MdMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.MdMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MdMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.md.MdMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.MdMessages}
 */
proto.md.MdMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.MdMessages;
  return proto.md.MdMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.MdMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.MdMessages}
 */
proto.md.MdMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.MdMessage;
      reader.readMessage(value,proto.md.MdMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.MdMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.MdMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.MdMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.MdMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.MdMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MdMessage messages = 1;
 * @return {!Array<!proto.md.MdMessage>}
 */
proto.md.MdMessages.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.md.MdMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.MdMessage, 1));
};


/**
 * @param {!Array<!proto.md.MdMessage>} value
 * @return {!proto.md.MdMessages} returns this
*/
proto.md.MdMessages.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.MdMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.MdMessage}
 */
proto.md.MdMessages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.MdMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.MdMessages} returns this
 */
proto.md.MdMessages.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.md.AggMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.md.AggMessage.InnerCase = {
  INNER_NOT_SET: 0,
  HEARTBEAT: 1,
  TOPOFBOOKS: 2
};

/**
 * @return {proto.md.AggMessage.InnerCase}
 */
proto.md.AggMessage.prototype.getInnerCase = function() {
  return /** @type {proto.md.AggMessage.InnerCase} */(jspb.Message.computeOneofCase(this, proto.md.AggMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.AggMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.md.AggMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.AggMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.AggMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.md.Heartbeat.toObject(includeInstance, f),
    topofbooks: (f = msg.getTopofbooks()) && proto.md.TopOfBooks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.AggMessage}
 */
proto.md.AggMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.AggMessage;
  return proto.md.AggMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.AggMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.AggMessage}
 */
proto.md.AggMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.Heartbeat;
      reader.readMessage(value,proto.md.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.md.TopOfBooks;
      reader.readMessage(value,proto.md.TopOfBooks.deserializeBinaryFromReader);
      msg.setTopofbooks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.AggMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.AggMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.AggMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.AggMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.md.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getTopofbooks();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.md.TopOfBooks.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.md.Heartbeat}
 */
proto.md.AggMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.md.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.md.Heartbeat, 1));
};


/**
 * @param {?proto.md.Heartbeat|undefined} value
 * @return {!proto.md.AggMessage} returns this
*/
proto.md.AggMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.md.AggMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.AggMessage} returns this
 */
proto.md.AggMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.AggMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TopOfBooks topOfBooks = 2;
 * @return {?proto.md.TopOfBooks}
 */
proto.md.AggMessage.prototype.getTopofbooks = function() {
  return /** @type{?proto.md.TopOfBooks} */ (
    jspb.Message.getWrapperField(this, proto.md.TopOfBooks, 2));
};


/**
 * @param {?proto.md.TopOfBooks|undefined} value
 * @return {!proto.md.AggMessage} returns this
*/
proto.md.AggMessage.prototype.setTopofbooks = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.md.AggMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.AggMessage} returns this
 */
proto.md.AggMessage.prototype.clearTopofbooks = function() {
  return this.setTopofbooks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.AggMessage.prototype.hasTopofbooks = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.TopOfBook.prototype.toObject = function(opt_includeInstance) {
  return proto.md.TopOfBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.TopOfBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.TopOfBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bidprice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bidquantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    askprice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    askquantity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastprice: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.TopOfBook}
 */
proto.md.TopOfBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.TopOfBook;
  return proto.md.TopOfBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.TopOfBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.TopOfBook}
 */
proto.md.TopOfBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBidprice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBidquantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAskprice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAskquantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.TopOfBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.TopOfBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.TopOfBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.TopOfBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBidprice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBidquantity();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAskprice();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getAskquantity();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLastprice();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 marketId = 1;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 transactTime = 2;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bidPrice = 3;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getBidprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setBidprice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 bidQuantity = 4;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getBidquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setBidquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 askPrice = 5;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getAskprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setAskprice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 askQuantity = 6;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getAskquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setAskquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 lastPrice = 7;
 * @return {number}
 */
proto.md.TopOfBook.prototype.getLastprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.md.TopOfBook} returns this
 */
proto.md.TopOfBook.prototype.setLastprice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.TopOfBooks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.TopOfBooks.prototype.toObject = function(opt_includeInstance) {
  return proto.md.TopOfBooks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.TopOfBooks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.TopOfBooks.toObject = function(includeInstance, msg) {
  var f, obj = {
    topsList: jspb.Message.toObjectList(msg.getTopsList(),
    proto.md.TopOfBook.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.TopOfBooks}
 */
proto.md.TopOfBooks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.TopOfBooks;
  return proto.md.TopOfBooks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.TopOfBooks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.TopOfBooks}
 */
proto.md.TopOfBooks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.TopOfBook;
      reader.readMessage(value,proto.md.TopOfBook.deserializeBinaryFromReader);
      msg.addTops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.TopOfBooks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.TopOfBooks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.TopOfBooks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.TopOfBooks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.md.TopOfBook.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TopOfBook tops = 1;
 * @return {!Array<!proto.md.TopOfBook>}
 */
proto.md.TopOfBooks.prototype.getTopsList = function() {
  return /** @type{!Array<!proto.md.TopOfBook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.md.TopOfBook, 1));
};


/**
 * @param {!Array<!proto.md.TopOfBook>} value
 * @return {!proto.md.TopOfBooks} returns this
*/
proto.md.TopOfBooks.prototype.setTopsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.md.TopOfBook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.md.TopOfBook}
 */
proto.md.TopOfBooks.prototype.addTops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.md.TopOfBook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.TopOfBooks} returns this
 */
proto.md.TopOfBooks.prototype.clearTopsList = function() {
  return this.setTopsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.md.ClientMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.md.ClientMessage.InnerCase = {
  INNER_NOT_SET: 0,
  HEARTBEAT: 1,
  CONFIG: 2
};

/**
 * @return {proto.md.ClientMessage.InnerCase}
 */
proto.md.ClientMessage.prototype.getInnerCase = function() {
  return /** @type {proto.md.ClientMessage.InnerCase} */(jspb.Message.computeOneofCase(this, proto.md.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.md.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.md.Heartbeat.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.md.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.ClientMessage}
 */
proto.md.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.ClientMessage;
  return proto.md.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.ClientMessage}
 */
proto.md.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.md.Heartbeat;
      reader.readMessage(value,proto.md.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.md.Config;
      reader.readMessage(value,proto.md.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.md.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.md.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.md.Heartbeat}
 */
proto.md.ClientMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.md.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.md.Heartbeat, 1));
};


/**
 * @param {?proto.md.Heartbeat|undefined} value
 * @return {!proto.md.ClientMessage} returns this
*/
proto.md.ClientMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.md.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.ClientMessage} returns this
 */
proto.md.ClientMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.ClientMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Config config = 2;
 * @return {?proto.md.Config}
 */
proto.md.ClientMessage.prototype.getConfig = function() {
  return /** @type{?proto.md.Config} */ (
    jspb.Message.getWrapperField(this, proto.md.Config, 2));
};


/**
 * @param {?proto.md.Config|undefined} value
 * @return {!proto.md.ClientMessage} returns this
*/
proto.md.ClientMessage.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.md.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.md.ClientMessage} returns this
 */
proto.md.ClientMessage.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.md.ClientMessage.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.md.Config.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.md.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.md.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.md.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    mbp: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    mbo: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    trades: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    summary: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    klinesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.md.Config}
 */
proto.md.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.md.Config;
  return proto.md.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.md.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.md.Config}
 */
proto.md.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMbp(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMbo(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrades(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSummary(value);
      break;
    case 5:
      var values = /** @type {!Array<!proto.md.KlineInterval>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKlines(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.md.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.md.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.md.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.md.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMbp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMbo();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTrades();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSummary();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getKlinesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional bool mbp = 1;
 * @return {boolean}
 */
proto.md.Config.prototype.getMbp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.setMbp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool mbo = 2;
 * @return {boolean}
 */
proto.md.Config.prototype.getMbo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.setMbo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool trades = 3;
 * @return {boolean}
 */
proto.md.Config.prototype.getTrades = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.setTrades = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool summary = 4;
 * @return {boolean}
 */
proto.md.Config.prototype.getSummary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.setSummary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated KlineInterval klines = 5;
 * @return {!Array<!proto.md.KlineInterval>}
 */
proto.md.Config.prototype.getKlinesList = function() {
  return /** @type {!Array<!proto.md.KlineInterval>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.md.KlineInterval>} value
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.setKlinesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.md.KlineInterval} value
 * @param {number=} opt_index
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.addKlines = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.md.Config} returns this
 */
proto.md.Config.prototype.clearKlinesList = function() {
  return this.setKlinesList([]);
};


/**
 * @enum {number}
 */
proto.md.Side = {
  BID: 0,
  ASK: 1
};

/**
 * @enum {number}
 */
proto.md.KlineInterval = {
  S1: 0,
  M1: 1,
  M15: 2,
  H1: 3,
  H4: 4,
  D1: 5
};

goog.object.extend(exports, proto.md);
