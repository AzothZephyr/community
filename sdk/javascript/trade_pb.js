// source: trade.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.trade.AssetPosition', null, global);
goog.exportSymbol('proto.trade.AssetPositions', null, global);
goog.exportSymbol('proto.trade.Bootstrap', null, global);
goog.exportSymbol('proto.trade.Bootstrap.InnerCase', null, global);
goog.exportSymbol('proto.trade.CancelOrder', null, global);
goog.exportSymbol('proto.trade.CancelOrderAck', null, global);
goog.exportSymbol('proto.trade.CancelOrderAck.Reason', null, global);
goog.exportSymbol('proto.trade.CancelOrderReject', null, global);
goog.exportSymbol('proto.trade.CancelOrderReject.Reason', null, global);
goog.exportSymbol('proto.trade.Credentials', null, global);
goog.exportSymbol('proto.trade.Done', null, global);
goog.exportSymbol('proto.trade.Fill', null, global);
goog.exportSymbol('proto.trade.Heartbeat', null, global);
goog.exportSymbol('proto.trade.MassCancel', null, global);
goog.exportSymbol('proto.trade.MassCancelAck', null, global);
goog.exportSymbol('proto.trade.MassCancelAck.Reason', null, global);
goog.exportSymbol('proto.trade.ModifyOrder', null, global);
goog.exportSymbol('proto.trade.ModifyOrderAck', null, global);
goog.exportSymbol('proto.trade.ModifyOrderReject', null, global);
goog.exportSymbol('proto.trade.ModifyOrderReject.Reason', null, global);
goog.exportSymbol('proto.trade.NewOrder', null, global);
goog.exportSymbol('proto.trade.NewOrderAck', null, global);
goog.exportSymbol('proto.trade.NewOrderReject', null, global);
goog.exportSymbol('proto.trade.NewOrderReject.Reason', null, global);
goog.exportSymbol('proto.trade.OrderRequest', null, global);
goog.exportSymbol('proto.trade.OrderRequest.InnerCase', null, global);
goog.exportSymbol('proto.trade.OrderResponse', null, global);
goog.exportSymbol('proto.trade.OrderResponse.InnerCase', null, global);
goog.exportSymbol('proto.trade.OrderType', null, global);
goog.exportSymbol('proto.trade.PostOnly', null, global);
goog.exportSymbol('proto.trade.RawUnits', null, global);
goog.exportSymbol('proto.trade.RestingOrder', null, global);
goog.exportSymbol('proto.trade.RestingOrders', null, global);
goog.exportSymbol('proto.trade.SelfTradePrevention', null, global);
goog.exportSymbol('proto.trade.Side', null, global);
goog.exportSymbol('proto.trade.TimeInForce', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Credentials.displayName = 'proto.trade.Credentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.OrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.trade.OrderRequest.oneofGroups_);
};
goog.inherits(proto.trade.OrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.OrderRequest.displayName = 'proto.trade.OrderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.NewOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.NewOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.NewOrder.displayName = 'proto.trade.NewOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.CancelOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.CancelOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.CancelOrder.displayName = 'proto.trade.CancelOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.ModifyOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.ModifyOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.ModifyOrder.displayName = 'proto.trade.ModifyOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.MassCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.MassCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.MassCancel.displayName = 'proto.trade.MassCancel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Heartbeat.displayName = 'proto.trade.Heartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.OrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.trade.OrderResponse.oneofGroups_);
};
goog.inherits(proto.trade.OrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.OrderResponse.displayName = 'proto.trade.OrderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.NewOrderAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.NewOrderAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.NewOrderAck.displayName = 'proto.trade.NewOrderAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.CancelOrderAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.CancelOrderAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.CancelOrderAck.displayName = 'proto.trade.CancelOrderAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.ModifyOrderAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.ModifyOrderAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.ModifyOrderAck.displayName = 'proto.trade.ModifyOrderAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.MassCancelAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.MassCancelAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.MassCancelAck.displayName = 'proto.trade.MassCancelAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.NewOrderReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.NewOrderReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.NewOrderReject.displayName = 'proto.trade.NewOrderReject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.CancelOrderReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.CancelOrderReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.CancelOrderReject.displayName = 'proto.trade.CancelOrderReject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.ModifyOrderReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.ModifyOrderReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.ModifyOrderReject.displayName = 'proto.trade.ModifyOrderReject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Fill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Fill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Fill.displayName = 'proto.trade.Fill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.AssetPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.AssetPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.AssetPosition.displayName = 'proto.trade.AssetPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.RawUnits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.RawUnits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.RawUnits.displayName = 'proto.trade.RawUnits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Bootstrap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.trade.Bootstrap.oneofGroups_);
};
goog.inherits(proto.trade.Bootstrap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Bootstrap.displayName = 'proto.trade.Bootstrap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.RestingOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.trade.RestingOrders.repeatedFields_, null);
};
goog.inherits(proto.trade.RestingOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.RestingOrders.displayName = 'proto.trade.RestingOrders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.AssetPositions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.trade.AssetPositions.repeatedFields_, null);
};
goog.inherits(proto.trade.AssetPositions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.AssetPositions.displayName = 'proto.trade.AssetPositions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Done = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Done, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Done.displayName = 'proto.trade.Done';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.RestingOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.RestingOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.RestingOrder.displayName = 'proto.trade.RestingOrder';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesskeyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Credentials}
 */
proto.trade.Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Credentials;
  return proto.trade.Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Credentials}
 */
proto.trade.Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesskeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesskeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string accessKeyId = 1;
 * @return {string}
 */
proto.trade.Credentials.prototype.getAccesskeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.trade.Credentials} returns this
 */
proto.trade.Credentials.prototype.setAccesskeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.trade.Credentials.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.trade.Credentials} returns this
 */
proto.trade.Credentials.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.trade.Credentials.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Credentials} returns this
 */
proto.trade.Credentials.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.trade.OrderRequest.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.trade.OrderRequest.InnerCase = {
  INNER_NOT_SET: 0,
  NEW: 1,
  CANCEL: 2,
  MODIFY: 3,
  HEARTBEAT: 4,
  MC: 5
};

/**
 * @return {proto.trade.OrderRequest.InnerCase}
 */
proto.trade.OrderRequest.prototype.getInnerCase = function() {
  return /** @type {proto.trade.OrderRequest.InnerCase} */(jspb.Message.computeOneofCase(this, proto.trade.OrderRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.OrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.OrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.OrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_new: (f = msg.getNew()) && proto.trade.NewOrder.toObject(includeInstance, f),
    cancel: (f = msg.getCancel()) && proto.trade.CancelOrder.toObject(includeInstance, f),
    modify: (f = msg.getModify()) && proto.trade.ModifyOrder.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.trade.Heartbeat.toObject(includeInstance, f),
    mc: (f = msg.getMc()) && proto.trade.MassCancel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.OrderRequest}
 */
proto.trade.OrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.OrderRequest;
  return proto.trade.OrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.OrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.OrderRequest}
 */
proto.trade.OrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.NewOrder;
      reader.readMessage(value,proto.trade.NewOrder.deserializeBinaryFromReader);
      msg.setNew(value);
      break;
    case 2:
      var value = new proto.trade.CancelOrder;
      reader.readMessage(value,proto.trade.CancelOrder.deserializeBinaryFromReader);
      msg.setCancel(value);
      break;
    case 3:
      var value = new proto.trade.ModifyOrder;
      reader.readMessage(value,proto.trade.ModifyOrder.deserializeBinaryFromReader);
      msg.setModify(value);
      break;
    case 4:
      var value = new proto.trade.Heartbeat;
      reader.readMessage(value,proto.trade.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 5:
      var value = new proto.trade.MassCancel;
      reader.readMessage(value,proto.trade.MassCancel.deserializeBinaryFromReader);
      msg.setMc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.OrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.OrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.OrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNew();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trade.NewOrder.serializeBinaryToWriter
    );
  }
  f = message.getCancel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trade.CancelOrder.serializeBinaryToWriter
    );
  }
  f = message.getModify();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.ModifyOrder.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trade.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getMc();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.trade.MassCancel.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewOrder new = 1;
 * @return {?proto.trade.NewOrder}
 */
proto.trade.OrderRequest.prototype.getNew = function() {
  return /** @type{?proto.trade.NewOrder} */ (
    jspb.Message.getWrapperField(this, proto.trade.NewOrder, 1));
};


/**
 * @param {?proto.trade.NewOrder|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setNew = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearNew = function() {
  return this.setNew(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasNew = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CancelOrder cancel = 2;
 * @return {?proto.trade.CancelOrder}
 */
proto.trade.OrderRequest.prototype.getCancel = function() {
  return /** @type{?proto.trade.CancelOrder} */ (
    jspb.Message.getWrapperField(this, proto.trade.CancelOrder, 2));
};


/**
 * @param {?proto.trade.CancelOrder|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setCancel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearCancel = function() {
  return this.setCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasCancel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ModifyOrder modify = 3;
 * @return {?proto.trade.ModifyOrder}
 */
proto.trade.OrderRequest.prototype.getModify = function() {
  return /** @type{?proto.trade.ModifyOrder} */ (
    jspb.Message.getWrapperField(this, proto.trade.ModifyOrder, 3));
};


/**
 * @param {?proto.trade.ModifyOrder|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setModify = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearModify = function() {
  return this.setModify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasModify = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Heartbeat heartbeat = 4;
 * @return {?proto.trade.Heartbeat}
 */
proto.trade.OrderRequest.prototype.getHeartbeat = function() {
  return /** @type{?proto.trade.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.trade.Heartbeat, 4));
};


/**
 * @param {?proto.trade.Heartbeat|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MassCancel mc = 5;
 * @return {?proto.trade.MassCancel}
 */
proto.trade.OrderRequest.prototype.getMc = function() {
  return /** @type{?proto.trade.MassCancel} */ (
    jspb.Message.getWrapperField(this, proto.trade.MassCancel, 5));
};


/**
 * @param {?proto.trade.MassCancel|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setMc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearMc = function() {
  return this.setMc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasMc = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.NewOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.NewOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.NewOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientorderid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    side: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timeinforce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ordertype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    selftradeprevention: jspb.Message.getFieldWithDefault(msg, 10, 0),
    postonly: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.NewOrder}
 */
proto.trade.NewOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.NewOrder;
  return proto.trade.NewOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.NewOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.NewOrder}
 */
proto.trade.NewOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 7:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeinforce(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 10:
      var value = /** @type {!proto.trade.SelfTradePrevention} */ (reader.readEnum());
      msg.setSelftradeprevention(value);
      break;
    case 11:
      var value = /** @type {!proto.trade.PostOnly} */ (reader.readEnum());
      msg.setPostonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.NewOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.NewOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.NewOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTimeinforce();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getPostonly();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional uint64 clientOrderId = 1;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 requestId = 2;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 marketId = 3;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 price = 4;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrder.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 quantity = 5;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Side side = 6;
 * @return {!proto.trade.Side}
 */
proto.trade.NewOrder.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional TimeInForce timeInForce = 7;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.NewOrder.prototype.getTimeinforce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setTimeinforce = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional OrderType orderType = 8;
 * @return {!proto.trade.OrderType}
 */
proto.trade.NewOrder.prototype.getOrdertype = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setOrdertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional uint64 subaccountId = 9;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional SelfTradePrevention selfTradePrevention = 10;
 * @return {!proto.trade.SelfTradePrevention}
 */
proto.trade.NewOrder.prototype.getSelftradeprevention = function() {
  return /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.trade.SelfTradePrevention} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setSelftradeprevention = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.clearSelftradeprevention = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrder.prototype.hasSelftradeprevention = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PostOnly postOnly = 11;
 * @return {!proto.trade.PostOnly}
 */
proto.trade.NewOrder.prototype.getPostonly = function() {
  return /** @type {!proto.trade.PostOnly} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.trade.PostOnly} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setPostonly = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.CancelOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.CancelOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.CancelOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.CancelOrder}
 */
proto.trade.CancelOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.CancelOrder;
  return proto.trade.CancelOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.CancelOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.CancelOrder}
 */
proto.trade.CancelOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.CancelOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.CancelOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.CancelOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 marketId = 1;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 subaccountId = 4;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.ModifyOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.ModifyOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.ModifyOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    newprice: jspb.Message.getFieldWithDefault(msg, 4, 0),
    newquantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    selftradeprevention: jspb.Message.getFieldWithDefault(msg, 7, 0),
    postonly: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.ModifyOrder}
 */
proto.trade.ModifyOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.ModifyOrder;
  return proto.trade.ModifyOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.ModifyOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.ModifyOrder}
 */
proto.trade.ModifyOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewprice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewquantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 7:
      var value = /** @type {!proto.trade.SelfTradePrevention} */ (reader.readEnum());
      msg.setSelftradeprevention(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.PostOnly} */ (reader.readEnum());
      msg.setPostonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.ModifyOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.ModifyOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.ModifyOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNewprice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNewquantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getPostonly();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional uint64 marketId = 1;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 newPrice = 4;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getNewprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setNewprice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 newQuantity = 5;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getNewquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setNewquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 subaccountId = 6;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional SelfTradePrevention selfTradePrevention = 7;
 * @return {!proto.trade.SelfTradePrevention}
 */
proto.trade.ModifyOrder.prototype.getSelftradeprevention = function() {
  return /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.trade.SelfTradePrevention} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setSelftradeprevention = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.clearSelftradeprevention = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.ModifyOrder.prototype.hasSelftradeprevention = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PostOnly postOnly = 8;
 * @return {!proto.trade.PostOnly}
 */
proto.trade.ModifyOrder.prototype.getPostonly = function() {
  return /** @type {!proto.trade.PostOnly} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.PostOnly} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setPostonly = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.MassCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.MassCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.MassCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.MassCancel}
 */
proto.trade.MassCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.MassCancel;
  return proto.trade.MassCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.MassCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.MassCancel}
 */
proto.trade.MassCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 4:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.MassCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.MassCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.MassCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.trade.Side} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 subaccountId = 1;
 * @return {number}
 */
proto.trade.MassCancel.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 requestId = 2;
 * @return {number}
 */
proto.trade.MassCancel.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 marketId = 3;
 * @return {number}
 */
proto.trade.MassCancel.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setMarketid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.clearMarketid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MassCancel.prototype.hasMarketid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Side side = 4;
 * @return {!proto.trade.Side}
 */
proto.trade.MassCancel.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setSide = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.clearSide = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MassCancel.prototype.hasSide = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Heartbeat}
 */
proto.trade.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Heartbeat;
  return proto.trade.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Heartbeat}
 */
proto.trade.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 requestId = 1;
 * @return {number}
 */
proto.trade.Heartbeat.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Heartbeat} returns this
 */
proto.trade.Heartbeat.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.trade.Heartbeat.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Heartbeat} returns this
 */
proto.trade.Heartbeat.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.trade.OrderResponse.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.trade.OrderResponse.InnerCase = {
  INNER_NOT_SET: 0,
  NEWACK: 1,
  CANCELACK: 2,
  MODIFYACK: 3,
  NEWREJECT: 4,
  CANCELREJECT: 5,
  MODIFYREJECT: 6,
  FILL: 7,
  HEARTBEAT: 8,
  POSITION: 9,
  MASSCANCELACK: 10
};

/**
 * @return {proto.trade.OrderResponse.InnerCase}
 */
proto.trade.OrderResponse.prototype.getInnerCase = function() {
  return /** @type {proto.trade.OrderResponse.InnerCase} */(jspb.Message.computeOneofCase(this, proto.trade.OrderResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.OrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.OrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.OrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newack: (f = msg.getNewack()) && proto.trade.NewOrderAck.toObject(includeInstance, f),
    cancelack: (f = msg.getCancelack()) && proto.trade.CancelOrderAck.toObject(includeInstance, f),
    modifyack: (f = msg.getModifyack()) && proto.trade.ModifyOrderAck.toObject(includeInstance, f),
    newreject: (f = msg.getNewreject()) && proto.trade.NewOrderReject.toObject(includeInstance, f),
    cancelreject: (f = msg.getCancelreject()) && proto.trade.CancelOrderReject.toObject(includeInstance, f),
    modifyreject: (f = msg.getModifyreject()) && proto.trade.ModifyOrderReject.toObject(includeInstance, f),
    fill: (f = msg.getFill()) && proto.trade.Fill.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.trade.Heartbeat.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.trade.AssetPosition.toObject(includeInstance, f),
    masscancelack: (f = msg.getMasscancelack()) && proto.trade.MassCancelAck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.OrderResponse}
 */
proto.trade.OrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.OrderResponse;
  return proto.trade.OrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.OrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.OrderResponse}
 */
proto.trade.OrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.NewOrderAck;
      reader.readMessage(value,proto.trade.NewOrderAck.deserializeBinaryFromReader);
      msg.setNewack(value);
      break;
    case 2:
      var value = new proto.trade.CancelOrderAck;
      reader.readMessage(value,proto.trade.CancelOrderAck.deserializeBinaryFromReader);
      msg.setCancelack(value);
      break;
    case 3:
      var value = new proto.trade.ModifyOrderAck;
      reader.readMessage(value,proto.trade.ModifyOrderAck.deserializeBinaryFromReader);
      msg.setModifyack(value);
      break;
    case 4:
      var value = new proto.trade.NewOrderReject;
      reader.readMessage(value,proto.trade.NewOrderReject.deserializeBinaryFromReader);
      msg.setNewreject(value);
      break;
    case 5:
      var value = new proto.trade.CancelOrderReject;
      reader.readMessage(value,proto.trade.CancelOrderReject.deserializeBinaryFromReader);
      msg.setCancelreject(value);
      break;
    case 6:
      var value = new proto.trade.ModifyOrderReject;
      reader.readMessage(value,proto.trade.ModifyOrderReject.deserializeBinaryFromReader);
      msg.setModifyreject(value);
      break;
    case 7:
      var value = new proto.trade.Fill;
      reader.readMessage(value,proto.trade.Fill.deserializeBinaryFromReader);
      msg.setFill(value);
      break;
    case 8:
      var value = new proto.trade.Heartbeat;
      reader.readMessage(value,proto.trade.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 9:
      var value = new proto.trade.AssetPosition;
      reader.readMessage(value,proto.trade.AssetPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 10:
      var value = new proto.trade.MassCancelAck;
      reader.readMessage(value,proto.trade.MassCancelAck.deserializeBinaryFromReader);
      msg.setMasscancelack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.OrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.OrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.OrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trade.NewOrderAck.serializeBinaryToWriter
    );
  }
  f = message.getCancelack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trade.CancelOrderAck.serializeBinaryToWriter
    );
  }
  f = message.getModifyack();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.ModifyOrderAck.serializeBinaryToWriter
    );
  }
  f = message.getNewreject();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trade.NewOrderReject.serializeBinaryToWriter
    );
  }
  f = message.getCancelreject();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.trade.CancelOrderReject.serializeBinaryToWriter
    );
  }
  f = message.getModifyreject();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.trade.ModifyOrderReject.serializeBinaryToWriter
    );
  }
  f = message.getFill();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.trade.Fill.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.trade.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.trade.AssetPosition.serializeBinaryToWriter
    );
  }
  f = message.getMasscancelack();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.trade.MassCancelAck.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewOrderAck newAck = 1;
 * @return {?proto.trade.NewOrderAck}
 */
proto.trade.OrderResponse.prototype.getNewack = function() {
  return /** @type{?proto.trade.NewOrderAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.NewOrderAck, 1));
};


/**
 * @param {?proto.trade.NewOrderAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setNewack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearNewack = function() {
  return this.setNewack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasNewack = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CancelOrderAck cancelAck = 2;
 * @return {?proto.trade.CancelOrderAck}
 */
proto.trade.OrderResponse.prototype.getCancelack = function() {
  return /** @type{?proto.trade.CancelOrderAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.CancelOrderAck, 2));
};


/**
 * @param {?proto.trade.CancelOrderAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setCancelack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearCancelack = function() {
  return this.setCancelack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasCancelack = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ModifyOrderAck modifyAck = 3;
 * @return {?proto.trade.ModifyOrderAck}
 */
proto.trade.OrderResponse.prototype.getModifyack = function() {
  return /** @type{?proto.trade.ModifyOrderAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.ModifyOrderAck, 3));
};


/**
 * @param {?proto.trade.ModifyOrderAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setModifyack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearModifyack = function() {
  return this.setModifyack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasModifyack = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NewOrderReject newReject = 4;
 * @return {?proto.trade.NewOrderReject}
 */
proto.trade.OrderResponse.prototype.getNewreject = function() {
  return /** @type{?proto.trade.NewOrderReject} */ (
    jspb.Message.getWrapperField(this, proto.trade.NewOrderReject, 4));
};


/**
 * @param {?proto.trade.NewOrderReject|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setNewreject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearNewreject = function() {
  return this.setNewreject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasNewreject = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CancelOrderReject cancelReject = 5;
 * @return {?proto.trade.CancelOrderReject}
 */
proto.trade.OrderResponse.prototype.getCancelreject = function() {
  return /** @type{?proto.trade.CancelOrderReject} */ (
    jspb.Message.getWrapperField(this, proto.trade.CancelOrderReject, 5));
};


/**
 * @param {?proto.trade.CancelOrderReject|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setCancelreject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearCancelreject = function() {
  return this.setCancelreject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasCancelreject = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ModifyOrderReject modifyReject = 6;
 * @return {?proto.trade.ModifyOrderReject}
 */
proto.trade.OrderResponse.prototype.getModifyreject = function() {
  return /** @type{?proto.trade.ModifyOrderReject} */ (
    jspb.Message.getWrapperField(this, proto.trade.ModifyOrderReject, 6));
};


/**
 * @param {?proto.trade.ModifyOrderReject|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setModifyreject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearModifyreject = function() {
  return this.setModifyreject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasModifyreject = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Fill fill = 7;
 * @return {?proto.trade.Fill}
 */
proto.trade.OrderResponse.prototype.getFill = function() {
  return /** @type{?proto.trade.Fill} */ (
    jspb.Message.getWrapperField(this, proto.trade.Fill, 7));
};


/**
 * @param {?proto.trade.Fill|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setFill = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearFill = function() {
  return this.setFill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasFill = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Heartbeat heartbeat = 8;
 * @return {?proto.trade.Heartbeat}
 */
proto.trade.OrderResponse.prototype.getHeartbeat = function() {
  return /** @type{?proto.trade.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.trade.Heartbeat, 8));
};


/**
 * @param {?proto.trade.Heartbeat|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AssetPosition position = 9;
 * @return {?proto.trade.AssetPosition}
 */
proto.trade.OrderResponse.prototype.getPosition = function() {
  return /** @type{?proto.trade.AssetPosition} */ (
    jspb.Message.getWrapperField(this, proto.trade.AssetPosition, 9));
};


/**
 * @param {?proto.trade.AssetPosition|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MassCancelAck massCancelAck = 10;
 * @return {?proto.trade.MassCancelAck}
 */
proto.trade.OrderResponse.prototype.getMasscancelack = function() {
  return /** @type{?proto.trade.MassCancelAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.MassCancelAck, 10));
};


/**
 * @param {?proto.trade.MassCancelAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setMasscancelack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearMasscancelack = function() {
  return this.setMasscancelack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasMasscancelack = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.NewOrderAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.NewOrderAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.NewOrderAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exchangeorderid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    price: jspb.Message.getFieldWithDefault(msg, 6, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    side: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timeinforce: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ordertype: jspb.Message.getFieldWithDefault(msg, 10, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.NewOrderAck}
 */
proto.trade.NewOrderAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.NewOrderAck;
  return proto.trade.NewOrderAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.NewOrderAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.NewOrderAck}
 */
proto.trade.NewOrderAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeorderid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 9:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeinforce(value);
      break;
    case 10:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.NewOrderAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.NewOrderAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.NewOrderAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTimeinforce();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
};


/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 exchangeOrderId = 4;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getExchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setExchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 marketId = 5;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 price = 6;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrderAck.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 quantity = 7;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Side side = 8;
 * @return {!proto.trade.Side}
 */
proto.trade.NewOrderAck.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional TimeInForce timeInForce = 9;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.NewOrderAck.prototype.getTimeinforce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setTimeinforce = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OrderType orderType = 10;
 * @return {!proto.trade.OrderType}
 */
proto.trade.NewOrderAck.prototype.getOrdertype = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setOrdertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional uint64 transactTime = 11;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 subaccountId = 12;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.CancelOrderAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.CancelOrderAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.CancelOrderAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.CancelOrderAck}
 */
proto.trade.CancelOrderAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.CancelOrderAck;
  return proto.trade.CancelOrderAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.CancelOrderAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.CancelOrderAck}
 */
proto.trade.CancelOrderAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.CancelOrderAck.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.CancelOrderAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.CancelOrderAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.CancelOrderAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.CancelOrderAck.Reason = {
  UNCLASSIFIED: 0,
  DISCONNECT: 1,
  REQUESTED: 2,
  IOC: 3,
  STP_RESTING: 4,
  STP_AGGRESSING: 5,
  MASS_CANCEL: 6
};

/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transactTime = 4;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccountId = 5;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.CancelOrderAck.Reason}
 */
proto.trade.CancelOrderAck.prototype.getReason = function() {
  return /** @type {!proto.trade.CancelOrderAck.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.CancelOrderAck.Reason} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 marketId = 7;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.ModifyOrderAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.ModifyOrderAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.ModifyOrderAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    newquantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    price: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.ModifyOrderAck}
 */
proto.trade.ModifyOrderAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.ModifyOrderAck;
  return proto.trade.ModifyOrderAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.ModifyOrderAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.ModifyOrderAck}
 */
proto.trade.ModifyOrderAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewquantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.ModifyOrderAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.ModifyOrderAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.ModifyOrderAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNewquantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transactTime = 4;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 newQuantity = 5;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getNewquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setNewquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 subaccountId = 6;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 marketId = 7;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 price = 8;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.MassCancelAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.MassCancelAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.MassCancelAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancelAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalaffectedorders: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.MassCancelAck}
 */
proto.trade.MassCancelAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.MassCancelAck;
  return proto.trade.MassCancelAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.MassCancelAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.MassCancelAck}
 */
proto.trade.MassCancelAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.MassCancelAck.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalaffectedorders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.MassCancelAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.MassCancelAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.MassCancelAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancelAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!proto.trade.MassCancelAck.Reason} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTotalaffectedorders();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.MassCancelAck.Reason = {
  UNCLASSIFIED: 0,
  INVALID_MARKET_ID: 1,
  INVALID_SIDE: 2
};

/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 subaccountId = 2;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transactTime = 4;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.MassCancelAck.Reason}
 */
proto.trade.MassCancelAck.prototype.getReason = function() {
  return /** @type {!proto.trade.MassCancelAck.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.MassCancelAck.Reason} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.clearReason = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MassCancelAck.prototype.hasReason = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 totalAffectedOrders = 7;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getTotalaffectedorders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setTotalaffectedorders = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.NewOrderReject.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.NewOrderReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.NewOrderReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    price: jspb.Message.getFieldWithDefault(msg, 8, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    side: jspb.Message.getFieldWithDefault(msg, 10, 0),
    timeinforce: jspb.Message.getFieldWithDefault(msg, 11, 0),
    ordertype: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.NewOrderReject}
 */
proto.trade.NewOrderReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.NewOrderReject;
  return proto.trade.NewOrderReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.NewOrderReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.NewOrderReject}
 */
proto.trade.NewOrderReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.NewOrderReject.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 10:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 11:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeinforce(value);
      break;
    case 12:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.NewOrderReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.NewOrderReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.NewOrderReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getTimeinforce();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.NewOrderReject.Reason = {
  UNCLASSIFIED: 0,
  INVALID_QUANTITY: 1,
  INVALID_MARKET_ID: 2,
  DUPLICATE_ORDER_ID: 3,
  INVALID_SIDE: 4,
  INVALID_TIME_IN_FORCE: 5,
  INVALID_ORDER_TYPE: 6,
  INVALID_POST_ONLY: 7,
  INVALID_SELF_TRADE_PREVENTION: 8,
  UNKNOWN_TRADER: 9,
  PRICE_WITH_MARKET_ORDER: 10,
  POST_ONLY_WITH_MARKET_ORDER: 11,
  POST_ONLY_WITH_INVALID_TIF: 12,
  EXCEEDED_SPOT_POSITION: 13,
  NO_OPPOSING_LIMIT_ORDER: 14,
  POST_ONLY_WOULD_TRADE: 15,
  DID_NOT_FULLY_FILL: 16
};

/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transactTime = 4;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccountId = 5;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.NewOrderReject.Reason}
 */
proto.trade.NewOrderReject.prototype.getReason = function() {
  return /** @type {!proto.trade.NewOrderReject.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.NewOrderReject.Reason} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 marketId = 7;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 price = 8;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrderReject.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 quantity = 9;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional Side side = 10;
 * @return {!proto.trade.Side}
 */
proto.trade.NewOrderReject.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional TimeInForce timeInForce = 11;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.NewOrderReject.prototype.getTimeinforce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setTimeinforce = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional OrderType orderType = 12;
 * @return {!proto.trade.OrderType}
 */
proto.trade.NewOrderReject.prototype.getOrdertype = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setOrdertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.CancelOrderReject.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.CancelOrderReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.CancelOrderReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.CancelOrderReject}
 */
proto.trade.CancelOrderReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.CancelOrderReject;
  return proto.trade.CancelOrderReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.CancelOrderReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.CancelOrderReject}
 */
proto.trade.CancelOrderReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.CancelOrderReject.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.CancelOrderReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.CancelOrderReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.CancelOrderReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.CancelOrderReject.Reason = {
  UNCLASSIFIED: 0,
  INVALID_MARKET_ID: 1,
  ORDER_NOT_FOUND: 2
};

/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transactTime = 4;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccountId = 5;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.CancelOrderReject.Reason}
 */
proto.trade.CancelOrderReject.prototype.getReason = function() {
  return /** @type {!proto.trade.CancelOrderReject.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.CancelOrderReject.Reason} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 marketId = 7;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.ModifyOrderReject.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.ModifyOrderReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.ModifyOrderReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.ModifyOrderReject}
 */
proto.trade.ModifyOrderReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.ModifyOrderReject;
  return proto.trade.ModifyOrderReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.ModifyOrderReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.ModifyOrderReject}
 */
proto.trade.ModifyOrderReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.ModifyOrderReject.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.ModifyOrderReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.ModifyOrderReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.ModifyOrderReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.ModifyOrderReject.Reason = {
  UNCLASSIFIED: 0,
  INVALID_QUANTITY: 1,
  INVALID_MARKET_ID: 2,
  ORDER_NOT_FOUND: 3,
  INVALID_IFM: 4,
  INVALID_POST_ONLY: 5,
  INVALID_SELF_TRADE_PREVENTION: 6,
  UNKNOWN_TRADER: 7,
  EXCEEDED_SPOT_POSITION: 8,
  POST_ONLY_WOULD_TRADE: 9
};

/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 clientOrderId = 2;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 requestId = 3;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transactTime = 4;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccountId = 5;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.ModifyOrderReject.Reason}
 */
proto.trade.ModifyOrderReject.prototype.getReason = function() {
  return /** @type {!proto.trade.ModifyOrderReject.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.ModifyOrderReject.Reason} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 marketId = 7;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Fill.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Fill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Fill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Fill.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgseqnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientorderid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exchangeorderid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fillprice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fillquantity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    leavesquantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    transacttime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Fill}
 */
proto.trade.Fill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Fill;
  return proto.trade.Fill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Fill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Fill}
 */
proto.trade.Fill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgseqnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeorderid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFillprice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFillquantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLeavesquantity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransacttime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Fill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Fill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Fill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Fill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgseqnum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFillprice();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFillquantity();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLeavesquantity();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTransacttime();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional uint64 msgSeqNum = 1;
 * @return {number}
 */
proto.trade.Fill.prototype.getMsgseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setMsgseqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 marketId = 2;
 * @return {number}
 */
proto.trade.Fill.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 clientOrderId = 3;
 * @return {number}
 */
proto.trade.Fill.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 exchangeOrderId = 4;
 * @return {number}
 */
proto.trade.Fill.prototype.getExchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setExchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fillPrice = 5;
 * @return {number}
 */
proto.trade.Fill.prototype.getFillprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setFillprice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 fillQuantity = 6;
 * @return {number}
 */
proto.trade.Fill.prototype.getFillquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setFillquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 leavesQuantity = 7;
 * @return {number}
 */
proto.trade.Fill.prototype.getLeavesquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setLeavesquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 transactTime = 8;
 * @return {number}
 */
proto.trade.Fill.prototype.getTransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setTransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 subaccountId = 9;
 * @return {number}
 */
proto.trade.Fill.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.AssetPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.AssetPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.AssetPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assetid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: (f = msg.getTotal()) && proto.trade.RawUnits.toObject(includeInstance, f),
    available: (f = msg.getAvailable()) && proto.trade.RawUnits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.AssetPosition}
 */
proto.trade.AssetPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.AssetPosition;
  return proto.trade.AssetPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.AssetPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.AssetPosition}
 */
proto.trade.AssetPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssetid(value);
      break;
    case 3:
      var value = new proto.trade.RawUnits;
      reader.readMessage(value,proto.trade.RawUnits.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.trade.RawUnits;
      reader.readMessage(value,proto.trade.RawUnits.deserializeBinaryFromReader);
      msg.setAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.AssetPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.AssetPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.AssetPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssetid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.RawUnits.serializeBinaryToWriter
    );
  }
  f = message.getAvailable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trade.RawUnits.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 subaccountId = 1;
 * @return {number}
 */
proto.trade.AssetPosition.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 assetId = 2;
 * @return {number}
 */
proto.trade.AssetPosition.prototype.getAssetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RawUnits total = 3;
 * @return {?proto.trade.RawUnits}
 */
proto.trade.AssetPosition.prototype.getTotal = function() {
  return /** @type{?proto.trade.RawUnits} */ (
    jspb.Message.getWrapperField(this, proto.trade.RawUnits, 3));
};


/**
 * @param {?proto.trade.RawUnits|undefined} value
 * @return {!proto.trade.AssetPosition} returns this
*/
proto.trade.AssetPosition.prototype.setTotal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.clearTotal = function() {
  return this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.AssetPosition.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RawUnits available = 4;
 * @return {?proto.trade.RawUnits}
 */
proto.trade.AssetPosition.prototype.getAvailable = function() {
  return /** @type{?proto.trade.RawUnits} */ (
    jspb.Message.getWrapperField(this, proto.trade.RawUnits, 4));
};


/**
 * @param {?proto.trade.RawUnits|undefined} value
 * @return {!proto.trade.AssetPosition} returns this
*/
proto.trade.AssetPosition.prototype.setAvailable = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.clearAvailable = function() {
  return this.setAvailable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.AssetPosition.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.RawUnits.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.RawUnits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.RawUnits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RawUnits.toObject = function(includeInstance, msg) {
  var f, obj = {
    word0: jspb.Message.getFieldWithDefault(msg, 1, 0),
    word1: jspb.Message.getFieldWithDefault(msg, 2, 0),
    word2: jspb.Message.getFieldWithDefault(msg, 3, 0),
    word3: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.RawUnits}
 */
proto.trade.RawUnits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.RawUnits;
  return proto.trade.RawUnits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.RawUnits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.RawUnits}
 */
proto.trade.RawUnits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord0(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord2(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.RawUnits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.RawUnits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.RawUnits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RawUnits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord0();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWord1();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getWord2();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getWord3();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 word0 = 1;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord0 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 word1 = 2;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord1 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 word2 = 3;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord2 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 word3 = 5;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord3 = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.trade.Bootstrap.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.trade.Bootstrap.InnerCase = {
  INNER_NOT_SET: 0,
  DONE: 1,
  RESTING: 2,
  POSITION: 3
};

/**
 * @return {proto.trade.Bootstrap.InnerCase}
 */
proto.trade.Bootstrap.prototype.getInnerCase = function() {
  return /** @type {proto.trade.Bootstrap.InnerCase} */(jspb.Message.computeOneofCase(this, proto.trade.Bootstrap.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Bootstrap.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Bootstrap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Bootstrap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Bootstrap.toObject = function(includeInstance, msg) {
  var f, obj = {
    done: (f = msg.getDone()) && proto.trade.Done.toObject(includeInstance, f),
    resting: (f = msg.getResting()) && proto.trade.RestingOrders.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.trade.AssetPositions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Bootstrap}
 */
proto.trade.Bootstrap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Bootstrap;
  return proto.trade.Bootstrap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Bootstrap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Bootstrap}
 */
proto.trade.Bootstrap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.Done;
      reader.readMessage(value,proto.trade.Done.deserializeBinaryFromReader);
      msg.setDone(value);
      break;
    case 2:
      var value = new proto.trade.RestingOrders;
      reader.readMessage(value,proto.trade.RestingOrders.deserializeBinaryFromReader);
      msg.setResting(value);
      break;
    case 3:
      var value = new proto.trade.AssetPositions;
      reader.readMessage(value,proto.trade.AssetPositions.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Bootstrap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Bootstrap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Bootstrap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Bootstrap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDone();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trade.Done.serializeBinaryToWriter
    );
  }
  f = message.getResting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trade.RestingOrders.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.AssetPositions.serializeBinaryToWriter
    );
  }
};


/**
 * optional Done done = 1;
 * @return {?proto.trade.Done}
 */
proto.trade.Bootstrap.prototype.getDone = function() {
  return /** @type{?proto.trade.Done} */ (
    jspb.Message.getWrapperField(this, proto.trade.Done, 1));
};


/**
 * @param {?proto.trade.Done|undefined} value
 * @return {!proto.trade.Bootstrap} returns this
*/
proto.trade.Bootstrap.prototype.setDone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.trade.Bootstrap.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.Bootstrap} returns this
 */
proto.trade.Bootstrap.prototype.clearDone = function() {
  return this.setDone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.Bootstrap.prototype.hasDone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RestingOrders resting = 2;
 * @return {?proto.trade.RestingOrders}
 */
proto.trade.Bootstrap.prototype.getResting = function() {
  return /** @type{?proto.trade.RestingOrders} */ (
    jspb.Message.getWrapperField(this, proto.trade.RestingOrders, 2));
};


/**
 * @param {?proto.trade.RestingOrders|undefined} value
 * @return {!proto.trade.Bootstrap} returns this
*/
proto.trade.Bootstrap.prototype.setResting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.trade.Bootstrap.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.Bootstrap} returns this
 */
proto.trade.Bootstrap.prototype.clearResting = function() {
  return this.setResting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.Bootstrap.prototype.hasResting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssetPositions position = 3;
 * @return {?proto.trade.AssetPositions}
 */
proto.trade.Bootstrap.prototype.getPosition = function() {
  return /** @type{?proto.trade.AssetPositions} */ (
    jspb.Message.getWrapperField(this, proto.trade.AssetPositions, 3));
};


/**
 * @param {?proto.trade.AssetPositions|undefined} value
 * @return {!proto.trade.Bootstrap} returns this
*/
proto.trade.Bootstrap.prototype.setPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.trade.Bootstrap.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.Bootstrap} returns this
 */
proto.trade.Bootstrap.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.Bootstrap.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trade.RestingOrders.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.RestingOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.RestingOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.RestingOrders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrders.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.trade.RestingOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.RestingOrders}
 */
proto.trade.RestingOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.RestingOrders;
  return proto.trade.RestingOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.RestingOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.RestingOrders}
 */
proto.trade.RestingOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.RestingOrder;
      reader.readMessage(value,proto.trade.RestingOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.RestingOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.RestingOrders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.RestingOrders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.trade.RestingOrder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RestingOrder orders = 1;
 * @return {!Array<!proto.trade.RestingOrder>}
 */
proto.trade.RestingOrders.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.trade.RestingOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.trade.RestingOrder, 1));
};


/**
 * @param {!Array<!proto.trade.RestingOrder>} value
 * @return {!proto.trade.RestingOrders} returns this
*/
proto.trade.RestingOrders.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.trade.RestingOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trade.RestingOrder}
 */
proto.trade.RestingOrders.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.trade.RestingOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.trade.RestingOrders} returns this
 */
proto.trade.RestingOrders.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trade.AssetPositions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.AssetPositions.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.AssetPositions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.AssetPositions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPositions.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.trade.AssetPosition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.AssetPositions}
 */
proto.trade.AssetPositions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.AssetPositions;
  return proto.trade.AssetPositions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.AssetPositions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.AssetPositions}
 */
proto.trade.AssetPositions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.AssetPosition;
      reader.readMessage(value,proto.trade.AssetPosition.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.AssetPositions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.AssetPositions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.AssetPositions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPositions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.trade.AssetPosition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetPosition positions = 1;
 * @return {!Array<!proto.trade.AssetPosition>}
 */
proto.trade.AssetPositions.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.trade.AssetPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.trade.AssetPosition, 1));
};


/**
 * @param {!Array<!proto.trade.AssetPosition>} value
 * @return {!proto.trade.AssetPositions} returns this
*/
proto.trade.AssetPositions.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.trade.AssetPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trade.AssetPosition}
 */
proto.trade.AssetPositions.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.trade.AssetPosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.trade.AssetPositions} returns this
 */
proto.trade.AssetPositions.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Done.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Done.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Done} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Done.toObject = function(includeInstance, msg) {
  var f, obj = {
    latesttransacttime: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Done}
 */
proto.trade.Done.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Done;
  return proto.trade.Done.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Done} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Done}
 */
proto.trade.Done.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatesttransacttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Done.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Done.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Done} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Done.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatesttransacttime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 latestTransactTime = 1;
 * @return {number}
 */
proto.trade.Done.prototype.getLatesttransacttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Done} returns this
 */
proto.trade.Done.prototype.setLatesttransacttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.RestingOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.RestingOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.RestingOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientorderid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exchangeorderid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    originalquantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    side: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timeinforce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ordertype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    remainingquantity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    resttime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    subaccountid: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.RestingOrder}
 */
proto.trade.RestingOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.RestingOrder;
  return proto.trade.RestingOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.RestingOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.RestingOrder}
 */
proto.trade.RestingOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientorderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeorderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOriginalquantity(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 7:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeinforce(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemainingquantity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResttime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.RestingOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.RestingOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.RestingOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientorderid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getExchangeorderid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMarketid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOriginalquantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTimeinforce();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getRemainingquantity();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getResttime();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getSubaccountid();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional uint64 clientOrderId = 1;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getClientorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setClientorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 exchangeOrderId = 2;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getExchangeorderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setExchangeorderid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 marketId = 3;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getMarketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 price = 4;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 originalQuantity = 5;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getOriginalquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setOriginalquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Side side = 6;
 * @return {!proto.trade.Side}
 */
proto.trade.RestingOrder.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional TimeInForce timeInForce = 7;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.RestingOrder.prototype.getTimeinforce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setTimeinforce = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional OrderType orderType = 8;
 * @return {!proto.trade.OrderType}
 */
proto.trade.RestingOrder.prototype.getOrdertype = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setOrdertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional uint64 remainingQuantity = 9;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getRemainingquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setRemainingquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 restTime = 10;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getResttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setResttime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 subaccountId = 11;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getSubaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setSubaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * @enum {number}
 */
proto.trade.Side = {
  BID: 0,
  ASK: 1
};

/**
 * @enum {number}
 */
proto.trade.TimeInForce = {
  IMMEDIATE_OR_CANCEL: 0,
  GOOD_FOR_SESSION: 1,
  FILL_OR_KILL: 2
};

/**
 * @enum {number}
 */
proto.trade.OrderType = {
  LIMIT: 0,
  MARKET_LIMIT: 1,
  MARKET_WITH_PROTECTION: 2
};

/**
 * @enum {number}
 */
proto.trade.SelfTradePrevention = {
  CANCEL_RESTING: 0,
  CANCEL_AGGRESSING: 1,
  ALLOW_SELF_TRADE: 2
};

/**
 * @enum {number}
 */
proto.trade.PostOnly = {
  DISABLED: 0,
  ENABLED: 1
};

goog.object.extend(exports, proto.trade);
